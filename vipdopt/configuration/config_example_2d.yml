# Copyright Â© 2023, California Institute of Technology. All rights reserved.
#
# Use in source and binary forms for nonexclusive, nonsublicenseable, commercial purposes with or without modification, is permitted provided that the following conditions are met:
# - Use of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# - Use in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the software.
# - Neither the name of the California Institute of Technology (Caltech) nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#* Debug

start_from_step: 0          # 0 if running entire file in one shot
shelf_fn: 'save_state'

restart_epoch: 0            # Both 0 if not restarting
restart_iter: 0 #2 #299

#* File Options

lumapi_filepath_local: "C:\\Program Files\\Lumerical\\v212\\api\\python\\lumapi.py"
lumapi_filepath_hpc: "/central/home/ifoo/lumerical/2021a_r22/api/python/lumapi.py"
#! do not include spaces in filepaths passed to linux

simulator_name: 'LumericalFDTD'
simulator_max_wait_time: 3600   # seconds
use_autograd: False

#* Back-Compatibility

convert_existing: False     # Are we converting a previous file that didn't have the mode overlap FoM?

#* Mesh

mesh_spacing_um: 0.051 # 0.017
# geometry_spacing_minimum_um: 0.051    # NOTE: UNUSED
geometry_spacing_lateral_um: 0.085 #0.051 # 0.085

device_scale_um: 0.051    # This is only used to scale vertical dimensions: focal length, device vertical layer voxels, and FDTD gap sizes.
# Edit: device_scale_um is just meant to arbitrarily scale a few things it's not necessarily ONLY used for vertical dimensions
# TODO: Consolidate with geometry_spacing_lateral_um 

use_smooth_blur: False
min_feature_size_um: 0.085  # used only for blurring

#* Optical

background_index: 1.5   # TiO2
min_device_index: 1.5
max_device_index: 2.4   # SiO2

init_permittivity_0_1_scale: 0.5
binarize_3_levels: False      #! new

focal_plane_center_lateral_um: 0

#* Device

num_vertical_layers: 5 # 10
vertical_layer_height_um: 0.408 # 0.204 #0.051 * 4 #0.017 * 8

device_size_lateral_um: 2.04 #2.125#2.091#2.04#2.091#2.04#geometry_spacing_lateral_um * 40

device_vertical_minimum_um: 0

#* Surroundings

# Structure the following list such that the last entry is the last medium above the device.
objects_above_device: [] #['permittivity_layer_substrate', #'silicon_substrate']
num_sidewalls: 0 #4
sidewall_material: 'etch'
sidewall_extend_pml: False
sidewall_extend_focalplane: True
sidewall_thickness_um: 0.085          # only needed if sidewall_extend_pml is False - 0.085 is a good value based on Study #20
sidewall_vertical_minimum_um: -0.765    # only needed if sidewall_extend_focalplane is False; describes how far down from the device they extend

#* Spectral

add_infrared: False
lambda_min_um: 0.45 # 0.375
lambda_max_um: 0.75 # 0.725
lambda_min_eval_um: 0.45 # 0.375
lambda_max_eval_um: 0.75 # 0.725

num_bands: 2 #3
num_points_per_band: 15 #5 # 20 #15

num_dispersive_ranges: 1

# Add PDAF Functionality
add_pdaf: False

pdaf_angle_phi_degrees: 45
pdaf_angle_theta_degrees: -8

pdaf_adj_src_idx: 0

#* FDTD

fdtd_simulation_time_fs: 600 #3000

#* Forward (Input) Source

weight_by_individual_wavelength: True   # At present this changes nothing.
use_gaussian_sources: True

use_airy_approximation: True
f_number: 2.2
airy_correction_factor: 0.84  # Approximation of central Airy lobe using a Gaussian profile
# See https://en.wikipedia.org/wiki/Airy_disk#Approximation_using_a_Gaussian_profile:~:text=to%20the%20intensity.-,Approximation%20using%20a%20Gaussian%20profile,-%5Bedit%5D
beam_size_multiplier: 1   #! new

source_angle_theta_vacuum_deg: 0 #46
source_angle_phi_deg: 0

# General polarized source information
xy_phi_rotations: [0, 90] #2D, apply this to polarization angle of the forward source. 
xy_adjtheta_rotations: [90, 0]  #2D settings. 3D is: [0, 90] applied to phi, and theta=90 for all
xy_pol_rotations: [0, 90]
xy_names: ['x', 'y']

use_source_aperture: True

#* Adjoint Source

num_focal_spots: 2

# Determine which adjoint source goes to each dispersive range
# Each dispersive range itself contains a map for how the wavelength buckets correspond to which specific adjoint sources on the focal plane.
dispersive_range_to_adjoint_src_map: [
  [ 0, 1, 2, 3 ]
]

# Determine which dispersive range goes to each adjoint source
adjoint_src_to_dispersive_range_map: [
  0,
  0,
  0,
  0
]

#* Optimization

max_epochs: 10
iter_per_epoch: 100
enforce_xy_gradient_symmetry: False #True#False#True

# Alternative is to weight by focal intensity - need to check max intensity weighting
weight_by_quadrant_transmission: True

#! 20230220 - Empirically, 300 iterations is usually the right number to get a stable optimization FoM.
num_epochs: 10
num_iterations_per_epoch: 30

total_num_iterations: 80 #40 #20 #300
epoch_list: [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80] #[0, 30, 40] # [0,16,20]  #[0, 4, 8, 12, 16, 20] #[0,30,60,90,120,150,180,210,240,270,300]

optimizer_algorithm: 'ADAM' #'Gradient Descent'
adam_betas: !!python/tuple [0.9, 0.999]

use_fixed_step_size: True   # Should be True for anything except Gradient Descent
fixed_step_size: 0.01 #2.0          # make sure to use floats

epoch_start_design_change_max: 0.15
epoch_end_design_change_max: 0.05
epoch_start_design_change_min: 0.05
epoch_end_design_change_min: 0

fom_types: ['transmission', 'intensity']
optimization_fom: 'intensity'    # Has to be one from the fom_types list

#! new-------
reinterpolate_permittivity: True # True
reinterpolate_permittivity_factor: 2 # 15 #8 #1#5   # Must be 1 if reinterpolate_permittivity is False
reinterpolate_type: 'nearest' #'linear'   #NOTE: In the end we implement both anyway. Deprecated


#! new-------
border_optimization: False

layer_gradient: False
flip_gradient: False

#* Spectral and polarization selectivity information

# Determine the polarizations that will be directed to each focal area
polarizations_focal_plane_map: [ ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'] ]

weight_focal_plane_map_performance_weighting: [ 1.0, 1.0, 1.0, 1.0 ]
weight_focal_plane_map: [ 1.0, 1.0, 1.0, 1.0 ]

do_green_balance: False #True

polarization_name_to_idx: { 'x':0, 'y':1, 'z':2 }

desired_peaks_per_band_um: [ 0.45, 0.54, 0.65 ]
# desired_peaks_per_band_um: [ 0.48, 0.52, 0.59 ]
# desired_peaks_per_band_um: [ 0.48, 0.53, 0.62 ]

explicit_band_centering: True
shuffle_green: False #True#False#True#False

infrared_center_um: 0.94
do_rejection: False
softplus_kappa:  2



#!* NEW STUFF JULY 2023

#* Border aperiodic
evaluate_bordered_extended: False # True   
# You only see this in the evaluate code block, so can ignore. But also, part of it is in
# the restart block in order to truncate the cur_design_variable?


#* Three-material levels
do_normalize: False

#* Spacers
# assuming we don't have something like vertically blurring - i.e. - each layer is controlled independently
should_fix_layers: True
# fixed_layers: [ 1, 2, 3, 5, 6, 7 ]
fixed_layers: [ 1, 3 ]
fixed_layers_density: 0

#* New Stuff 20240222:
optimizer: "AdamOptimizer"
optimizer_settings: {
        "step_size": 0.1,
        "betas": [
            0.9,
            0.99
        ],
        "eps": "1e-8",
        "moments": [
            0.0,
            0.0
        ]
}
figures_of_merit: {
        "fom_0": {
            "type": "BayerFilterFoM",
            "fom_monitors": [
                [
                    "forward_src_x",
                    "focal_monitor_0"
                ]
            ],
            "grad_monitors": [
                [
                    "forward_src_x",
                    "design_efield_monitor"
                ],
                [
                    "adj_src_0x",
                    "design_efield_monitor"
                ]
            ],
            "polarization": "TE",
            "freq": [
                0.0,
                0.1,
                0.2
            ],
            "opt_ids": [
                0,
                1,
                2
            ],
            "weight": 1.0
        }
    }