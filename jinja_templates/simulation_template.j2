{
    "info": {
        "name": "optimization",
        "path": "",
        "simulator_name": "LumericalFDTD",
        "coordinates": {}
    },
    "objects": {
        "FDTD": {
            "name": "FDTD",
            "obj_type": "fdtd",
            "properties": {
                "dimension": "{{ data.simulator_dimension }}",
                "x span": {{ data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y max": {{ data.fdtd_region_maximum_vertical_um * 1e-6 }},
                "y min": {{ data.fdtd_region_minimum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y span": {{data.fdtd_region_size_lateral_um * 1e-6 }},
                "z max": {{ data.fdtd_region_maximum_vertical_um * 1e-6 }},
                "z min": {{ data.fdtd_region_minimum_vertical_um * 1e-6 }},
                "simulation time": {{ data.fdtd_simulation_time_fs * 1e-15 }},
                {%- endif %}
                {% if data.boundary_conditions == 'periodic' -%}
                "x min bc": "Periodic",
                "y min bc": "Periodic",
                {%- endif %}
                "index": {{ data.background_index }}
            }
        },
        {#- Forward Sources -#}

        {%- for i in range(0, 2) -%}
        {%- set fwrd_name = "forward_src_" + data.xy_names[i] %}
        "{{ fwrd_name }}": {
            "name": "{{ fwrd_name}}",
            {% if data.use_gaussian_sources -%}
            {# Add a Gaussian wave forward source at angled incidence #}
            "obj_type": "gaussian",
            "properties": {
                "x span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "injection axis": "y-axis",
                "y": {{ data.src_maximum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "injection axis": "z-axis",
                "y span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                "z": {{ data.src_maximum_vertical_um * 1e-6 }},
                {%- endif %}
                "direction": "Backward",
                {%- set shift_x_center = ((data.device_vertical_maximum_um - data.src_maximum_vertical_um) | abs) * (data.source_angle_theta_rad | tan) %}
                "x": {{ shift_x_center * 1e-6 }},
                "wavelength start": {{ data.lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.lambda_max_um * 1e-6 }},
                "waist radius w0": {{ data.gaussian_waist_radius_um * 1e-6 }},
                "distance from waist": {{ (data.device_vertical_maximum_um - data.src_maximum_vertical_um) * 1e-6 }},
                "angle theta": {{ data.source_angle_theta_deg }},
                "angle phi": {{ data.source_angle_phi_deg }},
                "polarization angle": {{ data.xy_phi_rotations[i] }}
            }
            {%- else -%}
            "obj_type": "tfsf",
            {# Add a TFSF plane wave forward source at normal incidence #}
            "properties": {
                "angle theta": {{ data.source_angle_theta_deg }},
                "angle phi": {{ data.source_angle_phi_deg }},
                "polarization angle": {{ data.xy_phi_rotations[i] }},
                "direction": "Backward",
                "x span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y max": {{ data.src_maximum_vertical_um * 1e-6 }},
                "y min": {{ data.src_minimum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                "z max": {{ data.src_maximum_vertical_um * 1e-6 }},
                "z min": {{ data.src_minimum_vertical_um * 1e-6 }},
                {%- endif %}
                "wavelength start": {{ data.lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.lambda_max_um * 1e-6 }}
            }
            {%- endif %}
        },
        {%- endfor -%}
        {#- Adjoint Sources -#}
        {# Place dipole adjoint sources at the focal plane that can ring in both x-axis and y-axis #}
        {%- for src_idx in range(0, data.num_adjoint_sources) -%}
            {%- for xy_idx in range(0, 2) -%}
        {%- set adj_name = ("adj_src_%d" | format(src_idx)) + data.xy_names[xy_idx] %}
        "{{ adj_name }}": {
            "name": "{{ adj_name }}",
            "obj_type": "dipole",
            "properties": {
                "x": {{ data.adjoint_x_positions_um[src_idx] * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y": {{ data.adjoint_vertical_um * 1e-6 }},
                "theta": {{ data.xy_adjtheta_rotations[xy_idx] }},
                "phi": 0,
                {% elif data.simulator_dimension == '3D'-%}
                "y": {{ data.adjoint_y_positions_um[src_idx] * 1e-6 }},
                "z": {{ data.adjoint_vertical_um * 1e-6 }},
                "theta": 90,
                "phi": {{ data.xy_phi_rotations[xy_idx] }},
                {%- endif %}
                "wavelength start": {{ data.lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.lambda_max_um * 1e-6 }}
            }
        },
            {%- endfor -%}
        {%- endfor %}

        {#- Focal Monitors -#}
        {# Set up adjoint point monitors to get electric field strength at focus spots.  This will allow us to
        # compute the figure of merit as well as weight the adjoint simulations properly in calculation of the
        # gradient. #}
        {%- for adj_src in range(0, data.num_adjoint_sources) -%}
        {%- set name = "focal_monitor_%d" | format(adj_src) %}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "power",
            "properties": {
                "monitor type": "point",
                "x": {{ data.adjoint_x_positions_um[adj_src] * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y": {{ data.adjoint_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y": {{ data.adjoint_y_positions_um[adj_src] * 1e-6 }},
                "z": {{ data.adjoint_vertical_um * 1e-6 }},
                {%- endif %}
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },
        {%- endfor -%}
        {#- Transmission Monitors -#}
        {%- for adj_src in range(0, data.num_adjoint_sources) -%}
        {%- set name = "transmission_monitor_%d" | format(adj_src) %}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.adjoint_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": {{ data.adjoint_y_positions_um[adj_src] * 1e-6 }},
                "y span": {{ 0.5 * data.device_size_lateral_um * 1e-6 }},
                "z": {{ data.adjoint_vertical_um * 1e-6 }},
                {%- endif %}
                "x": {{ data.adjoint_x_positions_um[adj_src] * 1e-6 }},
                "x span": {{ 0.5 * data.device_size_lateral_um * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },
        {%- endfor %}
        "transmission_focal_monitor_": {
            "name": "transmission_focal_monitor_",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.adjoint_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": 0,
                "y span": {{ data.device_size_lateral_um * 1e-6 }},
                "z": {{ data.adjoint_vertical_um * 1e-6 }},
                {%- endif %}
                "x": 0,
                "x span": {{ data.device_size_lateral_um * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },
        {#- Install Aperture that blocks off source -#}
        {%- if data.use_source_aperture %}
        "PEC_screen": {
            "name": "PEC_screen",
            "obj_type": "rect",
            "properties": {
                "x": 0,
                "x span": {{ 1.1 * 4 / 3 * 1.2 * data.device_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y min": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                "y max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um + data.pec_aperture_thickness_um) * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y": 0,
                "y span": {{ 1.1 * 4 / 3 * 1.2 * data.device_size_lateral_um * 1e-6 }},
                "z min": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                "z max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um + data.pec_aperture_thickness_um) * 1e-6 }},
                {%- endif %}
                {%- if data.boundary_conditions == 'periodic' %}
                "enabled": false,
                "x span": {{data.fdtd_region_size_lateral_um * 1e-6}},
                "y span": {{data.fdtd_region_size_lateral_um * 1e-6}},
                {% endif -%}
                "material": "PEC (Perfect Electrical Conductor)"
            }
        },
        "source_aperture": {
            "name": "source_aperture",
            "obj_type": "rect",
            "properties": {
                "x": 0,
                "x span": {{ data.device_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y min": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                "y max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um + data.pec_aperture_thickness_um) * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y": 0,
                "y span": {{ data.device_size_lateral_um * 1e-6 }},
                "z min": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                "z max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um + data.pec_aperture_thickness_um) * 1e-6 }},
                {%- endif %}
                {%- if data.boundary_conditions == 'periodic' %}
                "enabled": false,
                {% endif -%}
                "index": {{ data.background_index }}
            }
        },
        {% endif -%}

        {# todo: Set up substrates to use data.substrates_above_device#}
        "substrate": {
            "name": "substrate",
            "obj_type": "rect",
            "properties": {
                "x": 0,
                {%- if data.boundary_conditions == 'periodic' %}
                "x span": {{data.fdtd_region_size_lateral_um * 1e-6}},
                {% if data.simulator_dimension == '3D'-%}
                "y span": {{data.fdtd_region_size_lateral_um * 1e-6}},
                {%- endif %}
                {%- else -%}
                "x span": {{ 1.1 * 4 / 3 * 1.2 * data.device_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '3D'-%}
                "y span": {{ 1.1 * 4 / 3 * 1.2 * data.device_size_lateral_um * 1e-6 }},
                {% endif -%}
                {% endif -%}

                {% if data.simulator_dimension == '2D'-%}
                "y min": {{ (data.device_vertical_maximum_um) * 1e-6 }},
                "y max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y": 0,
                "z min": {{ (data.device_vertical_maximum_um) * 1e-6 }},
                "z max": {{ (data.device_vertical_maximum_um + data.substrate_thickness_um) * 1e-6 }},
                {%- endif %}
                "material": "SiO2 (Glass) - Palik"
            }
        },

        {#- Set up sidewalls on the side to try and attenuate crosstalk -#}
        {% for idx in range(0, data.num_sidewalls) -%}
        {%- set name = "sidewall_%d" | format(idx) -%}
        {# TODO: set up for 2D #}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "rect",
            "properties": {
                "x": {{ data.sidewall_x_positions_um[idx] * 1e-6 }},
                "x span": {{ data.sidewall_xspan_positions_um[idx] * 1e-6 }},
                "y": {{ data.sidewall_y_positions_um[idx] * 1e-6 }},
                "y span": {{ data.sidewall_yspan_positions_um[idx] * 1e-6 }},
                {% if data.sidewall_extend_focalplane -%}
                "z min": {{ data.adjoint_vertical_um * 1e-6 }},
                {%- else -%}
                "z min": {{ data.sidewall_vertical_minimum_um * 1e-6 }},
                {%- endif %}
                "z max": {{ data.device_vertical_maximum_um * 1e-6 }},
                "material": "{{ data.sidewall_material }}"
            }
        },
        {% endfor -%}
        {#- Apply finer mesh regions restricted to sidewalls -#}
        {% for idx in range(0, data.num_sidewalls) -%}
        {%- set name = "mesh_sidewall_%d" | format(idx) -%}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "mesh",
            "properties": {
                "set maximum mesh step": 1,
                "override z mesh": 0,
                "based on a structure": 1,
                "structure": "{{ "sidewall_%d" | format(idx) }}",
                {% if data.sidewall_x_positions_um[idx] < data.sidewall_y_positions_um[idx] -%}
                "override x mesh": 1,
                "override y mesh": 0,
                "dx": {{ data.mesh_spacing_um * 1e-6 }}
                {%- else -%}
                "override x mesh": 0,
                "override y mesh": 1,
                "dy": {{ data.mesh_spacing_um * 1e-6 }}
                {%- endif %}
            }
        },
        {% endfor -%}

        {% set device_center_vertical = (data.device_vertical_maximum_um+data.device_vertical_minimum_um)/2 %}
        {% set device_hgt = (data.device_vertical_maximum_um - data.device_vertical_minimum_um) %}
        {#- Add device region and create device permittivity -#}
        "design_import": {
            "name": "design_import",
            "obj_type": "import",
            "dev_id": 0,                {# ID keeps track of which device this belongs to. #}
            "properties": {
                "x span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "y max": {{ data.device_vertical_maximum_um * 1e-6 }},
                "z span": {{ 3 * data.mesh_spacing_um * 1e-6 }}
                {% elif data.simulator_dimension == '3D'-%}
                "y span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                "z min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "z max": {{ data.device_vertical_maximum_um * 1e-6 }}
                {%- endif %}
            }
        },
        "design_mesh": {
            "name": "design_mesh",
            "obj_type": "mesh",
            "dev_id": 0,
            "properties": {
                "x": 0,
                "x span": {{ data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y min": {{ (data.device_vertical_minimum_um - 0.5) * 1e-6 }},
                "y max": {{ (data.device_vertical_maximum_um + 0.5) * 1e-6 }},
                "z span": {{ 3 * data.mesh_spacing_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y": 0,
                "y span": {{ data.fdtd_region_size_lateral_um * 1e-6 }},
                "z min": {{ (data.device_vertical_minimum_um - 0.5) * 1e-6 }},
                "z max": {{ (data.device_vertical_maximum_um + 0.5) * 1e-6 }},
                {%- endif %}
                "dx": {{ data.mesh_spacing_um * 1e-6 }},
                "dy": {{ data.mesh_spacing_um * 1e-6 }},
                "dz": {{ data.mesh_spacing_um * 1e-6 }}
            }
        },
        "design_index_monitor": {
            "name": "design_index_monitor",
            "obj_type": "index",
            "dev_id": 0,
            "properties": {
                "x span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "2D Z-Normal",
                "y min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "y max": {{ data.device_vertical_maximum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "3D",
                "y span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                "z min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "z max": {{ data.device_vertical_maximum_um * 1e-6 }},
                {%- endif %}
                "spatial interpolation": "nearest mesh cell"
            }
        },
        "design_efield_monitor": {
            "name": "design_efield_monitor",
            "obj_type": "profile",
            "dev_id": 0,
            "properties": {
                "x span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "2D Z-Normal",
                "y min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "y max": {{ data.device_vertical_maximum_um * 1e-6 }},
                "z span": {{ 3 * data.mesh_spacing_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "3D",
                "y span": {{ data.device_size_lateral_bordered_um * 1e-6 }},
                "z min": {{ data.device_vertical_minimum_um * 1e-6 }},
                "z max": {{ data.device_vertical_maximum_um * 1e-6 }},
                {%- endif %}
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }},
                "output Hx": 0,
                "output Hy": 0,
                "output Hz": 0
            }
        }
    },

    "eval_objects": {               {# Will update the dictionary that is generated from the "objects" key above. #}
        
        {# Monitor right below source to measure overall transmission / reflection #}
        "src_transmission_monitor": {
            "name": "src_transmission_monitor",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": 0,
                "y span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }},
                "z": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},         {#! Shouldn't this be right below the source? #}
                {%- endif %}
                "x": 0,
                "x span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },

        {# Monitor at top of device across FDTD region to measure source power that misses the device #}
        "src_spill_monitor": {
            "name": "src_spill_monitor",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": 0,
                "y span": {{ data.eval_fdtd_region_size_lateral_um*1.1 * 1e-6 }},
                "z": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                {%- endif %}
                "x": 0,
                "x span": {{ data.eval_fdtd_region_size_lateral_um*1.1 * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },

        {# Monitor right above device to measure input power #}
        "incident_aperture_monitor": {
            "name": "incident_aperture_monitor",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": 0,
                {# "y span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }}, #}
                "y span": {{ data.eval_monitorbox_size_lateral_um * 1e-6 }},
                "z": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                {%- endif %}
                "x": 0,
                {# "x span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }}, #}
                "x span": {{ data.eval_monitorbox_size_lateral_um * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },

        {# Monitor right below device to measure exit aperture power #}
        "exit_aperture_monitor": {
            "name": "exit_aperture_monitor",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear X",
                "y": {{ data.eval_monitorbox_vertical_minimum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "2D Z-normal",
                "y": 0,
                {# "y span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }}, #}
                "y span": {{ data.eval_monitorbox_size_lateral_um * 1e-6 }},
                "z": {{ data.eval_monitorbox_vertical_minimum_um * 1e-6 }},
                {%- endif %}
                "x": 0,
                {# "x span": {{ data.eval_monitorbox_size_lateral_um*1.1 * 1e-6 }}, #}
                "x span": {{ data.eval_monitorbox_size_lateral_um * 1e-6 }},
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },

        {% set sm_x_pos = [data.eval_monitorbox_size_lateral_um/2, 0, -data.eval_monitorbox_size_lateral_um/2, 0] %}
        {% set sm_y_pos = [0, data.eval_monitorbox_size_lateral_um/2, 0, -data.eval_monitorbox_size_lateral_um/2] %}
        {% set sm_xspan_pos = [0, data.eval_monitorbox_size_lateral_um, 0, data.eval_monitorbox_size_lateral_um] %}
        {% set sm_yspan_pos = [data.eval_monitorbox_size_lateral_um, 0, data.eval_monitorbox_size_lateral_um, 0] %}
        {% set sm_monitor_types = ['2D X-normal', '2D Y-normal', '2D X-normal', '2D Y-normal']%}
        {% set sm_indices = range(0,2) if data.simulator_dimension == '2D' else range(0,4)%}

        {# Sidewall monitors closing off the monitor box around the splitter cube device, to measure side scattering #}
        {%- for sm_idx in sm_indices -%}
        {%- set name = "side_monitor_%d" | format(sm_idx) %}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "power",
            "properties": {
                {% if data.simulator_dimension == '2D'-%}
                "monitor type": "Linear Y",
                "x": {{ sm_x_pos[2*sm_idx] * 1e-6 }},   {# match [0,1] to [0,1,2,3]: 0->0, 1->2 #}
                "y max": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                "y min": {{ data.eval_monitorbox_vertical_minimum_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "monitor type": "{{sm_monitor_types[sm_idx]}}",
                "x max": {{ (sm_x_pos[sm_idx] + sm_xspan_pos[sm_idx]/2) * 1e-6 }},
                "x min": {{ (sm_x_pos[sm_idx] - sm_xspan_pos[sm_idx]/2) * 1e-6 }},
                "y max": {{ (sm_y_pos[sm_idx] + sm_yspan_pos[sm_idx]/2) * 1e-6 }},
                "y min": {{ (sm_y_pos[sm_idx] - sm_yspan_pos[sm_idx]/2) * 1e-6 }},
                "z max": {{ data.eval_monitorbox_vertical_maximum_um * 1e-6 }},
                "z min": {{ data.eval_monitorbox_vertical_minimum_um * 1e-6 }},
                {%- endif %}
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },
        {%- endfor %}

        {% set sm_to_vsm_factor = data.device_size_lateral_um/data.eval_monitorbox_size_lateral_um %}

        {# Side monitors enclosing the space between the device's exit aperture and the focal plane.
        # Purpose is to capture the sum power of oblique scattering. #}
        {%- for sm_idx in sm_indices -%}
        {%- set name = "vertical_scatter_monitor_%d" | format(sm_idx) %}
        "{{ name }}": {
            "name": "{{ name }}",
            "obj_type": "power",
            "properties": {
            {% if data.simulator_dimension == '2D'-%}
            "monitor type": "Linear Y",
            "x": {{ sm_x_pos[2*sm_idx] * sm_to_vsm_factor * 1e-6 }}, {# match [0,1] to [0,1,2,3]: 0->0, 1->2 #}
            "y max": {{ data.device_vertical_minimum_um * 1e-6 }},
            "y min": {{ data.adjoint_vertical_um * 1e-6 }},
            {% elif data.simulator_dimension == '3D'-%}
            "monitor type": "{{sm_monitor_types[sm_idx]}}",
            "x max": {{ (sm_x_pos[sm_idx] + sm_xspan_pos[sm_idx]/2) * sm_to_vsm_factor * 1e-6 }},
            "x min": {{ (sm_x_pos[sm_idx] - sm_xspan_pos[sm_idx]/2) * sm_to_vsm_factor * 1e-6 }},
            "y max": {{ (sm_y_pos[sm_idx] + sm_yspan_pos[sm_idx]/2) * sm_to_vsm_factor * 1e-6 }},
            "y min": {{ (sm_y_pos[sm_idx] - sm_yspan_pos[sm_idx]/2) * sm_to_vsm_factor * 1e-6 }},
            "z max": {{ data.device_vertical_minimum_um * 1e-6 }},
            "z min": {{ data.adjoint_vertical_um * 1e-6 }},
            {%- endif %}
            "override global monitor settings": 1,
            "use wavelength spacing": 1,
            "use source limits": 1,
            "frequency points": {{ data.num_design_frequency_points }}
            }
        },
        {%- endfor %}


        {% set scatter_plane_width_factor = 2 if data.eval_boundary_conditions == 'periodic_plane' else 6 %}
        
        {# Monitor at focal plane, larger than device size, to measure exit aperture power
        that scatters outside of detector area #}
        "scatter_plane_monitor": {
            "name": "scatter_plane_monitor",
            "obj_type": "power",
            {# # Need to consider: if the scatter plane monitor only includes one quadrant from the adjacent corner
            focal-plane-quadrants,
            # the average power captured by the scatter plane monitor is only 83% of the power coming from the exit aperture.
            # It will also miss anything that falls outside of the boundary which is very probable.
            # At the same time the time to run FDTD sim will also go up by a factor squared. #}
            "properties": {
            {% if data.simulator_dimension == '2D'-%}
            "monitor type": "Linear X",
            "y": {{ data.eval_monitorbox_vertical_minimum_um * 1e-6 }},
            {% elif data.simulator_dimension == '3D'-%}
            "monitor type": "2D Z-normal",
            "y": 0,
            "y span": {{ (data.device_size_lateral_um/2*scatter_plane_width_factor) * 1e-6 }},
            "z": {{ data.adjoint_vertical_um * 1e-6 }},
            {%- endif %}
            "x": 0,
            "x span": {{ (data.device_size_lateral_um/2*scatter_plane_width_factor) * 1e-6 }},
            "override global monitor settings": 1,
            "use wavelength spacing": 1,
            "use source limits": 1,
            "frequency points": {{ data.num_design_frequency_points }}
            }
        },

        {% set dxm_pos = [-data.device_size_lateral_um/4, 0, data.device_size_lateral_um/4] %}
        {# # Device cross-section monitors that take the field inside the device, and extend all the way down to the focal plane.
        We have 6 slices, 2 sets of 3 for both x and y.
        # Each direction-set has slices at x(y) = -device_size_lateral_um/4, 0, +device_size_lateral_um/4, i.e. intersecting
        where the focal spot is supposed to be.
        # We also take care to output plots for both E_norm and Re(E), the latter of which captures the wave-like behaviour much
        more accurately. #}

        {%- for xy_idx in ['x','y'] -%}
            {%- for xmon_idx in range(0,3) -%}
            {%- set xmon_name = "device_cross_monitor_src_" + xy_idx|string + "_" + xmon_idx|string %}
        "{{ xmon_name }}": {
                "name": "{{ xmon_name }}",
                "obj_type": "power",
                "properties": {
                {% if xy_idx == 'x' %}
                    {% if data.simulator_dimension == '2D' %}
                    "monitor type": "Linear Y",
                    {% elif data.simulator_dimension == '3D' %}
                    "monitor type": "2D Y-normal",
                    {% endif %}
                    "x": {{ dxm_pos[xmon_idx] * 1e-6 }},
                    "y max": {{ data.device_vertical_maximum_um * 1e-6 }},
                    "y min": {{ data.adjoint_vertical_um * 1e-6 }},

                {% elif xy_idx == 'y' %}
                    {% if data.simulator_dimension == '2D' %}
                    "monitor type": "Linear X",
                    "y": {{ ((device_hgt/data.device_size_lateral_um)*dxm_pos[xmon_idx] + 
                                device_center_vertical ) * 1e-6 }},
                    {% elif data.simulator_dimension == '3D' %}
                    "monitor type": "2D X-normal",
                    "y": {{ dxm_pos[xmon_idx] * 1e-6 }},
                    {% endif %}
                    "x max": {{ -data.device_size_lateral_um/2 * 1e-6 }},
                    "x min": {{ data.device_size_lateral_um/2 * 1e-6 }},
                {% endif %}
                
                {% if data.simulator_dimension == '3D' %}
                    "z max": {{ data.device_vertical_maximum_um * 1e-6 }},
                    "z min": {{ data.adjoint_vertical_um * 1e-6 }},
                {%- endif %}
                "override global monitor settings": 1,
                "use wavelength spacing": 1,
                "use source limits": 1,
                "frequency points": {{ data.num_design_frequency_points }}
            }
        },
            {%- endfor -%}
        {%- endfor %}
        
        {#- Forward Sources -#}
        {%- for i in range(0, 2) -%}
        {%- set fwrd_name = "forward_src_" + data.xy_names[i] %}
        "{{ fwrd_name }}": {
            "name": "{{ fwrd_name}}",
            {% if data.eval_source == 'gaussian' -%}
            {# Add a Gaussian wave forward source at angled incidence #}
            "obj_type": "gaussian",
            "properties": {
                "x span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "injection axis": "y-axis",
                "y": {{ data.src_maximum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "injection axis": "z-axis",
                "y span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                "z": {{ data.src_maximum_vertical_um * 1e-6 }},
                {%- endif %}
                "direction": "Backward",
                {%- set shift_x_center = ((data.device_vertical_maximum_um - data.src_maximum_vertical_um) | abs) *
                (data.source_angle_theta_rad | tan) %}
                "x": {{ shift_x_center * 1e-6 }},
                "wavelength start": {{ data.eval_lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.eval_lambda_max_um * 1e-6 }},
                "waist radius w0": {{ data.gaussian_waist_radius_um * 1e-6 }},
                "distance from waist": {{ (data.device_vertical_maximum_um - data.src_maximum_vertical_um) * 1e-6 }},
                "angle theta": {{ data.source_angle_theta_deg }},
                "angle phi": {{ data.source_angle_phi_deg }},
                "polarization angle": {{ data.xy_phi_rotations[i] }}
            }
            {%- elif data.eval_source == 'tfsf' -%}
            "obj_type": "tfsf",
            {# Add a TFSF plane wave forward source at normal incidence #}
            "properties": {
                "angle theta": {{ data.source_angle_theta_deg }},
                "angle phi": {{ data.source_angle_phi_deg }},
                "polarization angle": {{ data.xy_phi_rotations[i] }},
                "direction": "Backward",
                "x span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y max": {{ data.src_maximum_vertical_um * 1e-6 }},
                "y min": {{ data.src_minimum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                "z max": {{ data.src_maximum_vertical_um * 1e-6 }},
                "z min": {{ data.src_minimum_vertical_um * 1e-6 }},
                {%- endif %}
                "wavelength start": {{ data.eval_lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.eval_lambda_max_um * 1e-6 }}
            }
            {%- elif data.eval_source == 'periodic_plane' -%}
            "obj_type": "plane",
            {# Add a Plane wave forward source at normal incidence #}
            "properties": {
                "x span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "injection axis": "y-axis",
                "y": {{ data.src_maximum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "injection axis": "z-axis",
                "y span": {{ 2 * data.fdtd_region_size_lateral_um * 1e-6 }},
                "z": {{ data.src_maximum_vertical_um * 1e-6 }},
                {%- endif %}
                "direction": "Backward",
                {# {%- set shift_x_center = ((data.device_vertical_maximum_um - data.src_maximum_vertical_um) | abs) *
                (data.source_angle_theta_rad | tan) %}
                "x": {{ shift_x_center * 1e-6 }}, #}
                "source shape": "Plane wave",
                {# "plane wave type": "BFAST", #}
                "plane wave type": "Bloch/periodic",
                "wavelength start": {{ data.eval_lambda_min_um * 1e-6 }},
                "wavelength stop": {{ data.eval_lambda_max_um * 1e-6 }},
                "angle theta": {{ data.source_angle_theta_deg }},
                "angle phi": {{ data.source_angle_phi_deg }},
                "polarization angle": {{ data.xy_phi_rotations[i] }}
            }
            {%- endif %}
        },
        {%- endfor -%}

        {# TODO: # Duplicate devices and set in an array #}
        {# # Set the central positions of each device in the array. #}
        {# # Copy the central design around in an array defined by device_array_shape. #}
        {# # Duplicate sidewalls AND sidewall meshes. #}

        {# Adjust lateral region size of FDTD region #}
        "FDTD": {
            "name": "FDTD",
            "obj_type": "fdtd",
            "properties": {
                "dimension": "{{ data.simulator_dimension }}",
                "x span": {{ data.eval_fdtd_region_size_lateral_um * 1e-6 }},
                {% if data.simulator_dimension == '2D'-%}
                "y max": {{ data.fdtd_region_maximum_vertical_um * 1e-6 }},
                "y min": {{ data.fdtd_region_minimum_vertical_um * 1e-6 }},
                {% elif data.simulator_dimension == '3D'-%}
                "y span": {{data.eval_fdtd_region_size_lateral_um * 1e-6 }},
                "z max": {{ data.fdtd_region_maximum_vertical_um * 1e-6 }},
                "z min": {{ data.fdtd_region_minimum_vertical_um * 1e-6 }},
                "simulation time": {{ data.fdtd_simulation_time_fs * 1e-15 }},
                {%- endif %}
                {% if data.eval_boundary_conditions == 'periodic' -%}
                "x min bc": "Periodic",
                "y min bc": "Periodic",
                {%- endif %}
                "index": {{ data.background_index }}
            }
        }
    }
}