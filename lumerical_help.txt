Python Library Documentation: class Lumerical

class Lumerical(builtins.object)
 |  Lumerical(product, filename, key, hide, serverArgs, remoteArgs, **kwargs)
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, type, value, traceback)
 |  
 |  __extractKeepCADOpenedArgument__(self, serverArgs)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, product, filename, key, hide, serverArgs, remoteArgs, **kwargs)
 |      Keyword Arguments:
 |      script: A single string containing a script filename, or a collection of strings
 |              that are filenames. Preffered types are list and tuple, dicts are not
 |              supported. These scripts will run after the project specified by the
 |              project keyword is opened. If no project is specified, they will run
 |              in a new blank project.
 |      
 |      project: A single string containing a project filename. This project will be
 |               opened before any scripts specified by the script keyword are run.
 |  
 |  __open__(self, iapi, product, key=None, hide=False, serverArgs={}, remoteArgs={})
 |  
 |  abs(self, *args)
 |      Returns the absolute value of a number or matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.abs(x)                       | Returns the absolute value of x.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      real(), imag()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_abs.html
 |  
 |  acos(self, *args)
 |      Calculates the inverse trigonometric cosine function (arccosine). Angle
 |      units are in radians. The function is defined for complex values. Phase
 |      of a complex number is evaluated between -pi and pi. If x is complex, or
 |      abs(x) > 1, the following equation is used:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.acos(x)                      | Returns the complex arccosine of x.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cos()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_acos.html
 |  
 |  add2dpoly(self, *args, **kwargs)
 |      Adds a 2D polygon in the simulation space.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.add2dpoly()                        | Adds a 2D polygon in simulation      |
 |      |                                      | space.                               |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      add2drect()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_add2dpoly.html
 |  
 |  add2drect(self, *args, **kwargs)
 |      Adds a 2D rectangle in the simulation space.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.add2drect()                        | Adds a 2D rectangle in simulation    |
 |      |                                      | space.                               |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), add2dpoly()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_add2drect.html
 |  
 |  add2visualizer(self, *args)
 |      Adds data to an existing visualizer.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.add2visualizer( dataset,           | This command adds data to an         |
 |      | visualizer number )                  | existing visualizer. If there is no  |
 |      |                                      | visualizer corresponding to the      |
 |      |                                      | visualizer number, then the command  |
 |      |                                      | is ignored.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      exportfigure(), image(), plot(), setplot(), closeall(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_add2visualizer.html
 |  
 |  addanalysisgroup(self, *args, **kwargs)
 |      Adds an analysis group to the simulation environment.  Analysis groups
 |      are container objects that can contain any simulation object and
 |      associated script functions which can be used to create customize data
 |      analysis.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addanalysisgroup()                 | Adds an analysis group to the        |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+
 |      +----+
 |      
 |      See Also
 |      
 |      addtogroup(), adduserprop(), runanalysis(), getresult(), addobject()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addanalysisgroup.html
 |  
 |  addanalysisprop(self, *args, **kwargs)
 |      Adds a user defined custom analysis property to the setup user defined
 |      in structure and analysis groups.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addanalysisprop("property name",   | Adds a analysis property to a        |
 |      | type, value)                         | selected object group. The name is   |
 |      |                                      | set to "property name". The type is  |
 |      |                                      | an integer from 0 to 5. The          |
 |      |                                      | corresponding variable types are     |
 |      |                                      |                                      |
 |      |                                      | +-------------+-------------+------- |
 |      |                                      | ------+-------------+-------------+- |
 |      |                                      | ------------+                        |
 |      |                                      | | 0           | 1           | 2      |
 |      |                                      |       | 3           | 4           |  |
 |      |                                      | 5           |                        |
 |      |                                      | +-------------+-------------+------- |
 |      |                                      | ------+-------------+-------------+- |
 |      |                                      | ------------+                        |
 |      |                                      | | number      | text        | length |
 |      |                                      |       | time        | frequency   |  |
 |      |                                      | material    |                        |
 |      |                                      | +-------------+-------------+------- |
 |      |                                      | ------+-------------+-------------+- |
 |      |                                      | ------------+                        |
 |      |                                      |                                      |
 |      |                                      | The value of the user property is    |
 |      |                                      | set to value.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addstructuregroup(), runsetup(), addanalysisgroup(), addanalysisresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addanalysisprop.html
 |  
 |  addanalysisresult(self, *args, **kwargs)
 |      Adds a new result to an analysis group object.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addanalysisresult("A")             | Adds a new result called "A" to an   |
 |      |                                      | analysis group.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addstructuregroup(), runsetup(), addanalysisgroup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addanalysisresult.html
 |  
 |  addattribute(self, *args)
 |      Adds an attribute to an existing dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | R.o.addattribute("a\_name", a)       | Adds the scalar attribute a to the   |
 |      |                                      | dataset R.                           |
 |      |                                      |                                      |
 |      |                                      | See Dataset introduction for details |
 |      |                                      | about the required dimensions of     |
 |      |                                      | attribute data.                      |
 |      +--------------------------------------+--------------------------------------+
 |      | R.o.addattribute("a\_vector", a\_1,  | Adds the vector attribute a\_vector  |
 |      | a\_2, a\_3)                          | to the existing dataset R. The       |
 |      |                                      | components of the vector are a\_1,   |
 |      |                                      | a\_2 and a\_3.                       |
 |      |                                      |                                      |
 |      |                                      | See Dataset introduction for details |
 |      |                                      | about the required dimensions of     |
 |      |                                      | attribute data.                      |
 |      +--------------------------------------+--------------------------------------+
 |      | R.o.addattribute("a\_name", [data],  | Adds the attribute "a\_name" to the  |
 |      | "type")                              | unstructured dataset R. [data] can   |
 |      |                                      | be in one of the forms below:        |
 |      |                                      |                                      |
 |      |                                      | vertex\_scalar\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...1]              |
 |      |                                      |                                      |
 |      |                                      | vertex\_vector\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...3]              |
 |      |                                      |                                      |
 |      |                                      | cell\_scalar\_attribute[ncells; 1]   |
 |      |                                      |                                      |
 |      |                                      | cell\_vector\_attribute[ncells; 3]   |
 |      |                                      |                                      |
 |      |                                      | (npts is the number of vertices, the |
 |      |                                      | length of geometric parameters 'x',  |
 |      |                                      | 'y', 'z'                             |
 |      |                                      |                                      |
 |      |                                      | cells is the number of elements,     |
 |      |                                      | equal to number of rows of geometry  |
 |      |                                      | parameter 'elements' )               |
 |      |                                      |                                      |
 |      |                                      | The "type" argument is an optional   |
 |      |                                      | string to specify attribute type and |
 |      |                                      | can take values of "vertex" or       |
 |      |                                      | "cell". If not provided, the         |
 |      |                                      | function will guess the attribute    |
 |      |                                      | type based on the shape of [data]    |
 |      |                                      | argument.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), addattribute(), addparameter(), visualize(),
 |      getparameter(), getattribute(), matrixdataset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addattribute.html
 |  
 |  addcircle(self, *args, **kwargs)
 |      Adds a circle primitive to the simulation environment.  Circles denote
 |      physical objects which appear circular or ellipsoid from above.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addcircle()                        | Adds a circle primitive to the       |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addcircle.html
 |  
 |  addcustom(self, *args, **kwargs)
 |      Adds a custom primitive to the simulation environment.  Custom
 |      primitives are objects that are defined by equations describing the
 |      boundaries of the physical object.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addcustom()                        | Adds a custom primitive to the       |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addcustom.html
 |  
 |  adddipole(self, *args, **kwargs)
 |      Adds a dipole source to the simulation environment.  In MODE Solutions
 |      the command requires an active varFDTD solver region in the objects
 |      tree.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.adddipole()                        | Adds a dipole source to the          |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addplane(), addgaussian(), addtfsf()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_adddipole.html
 |  
 |  addfdtd(self, *args, **kwargs)
 |      Adds an FDTD solver region to the simulation environment.  The extent of
 |      the solver region determines the simulated volume/area in FDTD
 |      Solutions.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addfdtd()                          | Adds an FDTD solver region to the    |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), run()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addfdtd.html
 |  
 |  addgaussian(self, *args, **kwargs)
 |      Adds a Gaussian source to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addgaussian()                      | Adds a Gaussian source to the        |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addplane(), addtfsf()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addgaussian.html
 |  
 |  addgridattribute(self, *args, **kwargs)
 |      Adds a grid attribute object to the simulation environment. See the
 |      Reference Guide Attributes page for more information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addgridattribute("type")           | Adds a grid attribute object to the  |
 |      |                                      | simulation.                          |
 |      |                                      |                                      |
 |      |                                      | •type: Type of attribute to add.     |
 |      |                                      | Options are "lc orientation",        |
 |      |                                      | "permittivity rotation", "matrix     |
 |      |                                      | transform", "np density", or         |
 |      |                                      | "temperature".                       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addgridattribute("type",dataset)   | Adds a grid attribute with spatially |
 |      |                                      | varying data.                        |
 |      |                                      |                                      |
 |      |                                      | •type: Type of attribute to add.     |
 |      |                                      | Options are "lc orientation",        |
 |      |                                      | "permittivity rotation", "matrix     |
 |      |                                      | transform", "np density", or         |
 |      |                                      | "temperature".                       |
 |      |                                      |                                      |
 |      |                                      | •dataset: A dataset containing the   |
 |      |                                      | grid attribute data - see the below  |
 |      |                                      | table for details.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Data           | Simulation     | Dataset type   | Name for       | Name for       |
 |      |                | object         |                | variables      | variables      |
 |      |                |                |                | defining       | defining       |
 |      |                |                |                | coordinate     | actual data    |
 |      |                |                |                | data           |                |
 |      +================+================+================+================+================+
 |      | Liquid crystal | 'lc            | Rectilinear    | x, y, z        | u              |
 |      | orientation (3 | orientation'   |                |                |                |
 |      | element unit   | grid attribute |                |                |                |
 |      | vector)        |                |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Rotation       | 'permittivity  | Rectilinear    | x, y, z        | theta, phi,    |
 |      | angles in      | rotation' grid |                |                | psi            |
 |      | radians        | attribute      |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Unitary        | 'matrix        | Rectilinear    | x, y, z        | U              |
 |      | transform      | transform'     |                |                |                |
 |      | matrix (3x3    | grid attribute |                |                |                |
 |      | tensor)        |                |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Charge density | 'np density'   | Unstructured   | x, y, z,       | n, p           |
 |      |                | grid attribute |                | elements (see  |                |
 |      |                |                |                | Dataset        |                |
 |      |                |                |                | builder for    |                |
 |      |                |                |                | more           |                |
 |      |                |                |                | information)   |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Temperature in | 'temperature'  | Unstructured   | x, y, z,       | N              |
 |      | Kelvin         | grid attribute |                | elements (see  |                |
 |      |                |                |                | Dataset        |                |
 |      |                |                |                | builder for    |                |
 |      |                |                |                | more           |                |
 |      |                |                |                | information)   |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      importdataset(), cleardataset(), unstructureddataset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addgridattribute.html
 |  
 |  addgroup(self, *args, **kwargs)
 |      Adds a container group to the simulation environment.  Container groups
 |      can be used to put multiple structures, monitors, and/or sources
 |      together in a single group in the objects tree.  In DEVICE container
 |      groups are always children of the solver regions and cannot contain any
 |      structure.  If multiple solver regions are present in the DEVICE objects
 |      tree then this command will add a container group to the solver region
 |      that is currently selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addgroup()                         | Adds a container group to the        |
 |      |                                      | simulation environment.  In DEVICE   |
 |      |                                      | it will add a container group to the |
 |      |                                      | solver region that is currently      |
 |      |                                      | selected.                            |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addtogroup(), addstructuregroup(), addanalysisgroup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addgroup.html
 |  
 |  addimport(self, *args, **kwargs)
 |      Adds an import primitive to the simulation environment.  The import
 |      primitive can be used to create a 3D geometry by importing a surface, an
 |      image, or binary data.  It can also be used to create an n,k material.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addimport()                        | Adds an import primitive to the      |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      importsurface(), importsurface2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addimport.html
 |  
 |  addimportedsource(self, *args, **kwargs)
 |      Adds an imported source to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addimportedsource()                | Adds an imported source to the       |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      asapimport(), asapload(), asapexport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addimportedsource.html
 |  
 |  addindex(self, *args, **kwargs)
 |      Adds an index monitor to the simulation environment.  In MODE Solutions
 |      an active varFDTD region needs to be present for this command to work.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addindex()                         | Adds an index monitor to the         |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addfdtd(), addvarfdtd(), getresult(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addindex.html
 |  
 |  addjob(self, *args)
 |      Adds a simulation file to the job manager queue.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addjob(filename,"solver")          | Add the simulation file "filename"   |
 |      |                                      | to the job manager queue. The        |
 |      |                                      | "solver" argument is used to select  |
 |      |                                      | the solver to add the job to and is  |
 |      |                                      | optional if only one solver exists   |
 |      |                                      | (or is active) in the simulation     |
 |      |                                      | environment. The "solver" argument   |
 |      |                                      | is not supported by INTERCONNECT.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      run(), runsweep(), runjobs(), clearjobs(), listjobs(), currentfilename()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addjob.html
 |  
 |  addlayer(self, *args, **kwargs)
 |      Adds a layer to the layer builder object. The command only works if
 |      there is a layer builder object and is selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addlayer()                         | Adds a layer to the selected layer   |
 |      |                                      | builder object.  The name of the     |
 |      |                                      | layer is set to "default name".      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addlayer("name")                   | Adds a layer named "name"            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),
 |      getcelllist(), getlayerlist(), setlayer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addlayer.html
 |  
 |  addlayerbuilder(self, *args, **kwargs)
 |      Adds a layer builder object to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addlayerbuilder()                  | Adds a layer builder object to the   |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayer(), getlayerlist(), setlayer(), loadgdsfile(), getcelllist(),
 |      getlayerlist(), setlayer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addlayerbuilder.html
 |  
 |  addmaterial(self, *args)
 |      Adds a new material to the material database given the material model or
 |      type and returns the name of the new material. For details on available
 |      material models see: Material permittivity models and Material
 |      conductivity models.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.addmaterial()                | Lists all available material models  |
 |      |                                      | that can be added into the material  |
 |      |                                      | database.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.addmaterial("materialtype")  | Adds a new material and returns the  |
 |      |                                      | name of the new material. The        |
 |      |                                      | argument "materialtype" has to match |
 |      |                                      | correct string exactly.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      deletematerial(), copymaterial(), setmaterial(), getmaterial()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addmaterial.html
 |  
 |  addmesh(self, *args, **kwargs)
 |      Adds a mesh override region to the simulation environment.  The mesh
 |      override region can be used to control the size of the mesh in a certain
 |      region.  In DEVICE, a CHARGE solver region must be present in the
 |      objects tree for this command to work.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addmesh()                          | Adds a mesh override region to the   |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | In DEVICE, this command adds an      |
 |      |                                      | electrical mesh which applies only   |
 |      |                                      | to the 'CHARGE' solver.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addmesh.html
 |  
 |  addmode(self, *args, **kwargs)
 |      Adds a mode source to the simulation environment for FDTD Solutions.
 |       For MODE Solutions, adds an eigenmode (FDE) solver region to the
 |      simulation environment.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: The 'addmode' command is deprecated in MODE Solutions and will be  |
 |      | removed in future releases. Please refer to addfde as a replacement.     |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addmode()                          | For FDTD Solutions:                  |
 |      |                                      |                                      |
 |      |                                      | Add a mode source to the simulation  |
 |      |                                      | environment.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addmode()                          | For MODE Solutions:                  |
 |      |                                      |                                      |
 |      |                                      | Add an eigenmode solver to the       |
 |      |                                      | simulation environment.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), updatesourcemode(), findmodes()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addmode.html
 |  
 |  addmodeexpansion(self, *args, **kwargs)
 |      Adds a mode expansion monitor to the simulation environment.   In MODE
 |      Solutions an active varFDTD region needs to be present for this command
 |      to work.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addmodeexpansion()                 | Adds a mode expansion monitor to the |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), setexpansion(), removeexpansion(), updatemodes(),
 |      seteigensolver(), geteigensolver()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addmodeexpansion.html
 |  
 |  addmovie(self, *args, **kwargs)
 |      Adds a movie monitor to the simulation environment.  Movie monitors
 |      capture a desired field component over the region spanned by the monitor
 |      for the duration of the simulation.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addmovie()                         | Adds a movie monitor to the          |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addmovie.html
 |  
 |  addobject(self, *args, **kwargs)
 |      Adds an object from the object library in FDTD Solutions and MODE
 |      Solutions. The command can also be used to return the names of all the
 |      available objects and analysis groups in the objects library.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addobject("script\_ID")            | Adds an object from the object       |
 |      |                                      | library.                             |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | A = o.addobject()                    | Returns names of all the objects in  |
 |      |                                      | the library and saves it in a cell   |
 |      |                                      | array named "A".                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addtogroup(), addstructuregroup(), addanalysisgroup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addobject.html
 |  
 |  addparameter(self, *args, **kwargs)
 |      Adds a parameter to an existing dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | R.o.addparameter("p\_name", p)       | Adds the parameter p to the existing |
 |      |                                      | dataset R.                           |
 |      +--------------------------------------+--------------------------------------+
 |      | R.o.addparameter("p1\_name", p1,     | Adds the interdependent parameter    |
 |      | "p2\_name", p2)                      | p1\_name, p2\_name to the R dataset. |
 |      |                                      |                                      |
 |      |                                      | The most common interdependent       |
 |      |                                      | parameter is frequency and           |
 |      |                                      | wavelength. Parameters that are not  |
 |      |                                      | interdependent must be added         |
 |      |                                      | separately.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), addattribute(), addparameter(), visualize(),
 |      getparameter(), getattribute(), matrixdataset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addparameter.html
 |  
 |  addpath(self, *args, **kwargs)
 |      Adds a directory to the path.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addpath("directory")               | Adds a directory to the path.        |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getpath(), which(), pwd(), clearpath()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addpath.html
 |  
 |  addplanarsolid(self, *args, **kwargs)
 |      Adds a planar solid primitive with the specified vertices.  Planar
 |      solids offer a very convenient option to create custom, complex 3D
 |      geometries.  You can find more information about planar solids in this
 |      page: Structures - Planar solid.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addplanarsolid()                   | Adds an empty planar solid object.   |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addplanarsolid(vtx, fct)           | Adds a planer solid object whose     |
 |      |                                      | vertices are defined by 'vtx' and    |
 |      |                                      | whose facets are defined by 'fct'    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addplc.html
 |  
 |  addplane(self, *args, **kwargs)
 |      For FDTD and MODE:
 |      ------------------
 |      
 |      Adds a plane wave source to the simulation environment.
 |      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addplane()                         | Adds a plane wave source to the      |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addplane(), addgaussian(), addtfsf()
 |      
 |      For DEVICE DGTD:
 |      ----------------
 |      
 |      Adds a plane wave source to the 'DGTD' solver in DEVICE.  A DGTD solver
 |      region must be present in the objects tree for this command to work.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addplane()                         | Adds a plane wave source to the      |
 |      |                                      | 'DGTD' solver.                       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      Example 1
 |      
 |      The following script commands will add a plane wave source to the 'DGTD'
 |      solver already present in the objects tree and print the name of all of
 |      its properties.
 |      
 |      addplane;
 |      
 |      ?set;
 |      
 |      Example 2
 |      
 |      The following script commands will add a plane wave source to the 'DGTD'
 |      solver, change its name, and set up its properties.  The script then
 |      sets the solid named "2D rectangle" as the injection surface.
 |      
 |      addplane; 
 |      
 |      set("name","plane\_wave");
 |      
 |      # set the propagation direction
 |      
 |      set("direction definition","axis");
 |      
 |      set("direction","backward");
 |      
 |      set("angle theta",30);
 |      
 |      set("angle phi",60);
 |      
 |      # set the polarization angle
 |      
 |      set("polarization angle",90);
 |      
 |      # set the injection surface
 |      
 |      set("surface type","solid");
 |      
 |      set("solid","2D rectangle");
 |      
 |      See Also
 |      
 |      adddgtdsolver()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addplane.html
 |  
 |  addpoly(self, *args, **kwargs)
 |      Adds a polygon primitive to the simulation environment.  The polygon
 |      object defines a polygon in the XY plane using a set of x, y coordinates
 |      (vertices) and then extrudes it in the Z direction to create a 3D
 |      geometry.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addpoly()                          | Adds a polygon primitive to the      |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addpoly.html
 |  
 |  addport(self, *args)
 |      Adds a port object to the ports group under the FDTD simulation region.
 |      A simulation region must be present in order to add a port. For more
 |      information about the port object see Ports. This topic addresses the
 |      addport command in FDTD Solutions - for information about the
 |      INTERCONNECT command, see addport.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addport()                          | Adds a port.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), geteigensolver(), seteigensolver(), updateportmodes(),
 |      clearportmodedata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addport2.html
 |  
 |  addpower(self, *args, **kwargs)
 |      Adds a power (field and power) monitor to the simulation environment.
 |       The 'field and power' monitor also records the electric and magnetic
 |      field in the frequency domain along with the power.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addpower()                         | Adds a power monitor to the          |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addprofile()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addpower.html
 |  
 |  addprofile(self, *args, **kwargs)
 |      Adds a frequency domain field profile monitor to the simulation
 |      environment.  Unlike the 'field and power' monitor, the 'profile'
 |      monitor does not snap to the nearest mesh cell and uses interpolation to
 |      record the data exactly where the monitor is located.  This can be
 |      useful in a few situations, but the extra interpolation required can
 |      slightly reduce the accuracy of the data. In most situations, we
 |      recommend using the 'field and power' monitor.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addprofile()                       | Adds a field profile monitor to the  |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addpower()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addprofile.html
 |  
 |  addpyramid(self, *args, **kwargs)
 |      Adds a pyramid primitive to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addpyramid()                       | Adds a pyramid primitive to the      |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addpyramid.html
 |  
 |  addrcwa(self, *args)
 |  
 |  addrcwafieldmonitor(self, *args)
 |  
 |  addrect(self, *args, **kwargs)
 |      Adds a rectangle primitive to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addrect()                          | Adds a rectangle primitive to the    |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addrect.html
 |  
 |  addresource(self, *args)
 |  
 |  addring(self, *args, **kwargs)
 |      Adds a ring primitive to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addring()                          | Adds a ring primitive to the         |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addring.html
 |  
 |  addsphere(self, *args, **kwargs)
 |      Adds a sphere primitive to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addsphere()                        | Adds a sphere primitive to the       |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addsphere.html
 |  
 |  addstack(self, *args)
 |  
 |  addstructuregroup(self, *args, **kwargs)
 |      Adds a structure group to the simulation environment.  Structure groups
 |      are very convenient when you want to parametrize your design.  You can
 |      define different parameters for the structure group and use the "setup"
 |      script to create your geometry (along with monitors and/or sources)
 |      according to those parameter values.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addstructuregroup()                | Adds a structure group to the        |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addtogroup(), adduserprop(), addgroup(), addanalysisgroup(), set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addstructuregroup.html
 |  
 |  addsurface(self, *args, **kwargs)
 |      Adds a surface primitive to the simulation environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addsurface()                       | Adds primitive to the simulation     |
 |      |                                      | environment.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addsurface.html
 |  
 |  addsweep(self, *args)
 |      Adds a parameter sweep/optimization/Monte Carlo/S-parameter sweep item
 |      as the top-most analysis item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addsweep(type)                     | adds a parameter                     |
 |      |                                      | sweep/optimization/Monte             |
 |      |                                      | Carlo/S-parameter sweep item as the  |
 |      |                                      | top-most analysis item.              |
 |      |                                      |                                      |
 |      |                                      | 'type' = 0 for sweep                 |
 |      |                                      |                                      |
 |      |                                      | 'type' = 1 for optimization          |
 |      |                                      |                                      |
 |      |                                      | 'type' = 2 for yield                 |
 |      |                                      |                                      |
 |      |                                      | 'type' = 3 for S-parameter matrix    |
 |      |                                      | sweep (in FDTD Solutions only)       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      deletesweep(), copysweep(), pastesweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addsweep.html
 |  
 |  addsweepparameter(self, *args)
 |      Adds a parameter to a parameter sweep/optimization/Monte
 |      Carlo/S-parameter sweep item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addsweepparameter("name",          | Adds a parameter to a parameter      |
 |      | "parameter")                         | sweep/optimization/Monte             |
 |      |                                      | Carlo/S-parameter sweep item.        |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "parameter" could be a string (i.e.  |
 |      |                                      | create a parameter with default      |
 |      |                                      | values. eg.                          |
 |      |                                      | ::model::rectangle::index) or a      |
 |      |                                      | struct which counld contain          |
 |      |                                      | parameter, type, start, stop, unit,  |
 |      |                                      | etc.                                 |
 |      |                                      |                                      |
 |      |                                      | Returns the parameter name.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepresult(), removesweepparameter(),
 |      removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addsweepparameter.html
 |  
 |  addsweepresult(self, *args)
 |      Adds a result to a sweep/optimization/Monte Carlo item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addsweepresult("name", "result")   | Adds a result to a                   |
 |      |                                      | sweep/optimization/Monte Carlo item. |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "result" could be a string (i.e.     |
 |      |                                      | create a result with default values) |
 |      |                                      | or a struct which could contain      |
 |      |                                      | results and operations.              |
 |      |                                      |                                      |
 |      |                                      | Returns the result name.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), removesweepparameter(),
 |      removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addsweepresult.html
 |  
 |  addtfsf(self, *args, **kwargs)
 |      Adds a Total Field Scattered Field (TFSF) source to the simulation
 |      environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addtfsf()                          | Add a total field scattered field    |
 |      |                                      | source to the simulation             |
 |      |                                      | environment.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), addplane(), addgaussian()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addtfsf.html
 |  
 |  addtime(self, *args, **kwargs)
 |      Adds a time monitor to the simulation environment.  The time monitor
 |      provides time-domain information for field components over the course of
 |      the simulation
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addtime()                          | Adds a time monitor to the           |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addtime.html
 |  
 |  addtogroup(self, *args)
 |      Adds selected objects to a group.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addtogroup("group name")           | Adds selected object(s) to a group.  |
 |      |                                      | If a group with name "group name"    |
 |      |                                      | already exists, then the objects are |
 |      |                                      | added to the existing group.         |
 |      |                                      | Otherwise, a group named "group      |
 |      |                                      | name" is created.                    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addgroup(), addstructuregroup(), addanalysisgroup(), adduserprop(),
 |      runsetup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addtogroup.html
 |  
 |  addtriangle(self, *args, **kwargs)
 |      Adds a 3 vertex, triangle shaped polygon primitive to the simulation
 |      environment.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addtriangle()                      | Adds a triangle primitive to the     |
 |      |                                      | simulation environment.              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addpoly(), set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addtriangle.html
 |  
 |  adduserprop(self, *args, **kwargs)
 |      Adds a user defined custom property to the setup user defined structure
 |      and analysis groups.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.adduserprop("property name", type, | Adds a user property to a selected   |
 |      | value)                               | structure group. The name is set to  |
 |      |                                      | "property name". The type is an      |
 |      |                                      | integer from 0 to 5. The             |
 |      |                                      | corresponding variable types are     |
 |      |                                      |                                      |
 |      |                                      | 0 number                             |
 |      |                                      |                                      |
 |      |                                      | 1 text                               |
 |      |                                      |                                      |
 |      |                                      | 2 length                             |
 |      |                                      |                                      |
 |      |                                      | 3 time                               |
 |      |                                      |                                      |
 |      |                                      | 4 frequency                          |
 |      |                                      |                                      |
 |      |                                      | 5 material                           |
 |      |                                      |                                      |
 |      |                                      | The value of the user property is    |
 |      |                                      | set to value.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addstructuregroup(), runsetup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_adduserprop.html
 |  
 |  addwaveguide(self, *args, **kwargs)
 |      Adds a waveguide object in the simulation space.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.addwaveguide()                     | Adds a waveguide in the simulation   |
 |      |                                      | space.                               |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_addwaveguide.html
 |  
 |  all(self, *args)
 |      Returns 1 if all of the specified matrix entries are nonzero and returns
 |      0 otherwise.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.all(A)                       | Will return 1 if all of the A matrix |
 |      |                                      | entries are nonzero and will return  |
 |      |                                      | 0 otherwise.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.all(A,n)                     | n is an optional parameter to        |
 |      |                                      | analyze entries in a specific        |
 |      |                                      | dimension                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      any(), almostequal()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_all.html
 |  
 |  almostequal(self, *args)
 |      Performs an almost-equal comparison. When using floating point numbers
 |      (rather than integers), two values that are meant to be equal may not be
 |      exactly equal due to rounding errors that are always present in floating
 |      point calculations. In such cases, the almostequal function can be
 |      useful.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.almostequal(A, B)            | Returns 1 if \|A - B\| is less than  |
 |      |                                      | or equal to \|A + B\|/2\*1e-15.      |
 |      |                                      | Returns 0 otherwise.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.almostequal(A, B, relative   | Returns 1 if \|A - B\| is less than  |
 |      | diff)                                | or equal to \|A + B\|/2 times        |
 |      |                                      | relative diff. Returns 0 otherwise.  |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.almostequal(A, B, relative   | Returns 1 if \|A - B\| is less than  |
 |      | diff, absolute diff)                 | or equal to \|A + B\|/2 times        |
 |      |                                      | relative diff or if \|A - B\| is     |
 |      |                                      | less than or equal to absolute diff. |
 |      |                                      | Returns 0 otherwise.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_almostequal.html
 |  
 |  amax(self, *args)
 |      Returns the maximum value in a specified dimension of a matrix. For
 |      complex numbers, only the real part is considered.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.amax(x,n)                    | The maximum value in the specified   |
 |      |                                      | dimension n of matrix x.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      min(), max(), abs(), mean(), amin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_amax.html
 |  
 |  amin(self, *args)
 |      Returns the minimum value in a specified dimension of a matrix. For
 |      complex numbers, only the real part is considered.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.amin(x,n)                    | The minimum value in the specified   |
 |      |                                      | dimension n of matrix x.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      min(), max(), abs(), mean(), amax()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_amin.html
 |  
 |  and(self, *args)
 |      Is the logical AND function. Imaginary components of x and y are
 |      ignored.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = y & x()                        | If the real part of either or both   |
 |      |                                      | of x,y are zero, then return 0.      |
 |      |                                      | Otherwise return 1.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | y o.and x()                          | Same as &.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_and2.html
 |  
 |  angle(self, *args)
 |      Returns the angle or phase of a complex number or matrix in radians.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.angle(x)                     | Returns the phase of x. The phase is |
 |      |                                      | evaluated between -pi and pi.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      real(), imag(), unwrap()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_angle.html
 |  
 |  any(self, *args)
 |      Returns 1 if any of the specified matrix entries are nonzero and returns
 |      0 otherwise.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.any(A)                       | Will return 1 if any of the A matrix |
 |      |                                      | entries are nonzero and will return  |
 |      |                                      | 0 otherwise.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.any(A,n)                     | n is an optional parameter to        |
 |      |                                      | analyze entries in a specific        |
 |      |                                      | dimension                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      all(), almostequal()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_any.html
 |  
 |  append(self, *args)
 |  
 |  asapexport(self, *args)
 |      Exports the desired monitor to a file for interfacing with BRO's ASAP.
 |      These files have the .fld extension. The monitor must be a frequency
 |      power or a frequency profile monitor.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapexport( "monitorname")         | Export data from monitorname. By     |
 |      |                                      | default, the first frequency point   |
 |      |                                      | is exported.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapexport( "monitorname", f)      | Exports the frequency point          |
 |      |                                      | specified by the index f.            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapexport( "monitorname", f,      | Exports to the specified "filename"  |
 |      | "filename")                          | without opening a file browser       |
 |      |                                      | window.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      asapload(), asapimport(), addimportedsource()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_asapexport.html
 |  
 |  asapimport(self, *args)
 |      Imports an ASAP fld file into an ASAP source. This is equivalent to
 |      editing the properties of the Import source, and clicking on the Import
 |      Source button.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapimport( "sourcename")          | Imports the fld file into the        |
 |      |                                      | sourcename source. A file browser    |
 |      |                                      | will open to select the file.        |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapimport( "sourcename",          | Specify the file to open.            |
 |      | "filename")                          |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      asapexport(), asapload(), addimportedsource(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_asapimport.html
 |  
 |  asapload(self, *args)
 |      Loads data from an fld file from BRO's ASAP. asapload creates a d-card
 |      structure called "fld\_data" which contains all the data in the file. If
 |      "fld\_data" exists, it will be called "fld\_data\_2". After loading an
 |      asapfile with asapload, you can extract any desired data., which can be
 |      
 |      •Ex, Ey, Ez, Hx, Hy, Hz, x, y, z
 |      
 |      •power, frequency, wavelength, index
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapload()                         | Select the file to load with the     |
 |      |                                      | file browser.                        |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.asapload( "filename")              | Loads data from an fld file called   |
 |      |                                      | "filename" without a file browser.   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      asapexport(), asapimport(), addimportedsource(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_asapload.html
 |  
 |  asin(self, *args)
 |      Calculates the inverse trigonometric sine function (arcsine). Angle
 |      units are in radians. The function is defined for complex values. Phase
 |      of a complex number is evaluated between -pi and pi. If x is complex, or
 |      abs(x) > 1, the following equation is used:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.asin(x)                      | Returns the complex arcsine of x.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_asin.html
 |  
 |  atan(self, *args)
 |      Calculates the inverse trigonometric tangent function (arctangent).
 |      Angle units are in radians. The function is defined for complex values.
 |      Phase of a complex number is evaluated between -pi and pi. If x is
 |      complex, or abs(x) > 1, the following equation is used:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.atan(x)                      | Returns the complex arctangent of x. |
 |      |                                      | The range of atan is -pi/2 to pi/2.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      atan2(), tan()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_atan.html
 |  
 |  atan2(self, *args)
 |      Calculates the inverse trigonometric tangent function (arctangent) of
 |      y/x, returning the angle in the correct quadrant. Angle units are in
 |      radians. The function is defined for real values only.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.atan2(y,x)                   | x,y must be real. The range of atan2 |
 |      |                                      | is -pi to pi.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      atan(), tan()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_atan2.html
 |  
 |  atp(self, *args)
 |  
 |  bar(self, *args)
 |      Plots a bar chart.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.bar(y)                       | Creates a bar plot where each bar    |
 |      |                                      | corresponds to one element in y,     |
 |      |                                      | which must be a 1D array. The figure |
 |      |                                      | number is returned.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.bar(x,y)                           | x is a nx1 matrix.                   |
 |      |                                      |                                      |
 |      |                                      | y is a nxm matrix.                   |
 |      |                                      |                                      |
 |      |                                      | Creates m bar plots with n bars in   |
 |      |                                      | the same figure for the elements in  |
 |      |                                      | y at positions given by x. The       |
 |      |                                      | figure number is returned.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.bar(x,y, "x label", "y label",     | Creates a bar plot of y vs x with    |
 |      | "title")                             | axis labels and a title, returns the |
 |      |                                      | figure number. The figure number is  |
 |      |                                      | returned.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+----+
 |      +----+----+
 |      
 |      See Also
 |      
 |      histc(), plot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_bar.html
 |  
 |  besseli(self, *args)
 |      Computes the modified Bessel function of the first kind.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.besseli(nu, z)                 | "nu" is the order and "z" could be   |
 |      |                                      | an array. Both nu and z need to be   |
 |      |                                      | real.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      bessely(), besselj(), besselk()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_besseli.html
 |  
 |  besselj(self, *args)
 |      Computes the Bessel function of the first kind.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.besselj(nu, z)                 | "nu" is the order and "z" could be   |
 |      |                                      | an array. Both nu and z need to be   |
 |      |                                      | real.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      bessely(), besseli(), besselk()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_besselj.html
 |  
 |  besselk(self, *args)
 |      Computes the modified Bessel function of the second kind.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.besselk(nu, z)                 | "nu" is the order and "z" could be   |
 |      |                                      | an array. Both nu and z need to be   |
 |      |                                      | real.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      bessely(), besseli(), besselj()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_besselk.html
 |  
 |  bessely(self, *args)
 |      Computes the Bessel function of the second kind.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.bessely(nu, z)                 | "nu" is the order and "z" could be   |
 |      |                                      | an array. Both nu and z need to be   |
 |      |                                      | real.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      besselj(), besseli(), besselk()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_bessely.html
 |  
 |  buildmqwmaterial(self, *args)
 |  
 |  c(self, *args)
 |      The speed of light in a vacuum in m/s.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  cadtostreamlayer(self, *args)
 |  
 |  cd(self, *args)
 |      Changes the directory. The directory is where the file is saved by
 |      default.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cd()                               | Opens a window to browse to a        |
 |      |                                      | directory.                           |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cd("directory")                    | Changes the working directory to     |
 |      |                                      | "directory". Whenever you open an    |
 |      |                                      | fsp file or run a script file, it    |
 |      |                                      | will set the working directory to    |
 |      |                                      | the directory of the file opened.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      pwd()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cd.html
 |  
 |  ceil(self, *args)
 |      Rounds the input to the nearest integer greater than or equal to itself.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.ceil(x)                      | Returns the nearest integer greater  |
 |      |                                      | than or equal to x.                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      floor(), mod()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_ceil.html
 |  
 |  cell(self, *args)
 |      Creates a cell array variable with specified number of elements. The
 |      cell array element can be any data type, such as matrix, string, and
 |      dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | a = o.cell(n)                        | Creates a cell array with n          |
 |      |                                      | elements.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | a{n} = "string"()                    | Adds a string to the specified       |
 |      |                                      | element of the cell array.           |
 |      +--------------------------------------+--------------------------------------+
 |      | a{n} = matrix(5,5)                   | Adds a field of matrix of 5x5 to the |
 |      |                                      | specified element of the cell array. |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrixdataset(), rectilineardataset(), struct(), splitstring()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cell.html
 |  
 |  centroid(self, *args)
 |      Returns the center of mass of a polygon assuming uniform density.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.centroid(V)                  | Returns the center of mass of V,     |
 |      |                                      | assuming uniform density. The output |
 |      |                                      | is a 2x1 matrix representing the x   |
 |      |                                      | and y positions.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyarea(), polyintersect(), inpoly(), polygrow(), polyand(), polyor(),
 |      polydiff(), polyxor()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_centroid.html
 |  
 |  chebin(self, *args)
 |      Returns the Chebyshev interpolation of a sampled function. Chebyshev
 |      interpolation is useful for accurately interpolating a smooth function
 |      using a very small number of samples. The key requirement for this type
 |      of interpolation to work is that the function is sampled on the
 |      Chebyshev roots grid.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.chebin(f,x,xi,xmin,xmax)           | Interpolates the function f onto the |
 |      |                                      | xi points. It assumes that f         |
 |      |                                      | contains the samples of the function |
 |      |                                      | taken on the Chebyshev roots grid    |
 |      |                                      | specified in x; x must be            |
 |      |                                      | constructed by the call              |
 |      |                                      |                                      |
 |      |                                      | # x = chpts(xmin,xmax,NumPts),       |
 |      |                                      | otherwise an error is returned.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dcht(), chpts(), icht()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_chebin.html
 |  
 |  chebpol(self, *args)
 |      Generates the Chebyshev polynomials of the first kind. This command can
 |      be used in combination with dcht to calculate the Chebyshev
 |      interpolation. Compared to the chebin command, using chebpol for the
 |      interpolation offers additional control over the interpolation process
 |      as it allows the user to specify the polynomial order.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.chebpol(N,xi,xmin,xmax)            | This command generates a matrix      |
 |      |                                      | containing the Chebyshev polynomials |
 |      |                                      | of the first kind of orders zero to  |
 |      |                                      | N-1 evaluated at the xi points.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dcht(), chpts(), icht(), chebin(), chebpol1()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_chebpol.html
 |  
 |  chebpol1(self, *args)
 |      Returns the first derivative of the Chebyshev polynomials of the first
 |      kind.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.chebpol1(N,xi,xmin,xmax)           | This command generates a matrix      |
 |      |                                      | containing the Chebyshev polynomials |
 |      |                                      | of the first kind of orders zero to  |
 |      |                                      | N-1 evaluated at the xi points.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dcht(), chpts(), icht(), chebin(), chebpol()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_chebpol1.html
 |  
 |  checkout(self, *args)
 |      Obtains the given license feature from the license server and holds it
 |      for the duration of the application's lifetime. Any additional checkout
 |      attempts by the application for the license will not increment the
 |      license count. Closing the application is the only way to release the
 |      license back into the pool.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.checkout("licensefeature")         | Obtains the given license feature    |
 |      |                                      | from the license server and holds it |
 |      |                                      | for the duration of the              |
 |      |                                      | application's lifetime.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_checkout.html
 |  
 |  chol(self, *args)
 |      Calculates the Cholesky lower triangular factorization or decomposition.
 |      For a given matrix A, chol returns a lower triangular matrix L such that
 |      A is the matrix product of L and its conjugate transpose. The matrix A
 |      can be real or complex but it must be Hermitian and positive-definite. 
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | L = o.chol(A)                        | Returns a lower triangular matrix L  |
 |      |                                      | that satisfies the equation A =      |
 |      |                                      | mult(L,ctranspose(L))                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      mult(), ctranspose()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_chol.html
 |  
 |  chpts(self, *args)
 |      Samples function on a Chebyshev grid. Chebyshev interpolation is useful
 |      for accurately interpolating a smooth function using a very small number
 |      of samples. The key requirement for this type of interpolation to work
 |      is that the function is sampled on the Chebyshev roots grid, which can
 |      be done by using this command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x=o.chpts(xmin,xmax,NumPts,option)   | Returns Chebyshev roots grid on      |
 |      |                                      | interval between xmin and xmax that  |
 |      |                                      | can be used to sample a smooth       |
 |      |                                      | function.                            |
 |      |                                      |                                      |
 |      |                                      | NumPts defines the number of points  |
 |      |                                      | on given interval.                   |
 |      |                                      |                                      |
 |      |                                      | Option:                              |
 |      |                                      |                                      |
 |      |                                      | If option=1 is selected, the vector  |
 |      |                                      | x will not include the endpoints     |
 |      |                                      |                                      |
 |      |                                      | If option=2 is selected, the vector  |
 |      |                                      | x will include the endpoints         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dcht(), chebin(), icht(), interp()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_chpts.html
 |  
 |  clc(self, *args)
 |  
 |  clear(self, *args)
 |      Clears all or specified stored workspace variables. This will not clear
 |      any simulation data stored in d-cards. The variables c, pi, eps0, mu0
 |      will be reset to their default values.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clear()                            | Clears all workspace variables.      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clear(var1, var2, ...)             | Clears only the workspace variables  |
 |      |                                      | with the specified names.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cleardcard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clear.html
 |  
 |  clearanalysis(self, *args)
 |      Clears analysis object results. This data is also cleared by switching
 |      from Analysis Mode to Layout Mode.
 |      
 |      Note: The analysis object results are calculated with the runanalysis
 |      command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearanalysis()                    | Clears analysis object results.      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearanalysis( "name1", "name2",   | Clears data from specific analysis   |
 |      | ...)                                 | objects.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      switchtolayout(), getdata(), runanalysis(), havedata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearanalysis.html
 |  
 |  cleardataset(self, *args)
 |      This command clears the dataset from any current 'np Density' grid
 |      attribute. This is only useful for keeping file size small.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cleardataset()                     | Clears the dataset from the selected |
 |      |                                      | grid attribute.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      importdataset(), addgridattribute()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cleardataset.html
 |  
 |  cleardcard(self, *args)
 |      Clears global d-cards. Only global d-cards are cleared. Local d-cards
 |      are associated with the current simulation and can only be cleared by
 |      switching from Analysis Mode to Layout Mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cleardcard()                       | Clears all the global d-cards.       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cleardcard( "name1", "name2", ...) | Clears any number of specified       |
 |      |                                      | d-cards.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      havedata(), copydcard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cleardcard.html
 |  
 |  clearexcept(self, *args)
 |  
 |  clearfunctions(self, *args)
 |  
 |  clearjobs(self, *args)
 |      Remove all jobs from the job manager queue.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearjobs("solver")                | Remove all jobs from the job queue   |
 |      |                                      | of the specified solver. If no       |
 |      |                                      | solver is specified, jobs for all    |
 |      |                                      | solvers will be removed from job     |
 |      |                                      | manager queue. No solver argument is |
 |      |                                      | needed for INTERCONNECT.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addjob(), runjobs(), listjobs()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearjobs.html
 |  
 |  clearmodedata(self, *args)
 |      Clears mode data for a mode expansion monitor in layout mode. This is
 |      mainly useful to reduce file sizes when saving.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearmodedata()                    | Clears mode data for the selected    |
 |      |                                      | mode expansion monitor.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      updatesourcemode(), asapimport(), asapload(), asapexport(),
 |      clearsourcedata(), getresult(), overlap(), expand(), seteigensolver(),
 |      geteigensolver()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearmodedata.html
 |  
 |  clearpath(self, *args)
 |      Removes all directories from the script path, except "./".
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearpath("directory")             | Remove"directory" from the script    |
 |      |                                      | path if it is there.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getpath(), which(), pwd(), addpath()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearpath.html
 |  
 |  clearportmodedata(self, *args)
 |      Clears mode data from selected FDTD port and ports in MODE Solutions'
 |      EME solver. For more information about the port object see Ports.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearportmodedata()                | Clears mode data from selected port. |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addport(), set(), geteigensolver(), seteigensolver(), updateportmodes()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearportmodedata.html
 |  
 |  clearsourcedata(self, *args)
 |      Clears source data for an imported source, or the selected mode for a
 |      mode source.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.clearsourcedata()                  | Clears source data for the selected  |
 |      |                                      | source.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      updatesourcemode(), asapimport(), asapload(), asapexport(),
 |      clearmodedata(), getresult(), overlap(), expand(), seteigensolver(),
 |      geteigensolver()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_clearsourcedata.html
 |  
 |  close(self)
 |      close will call appClose on the the object handle and destroy the session
 |  
 |  closeall(self, *args)
 |      Closes all open figure windows.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.closeall()                         | Close all open figure windows.       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), image(), exportfigure()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_closeall.html
 |  
 |  closesession(self, *args)
 |      An interoperability command that will close an active server session of
 |      a specified Lumerical product previously opened via automation API.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.closesession(s)                    | Closes an active session s           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      opensession(), putremotedata(), getremotedata(), evalremote()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_closesession.html
 |  
 |  cls(self, *args)
 |  
 |  colormatch(self, *args)
 |      Returns the X, Y and Z tristimulus values calculated for a given
 |      spectral power distribution (power per unit area per unit wavelength)
 |      and a selected set of color matching functions. The colormatch function
 |      assumes that the units of wavelength for the spectral power distribution
 |      are nanometers, for example, W/(m2 nm). The available color functions
 |      are the CIE 1931 and CIE 1964.
 |      
 |      The X, Y, Z values have dimensions of power per unit area, in the units
 |      used for the spectral power distribution. The expressions for
 |      calculating the X, Y and Z values are:
 |      
 |      where is the spectral power distribution and are the color matching
 |      functions.
 |      
 |      References:
 |      
 |      https://en.wikipedia.org/wiki/CIE\_1931\_color\_space
 |      
 |      CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.
 |      
 |      CIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220
 |      (Committee Report E-1.4.1), Bureau Central de la CIE, Paris.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | cm = o.colormatch(spec, lam,         | Returns X, Y, Z for the spectrum     |
 |      | "functions")                         | spec evaluated at the wavelength     |
 |      |                                      | values in lam (units of meters),     |
 |      |                                      | using the selected color functions.  |
 |      |                                      | If no functions are specified, the   |
 |      |                                      | "CIE 1931" set is used.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), colormatchfunction(), colormatchxy(), colormatchuv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_colormatch.html
 |  
 |  colormatchfunction(self, *args)
 |      Returns the set of color matching functions selected by the user. These
 |      functions are dimensionless. The available sets are the CIE 1931 and CIE
 |      1964.
 |      
 |      References:
 |      
 |      CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.
 |      
 |      CIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220
 |      (Committee Report E-1.4.1), Bureau Central de la CIE, Paris.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.colormatchfunction()         | Show the list of available color     |
 |      |                                      | matching functions.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | M =                                  | Get the desired set of color         |
 |      | o.colormatchfunction("functions")    | matching functions from the list of  |
 |      |                                      | available ones.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plotxy(), pinch(), colormatch(), colormatchxy(), colormatchuv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_colormatchfunction.html
 |  
 |  colormatchuv(self, *args)
 |      Returns the u' and v' chromaticity values calculated for a given
 |      spectral power distribution (power per unit area per unit wavelength)
 |      and a selected set of color matching functions. The colormatchuv
 |      function assumes that the units of wavelength for the spectral power
 |      distribution are nanometers, for example, W/(m2 nm). The available color
 |      functions are the CIE 1931 and CIE 1964.
 |      
 |      The u' and v' values are dimensionless and they are related to the X, Y
 |      and Z values by:
 |      
 |      References:
 |      
 |      https://en.wikipedia.org/wiki/CIE\_1931\_color\_space
 |      
 |      http://en.wikipedia.org/wiki/CIELUV
 |      
 |      CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.
 |      
 |      CIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220
 |      (Committee Report E-1.4.1), Bureau Central de la CIE, Paris.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | cmuv =                               | Returns u', v' for the spectrum spec |
 |      | o.colormatchuv(colormatch(spec, lam, | evaluated at the wavelength values   |
 |      | "functions"))                        | in lam (units of meters), using the  |
 |      |                                      | selected color functions. If no      |
 |      |                                      | functions are specified, the "CIE    |
 |      |                                      | 1931" set is used.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), colormatchfunction(), colormatch(), colormatchxy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_colormatchuv.html
 |  
 |  colormatchxy(self, *args)
 |      Returns the x and y chromaticity values calculated for a given spectral
 |      power distribution (power per unit area per unit wavelength) and a
 |      selected set of color matching functions. The colormatchxy function
 |      assumes that the units of wavelength for the spectral power distribution
 |      are nanometers, for example, W/(m2 nm). The available color functions
 |      are the CIE 1931 and CIE 1964.
 |      
 |      The x and y values are dimensionless and they are related to the X, Y
 |      and Z values by:
 |      
 |      References:
 |      
 |      https://en.wikipedia.org/wiki/CIE\_1931\_color\_space
 |      
 |      CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.
 |      
 |      CIE Proceedings (1964) Vienna Session, 1963, Vol. B, pp. 209-220
 |      (Committee Report E-1.4.1), Bureau Central de la CIE, Paris.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | cmxy =                               | Returns x, y for the spectrum spec   |
 |      | o.colormatchxy(colormatch(spec, lam, | evaluated at the wavelength values   |
 |      | "functions"))                        | in lam (units of meters), using the  |
 |      |                                      | selected color functions. If no      |
 |      |                                      | functions are specified, the "CIE    |
 |      |                                      | 1931" set is used.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), colormatchfunction(), colormatch(), colormatchuv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_colormatchxy.html
 |  
 |  conj(self, *args)
 |      Returns the complex conjugate of a number or matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.conj(x)                      | Returns the complex conjugate of x.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      real(), imag()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_conj.html
 |  
 |  conv2(self, *args)
 |  
 |  copy(self, *args)
 |      Creates a copy of the selected objects. The copied objects will
 |      typically be identical (same name, position, etc). For some objects that
 |      must have a unique name, '\_1' will be appended to the name.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copy()                             | Copy the selected objects.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copy(dx)                           | Same as copy; but with a specified   |
 |      |                                      | move of dx.                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copy(dx,dy)                        | Same as copy; but with a specified   |
 |      |                                      | move of dx, dy.                      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copy(dx,dy,dz)                     | Same as copy; but with a specified   |
 |      |                                      | move of dx, dy, dz.                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      move(), select(), copytoclipboard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_copy.html
 |  
 |  copydcard(self, *args)
 |      Will create a global copy of any d-card currently in memory.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copydcard( "name")                 | Will create a global copy of any     |
 |      |                                      | d-card currently in memory called    |
 |      |                                      | "name". By default, the new name     |
 |      |                                      | will be "::global\_name". For        |
 |      |                                      | example, copydcard("mode1"); sends   |
 |      |                                      | mode1 to the deck, named             |
 |      |                                      | global\_mode1.                       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copydcard( "name", "newname")      | Will create a global copy of any     |
 |      |                                      | d-card currently in memory called    |
 |      |                                      | "name". The new name will be         |
 |      |                                      | "::newname".                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      havedata(), cleardcard(), overlap(), savedcard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_copydcard.html
 |  
 |  copymaterial(self, *args)
 |      Makes a copy of a material in the material database.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.copymaterial("materialname") | Creates a copy of the material       |
 |      |                                      | "materialname". The new name is      |
 |      |                                      | returned.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmaterial(), deletematerial(), setmaterial(), getmaterial()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_copymaterial.html
 |  
 |  copyproperties(self, *args)
 |  
 |  copysweep(self, *args)
 |      Copies a sweep/optimization/Monte Carlo analysis item to clipboard.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copysweep("name")                  | Copies a sweep/optimization/Monte    |
 |      |                                      | Carlo analysis item to clipboard.    |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of a     |
 |      |                                      | sweep/optimization/Monte Carlo       |
 |      |                                      | analysis (eg.                        |
 |      |                                      | ::optimization::sweep1)              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addsweep(), deletesweep(), pastesweep(), addsweep(), insertsweep(),
 |      getsweep(), setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_copysweep.html
 |  
 |  copytoclipboard(self, *args)
 |      Copies the selected objects into the system clipboard. Equivalent to
 |      'Ctrl-C'.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.copytoclipboard()                  | Copies selected objects to the       |
 |      |                                      | system clipboard                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      pastefromclipboard(), copy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_copytoclipboard.html
 |  
 |  corrcoef(self, *args)
 |      Calculates the correlation matrix. The input can be one matrix, which
 |      contains the observations of a set of random variables, or two matrices,
 |      each one representing a vector of observations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.corrcoef(A) o.corrcoef(A, B)       | Calculate the correlation matrix.    |
 |      |                                      |                                      |
 |      |                                      | R = corrcoef(A) returns the matrix   |
 |      |                                      | of correlation coefficients for A,   |
 |      |                                      | where the columns of A represent     |
 |      |                                      | random variables and the rows        |
 |      |                                      | represent observations.              |
 |      |                                      |                                      |
 |      |                                      | R = corrcoef(A, B) returns the       |
 |      |                                      | correlation coefficients between two |
 |      |                                      | random variables A and B. If A and B |
 |      |                                      | are vectors of observations with     |
 |      |                                      | equal length, corrcoef(A, B) is the  |
 |      |                                      | 2-by-2 correlation matrix; if A and  |
 |      |                                      | B are matrices of observations,      |
 |      |                                      | corrcoef(A, B) treats A and B as     |
 |      |                                      | vectors and is equivalent to         |
 |      |                                      | corrcoef(A(1:lenght(A)),             |
 |      |                                      | B(1:length(B))). A and B must have   |
 |      |                                      | equal size.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cov(), corrtransf()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_corrcoef.html
 |  
 |  correlationplot(self, *args)
 |  
 |  corrtransf(self, *args)
 |      Calculates the transformation matrix to generate multiple sequences of
 |      correlated random variables.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.corrtransf(A)                      | Calculate the transformation matrix  |
 |      |                                      | to generate multiple sequences of    |
 |      |                                      | correlated random variables given a  |
 |      |                                      | correlation matrix A.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cov(), corrcoef()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_corrtransf.html
 |  
 |  cos(self, *args)
 |      Calculates the trigonometric cosine function. Angle units are in
 |      radians. The function is defined for complex angles. Phase of a complex
 |      number is evaluated between -pi and pi.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.cos(x)                       | Returns the complex cosine of x.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      acos()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cos.html
 |  
 |  coupling(self, *args)
 |      Returns the complex coupling coefficient between two modes. The power
 |      coupling can be calculated with the overlap function, or by the
 |      following formula.
 |      
 |      Reference: Allan W. Snyder and John D. Love, Optical Waveguide Theory.
 |      Chapman & Hall, London, England, 1983.
 |      
 |      See the overlap function for more details about overlap and coupling
 |      calculations.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: coupling command is deprecated, consider using expand              |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.coupling(mode2, mode1)       | •mode2, mode1: the mode names        |
 |      |                                      |                                      |
 |      |                                      | •out: the coupling coefficient       |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.coupling(mode2, mode1, x, y) | Mode alignment can be adjusted       |
 |      |                                      | before coupling is calculated.       |
 |      |                                      |                                      |
 |      |                                      | •x offset                            |
 |      |                                      |                                      |
 |      |                                      | •y offset                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copydcard(), findmodes(), coupling(), overlap(), bestoverlap(),
 |      propagate(), expand(), expand2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_coupling.html
 |  
 |  cov(self, *args)
 |      Calculates the covariance matrix. The input can be one matrix, which
 |      contains the observations of a set of random variables, or two matrices,
 |      each one representing a vector of observations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cov(A) o.cov(A, B)                 | Calculate the covariance matrix.     |
 |      |                                      |                                      |
 |      |                                      | C = cov(A) returns the covariance. A |
 |      |                                      | is a matrix where columns represent  |
 |      |                                      | random variables and rows represent  |
 |      |                                      | observations; C is the covariance    |
 |      |                                      | matrix with the corresponding column |
 |      |                                      | variances along the diagonal.        |
 |      |                                      |                                      |
 |      |                                      | C = cov(A, B) returns the covariance |
 |      |                                      | between two random variables A and   |
 |      |                                      | B. If A and B are vectors of         |
 |      |                                      | observations with equal length,      |
 |      |                                      | cov(A, B) is the 2-by-2 covariance   |
 |      |                                      | matrix; if A and B are matrices of   |
 |      |                                      | observations, cov(A, B) treats A and |
 |      |                                      | B as vectors and is equivalent to    |
 |      |                                      | cov(A(1:lenght(A)), B(1:length(B))). |
 |      |                                      | A and B must have equal size.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      corrcoef(), corrtransf()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cov.html
 |  
 |  cp(self, *args)
 |      Copies a file. The copy can be created in a specified path.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cp("file1","file2")                | Makes a copy of file1 called file2.  |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cp("path1\\file1","path2\\file2")  | Copies file1 in path1 to file2 in    |
 |      |                                      | path2.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      mv(), pwd()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cp.html
 |  
 |  cross(self, *args)
 |      Calculates the vector cross product of two matrices, which must have the
 |      same size. The cross product will be computed on the first dimension
 |      that has a size of 3. There must be at least one dimension with a size
 |      of 3.
 |      
 |      Assume that A,B are 2D matrices, where the second dimension contains the
 |      vector components. The size of the second dimension must be 3. Then the
 |      elements of C will be calculated with the standard cross product
 |      formulas.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | C = o.cross(A, B)                    | Returns the cross product of A and B |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dot(), length(), size()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cross.html
 |  
 |  crosscorrelation(self, *args)
 |  
 |  ctranspose(self, *args)
 |      Transposes a 1D or 2D matrix and takes the complex conjugate of each
 |      element. The resulting matrix is the conjugate transpose or Hermitian
 |      transpose.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | y = o.ctranspose(x)                  | If x is an N x M matrix, then y will |
 |      |                                      | be M x N, where the entries are      |
 |      |                                      | y(j,i)=x(i,j)\*.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      transpose()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_ctranspose.html
 |  
 |  currentfilename(self, *args)
 |      Returns the current project filename and directory.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.currentfilename()            | Returns the current filename as a    |
 |      |                                      | string.                              |
 |      |                                      |                                      |
 |      |                                      | If the current filename is not       |
 |      |                                      | defined, this function returns an    |
 |      |                                      | empty string "".                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fileexists(), getpath(), which(), pwd(), fileextension(),
 |      filebasename(), filedirectory(), currentscriptname()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_current_filename.html
 |  
 |  currentscriptname(self, *args)
 |      Returns the current script filename and directory.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.currentscriptname()          | Returns the current script filename  |
 |      |                                      | as a string.                         |
 |      |                                      |                                      |
 |      |                                      | If entered in the script prompt,     |
 |      |                                      | this function returns the string     |
 |      |                                      | "prompt".                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fileexists(), getpath(), which(), pwd(), fileextension(),
 |      filebasename(), filedirectory(), currentfilename()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_currentscriptname.html
 |  
 |  cwnorm(self, *args)
 |      Uses CW normalization. All simulation data will be normalized to the
 |      injected source power. Most users prefer to do their analysis in the CW
 |      normalization state, since it removes any effect caused by the finite
 |      pulse length of the source. It also converts the units of all
 |      electromagnetic fields to be the same as in the time domain. Note, this
 |      command works in both the Layout and Analysis mode.
 |      
 |      This function controls the checkbox located in Settings - Normalization
 |      state.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.cwnorm()                           | Use CW normalization.                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_cwnorm.html
 |  
 |  czt(self, *args)
 |      Returns the chirped z-transform of a set of data. The czt function is
 |      often more convenient than the standard fft functions because you can
 |      specify an arbitrary range of k.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.czt(Ex,t,w)                  | Returns the chirped z-transform of   |
 |      |                                      | Ex, function of t, at each desired   |
 |      |                                      | angular frequency w. Note that w     |
 |      |                                      | must be a linearly spaced set of     |
 |      |                                      | angular frequencies but can cover    |
 |      |                                      | any range. It is also possible for   |
 |      |                                      | inverse transform, ie                |
 |      |                                      | out=czt(Ex,w,t), see the             |
 |      |                                      | interpolation example below for      |
 |      |                                      | details. E can be a matrix where one |
 |      |                                      | of the two dimensions is the same as |
 |      |                                      | length. The Z-transform is computed  |
 |      |                                      | along the dimension that matches     |
 |      |                                      | length, and the output vector will   |
 |      |                                      | be a matrix where the matched        |
 |      |                                      | dimension is length(kx) and the      |
 |      |                                      | other dimension is the same as E.    |
 |      |                                      | This functionality allows to compute |
 |      |                                      | multiple 1D Z-transforms with a      |
 |      |                                      | single function call.                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.czt(Ex,x,y,kx,ky)                  | The two dimensional chirped          |
 |      |                                      | z-transform. kx and ky must be       |
 |      |                                      | linearly spaced sets of wavenumbers  |
 |      |                                      | but can cover any range.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fft(), fftw()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_czt.html
 |  
 |  dcht(self, *args)
 |      Returns the Chebyshev interpolation coefficients. The amplitude of the
 |      coefficients decreases exponentially and the last coefficient offers an
 |      estimate of the relative accuracy of the interpolation.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | coeff=o.dcht(f,option)               | Returns the Chebyshev interpolation  |
 |      |                                      | coefficients of a sampled function   |
 |      |                                      | f. The function f must be sampled on |
 |      |                                      | a Chebyshev roots grid.              |
 |      |                                      |                                      |
 |      |                                      | Option:                              |
 |      |                                      |                                      |
 |      |                                      | If option=1 is selected, the vector  |
 |      |                                      | x will not include the endpoints     |
 |      |                                      |                                      |
 |      |                                      | If option=2 is selected, the vector  |
 |      |                                      | x will include the endpoints         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      chpts(), chebin(), icht(), chebpol(), chebpol1()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_dcht.html
 |  
 |  debug(self, *args)
 |      Opens the debug utility window. This command is useful for debugging
 |      purposes. When this command is used, script will run to the line before
 |      the debug command. Then user can start to call other commands to test
 |      commands that have been run. Once the utility window is closed, the
 |      script lines will continue to run. Multiple debug commands are allowed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.debug()                            | Opens the debug utility window. This |
 |      |                                      | command can also be used in the      |
 |      |                                      | analysis script.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_debug.html
 |  
 |  delete(self, *args)
 |      Deletes selected objects.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.delete()                           | Deletes selected objects.            |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_delete.html
 |  
 |  deleteall(self, *args)
 |      Deletes all objects in the current group scope.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.deleteall()                        | Deletes all objects in the current   |
 |      |                                      | group scope.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_deleteall.html
 |  
 |  deleteattribute(self, *args)
 |  
 |  deletematerial(self, *args)
 |      Deletes a material from the material database.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.deletematerial("materialname")     | Deletes a material named             |
 |      |                                      | "materialname" from the material     |
 |      |                                      | database.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmaterial(), setmaterial(), getmaterial(), copymaterial()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_deletematerial.html
 |  
 |  deleteresource(self, *args)
 |  
 |  deletesweep(self, *args)
 |      Deletes a specified parameter sweep, optimization, or Monte Carlo
 |      analysis task.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.deletesweep("name")                | Deletes the sweep, optimization, or  |
 |      |                                      | Monte Carlo analysis task with the   |
 |      |                                      | specified name.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addsweep(), copysweep(), pastesweep(), insertsweep(), getsweep(),
 |      setsweep()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_deletesweep.html
 |  
 |  dipolepower(self, *args)
 |      Returns the power injected into the simulation region by a dipole
 |      source. In 3D simulations, the units will be in Watts if cwnorm is used,
 |      and Watts/Hertz2 if nonorm is used.
 |      
 |      The dipolepower script command returns the power that was injected into
 |      the simulation region, and is equivalent to measuring the power
 |      transmitted out of a small box surrounding the dipole. In contrast,
 |      sourcepower will return the power that the dipole would radiate in a
 |      homogeneous material. dipolepower and sourcepower are equivalent for
 |      dipoles in a homogeneous medium.
 |      
 |      Advanced notes:
 |      
 |      •If the dipole is located within a dispersive medium (with a non-zero
 |      imaginary part of the refractive index), then the results of this
 |      function are not reliable. In such situations, using a box of monitors
 |      around the dipole is recommended.
 |      
 |      •Numerical errors in this calculation may become noticeable when very
 |      small simulation mesh sizes are used. If the mesh step is the order of,
 |      or smaller than, λ/1000, verifying the dipolepower results by measuring
 |      the radiated power with a small box of monitors surrounding the dipole
 |      is recommended.
 |      
 |      Please visit the Support Center for more assistance if you are using a
 |      dipole in a dispersive medium.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.dipolepower(f)               | Returns the amount of power radiated |
 |      |                                      | by the dipole source, at frequency   |
 |      |                                      | points f. (f in Hz)                  |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.dipolepower(f, name)         | This option allows you to obtain the |
 |      |                                      | power radiated by a single dipole,   |
 |      |                                      | rather than the sum of all dipoles.  |
 |      |                                      | This option is only needed for       |
 |      |                                      | simulations with multiple dipoles.   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm(), sourcepower(), sourcepower\_avg(), sourcepower\_pavg(),
 |      transmission(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_dipolepower.html
 |  
 |  dir(self, *args)
 |      Lists files in a directory. Files other than Lumerical project files are
 |      also listed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.dir; out = ls()              | The output is a string.              |
 |      |                                      |                                      |
 |      |                                      | Use ?dir; to write the value to the  |
 |      |                                      | screen.                              |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.dir("o.directory") out =     | Lists the files in the specified     |
 |      | ls("o.directory")                    | directory. For example,              |
 |      |                                      | ?ls("C:\\Downloads");                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      load(), splitstring()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_dir.html
 |  
 |  dot(self, *args)
 |      Calculates the dot product of two matrices, which must have the same
 |      number of elements. The dot product of matrices A and B will be computed
 |      with the following formula:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | C = o.dot(A, B)                      | Returns the dot product of A and B   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cross(), length(), size()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_dot.html
 |  
 |  drivewizard(self, *args)
 |  
 |  e(self, *args)
 |      The electron volt.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  eig(self, *args)
 |      Finds the eigenvalue and/or eigenvector of a matrix. The matrix has to
 |      be square.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.eig(A) out = o.eig(A, 1)     | Returns the eigenvalues of matrix A. |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.eig(A, 2)                    | Returns the eigenvectors of matrix   |
 |      |                                      | A.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.eig(A, 3)                    | Returns both the eigenvalues and     |
 |      |                                      | eigenvectors of matrix A.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or(), mult(), permute(), reshape(), inv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_eig.html
 |  
 |  encryptprocess(self, *args)
 |  
 |  encryptscript(self, *args)
 |      Save a copy of the specified script file in an encrypted format. The new
 |      file will have a .lsfx file extension. Encrypting a script allows a
 |      script to be shared with others, without allowing them to see the
 |      contents of the script.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.encryptscript("filename.lsf")      | Encrypt a copy of the script. The    |
 |      |                                      | new file will be named               |
 |      |                                      | "filename.lsfx".                     |
 |      +--------------------------------------+--------------------------------------+
 |      | o.encryptscript("filename.lsf",      | Specify an alternate file name.      |
 |      | "new\_filename")                     |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |       
 |      ~
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_encryptscript.html
 |  
 |  endl(self, *args)
 |      Adds an end of line character to a string
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = "line1"+o.endl+"line2"()       | Add an end of line character to the  |
 |      |                                      | string.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      num2str(), write()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_endl.html
 |  
 |  eps0(self, *args)
 |      The permittivity of free space in SI units.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  erf(self, *args)
 |      Calculates the error function as defined by the following equation:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.erf(z)                         | Returns error function of z where z  |
 |      |                                      | is a scalar number or matrix of      |
 |      |                                      | scalar numbers.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      erfc(), erfinv(), erfcinv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_erf.html
 |  
 |  erfc(self, *args)
 |      Calculates the complementary error function as defined by the following
 |      equation:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.erfc(z)                        | Returns the complementary error      |
 |      |                                      | function of z where z is a scalar    |
 |      |                                      | number or matrix of scalar numbers.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      erf(), erfinv(), erfcinv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_erfc.html
 |  
 |  erfcinv(self, *args)
 |      Calculates the inverse complementary error function as defined by the
 |      following equation in relationship to the inverse error function erfinv:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.erfcinv(z)                     | Returns the inverse complementary    |
 |      |                                      | error function of z where z is a     |
 |      |                                      | scalar number or matrix of scalar    |
 |      |                                      | numbers.                             |
 |      |                                      |                                      |
 |      |                                      | For inputs outside the interval (0,  |
 |      |                                      | 2), erfcinv returns NaN.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      erf(), erfc(), erfinv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_erfcinv.html
 |  
 |  erfinv(self, *args)
 |      Calculates the inverse error function as defined by the following
 |      equation:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.erfinv(z)                      | Returns the inverse error function   |
 |      |                                      | of z where z is a scalar number or   |
 |      |                                      | matrix of scalar numbers.            |
 |      |                                      |                                      |
 |      |                                      | For inputs outside the interval (-1, |
 |      |                                      | 1), erfinv returns NaN.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      erf(), erfc(), erfcinv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_erfinv.html
 |  
 |  eval(self, code)
 |      eval will evaluate the given script code as a string
 |  
 |  evalremote(self, *args)
 |      An interoperability command that will send a script commnad(s) to the
 |      server product and executes it there
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.evalremote(s,"y=x^2;")             | Sends command y=x^2; to the server   |
 |      |                                      | via an open session s and executes   |
 |      |                                      | it                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      opensession(), closesession(), putremotedata(), getremotedata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_evalremote.html
 |  
 |  exist(self, *args)
 |      Returns a number based on type of the string used in the command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.exist("x")                         | Returns                              |
 |      |                                      |                                      |
 |      |                                      | 0 if there is no variable, operator, |
 |      |                                      | built-in function or script file     |
 |      |                                      | (x.lsf) in the current script path   |
 |      |                                      |                                      |
 |      |                                      | 1 if x is a variable, example: x=5;  |
 |      |                                      | ?exist(“x”);                         |
 |      |                                      |                                      |
 |      |                                      | 2 if x is an operator or built in    |
 |      |                                      | keyword, example: ?exist(“\*”) or    |
 |      |                                      | ?exist(“for”);                       |
 |      |                                      |                                      |
 |      |                                      | 3 if x is a script file in the       |
 |      |                                      | current script path, called “x.lsf”  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newproject(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_exist.html
 |  
 |  exp(self, *args)
 |      Calculates the natural exponential function. Input can be complex.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.exp(x)                       | The natural exponential of x.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      log()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_exp.html
 |  
 |  expand(self, *args)
 |      Returns the expansion coefficients between the fields recorded at two
 |      arbitrary DFT monitors or saved in two d-cards. The coefficients are
 |      defined according to:
 |      
 |      For more detail on how to use this command, definitions on the
 |      parameters and how to interpret the results, please see Using Mode
 |      Expansion Monitors. Note that N is the power of the waveguide mode.
 |      conj(N) is equal to N if this is a real number. For the unconjugated
 |      coefficients, see expand2.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.expand('monitor1','monitor\_ref',x | outputs the expansion coefficients   |
 |      | ,y,z)                                | between the fields of two monitors   |
 |      |                                      | (or d-cards)                         |
 |      |                                      |                                      |
 |      |                                      | •'monitor1': name of the monitor (or |
 |      |                                      | d-card) containing the fields E1 and |
 |      |                                      | H1 of which the expansion is         |
 |      |                                      | performed                            |
 |      |                                      |                                      |
 |      |                                      | •'monitor\_ref': name of the         |
 |      |                                      | reference monitor (or d-card)        |
 |      |                                      | containing E2 and H2                 |
 |      |                                      |                                      |
 |      |                                      | •x,y,z: spatial displacement of the  |
 |      |                                      | fields from monitor1 with respect to |
 |      |                                      | those from monitor\_ref              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setexpansion(), removeexpansion(), expand2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_expand.html
 |  
 |  expand2(self, *args)
 |      Returns the expansion coefficients in the unconjugated form between the
 |      fields recorded at two arbitrary DFT monitors or saved in two d-cards.
 |      The coefficients in the unconjugated form are defined according to:
 |      
 |      For more detail on how to use this command, definitions on the
 |      parameters and how to interpret the results, please see Using Mode
 |      Expansion Monitors.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.expand2('monitor1','monitor\_ref', | outputs the expansion coefficients   |
 |      | x,y,z)                               | between the fields of two monitors   |
 |      |                                      | (or d-cards) in the unconjugated     |
 |      |                                      | form                                 |
 |      |                                      |                                      |
 |      |                                      | •'monitor1': name of the monitor (or |
 |      |                                      | d-card) containing the fields E1 and |
 |      |                                      | H1 of which the expansion is         |
 |      |                                      | performed                            |
 |      |                                      |                                      |
 |      |                                      | •'monitor\_ref': name of the         |
 |      |                                      | reference monitor (or d-card)        |
 |      |                                      | containing E2 and H2                 |
 |      |                                      |                                      |
 |      |                                      | •x,y,z: spatial displacement of the  |
 |      |                                      | fields from monitor1 with respect to |
 |      |                                      | those from monitor\_ref              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setexpansion(), removeexpansion(), expand()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_expand2.html
 |  
 |  exportassertasjunit(self, *args)
 |  
 |  exportfigure(self, *args)
 |      Exports the current figure to a JPG image. If the file extension is not
 |      specified, ".jpg" will be used. The image size will be the same as the
 |      figure window size.
 |      
 |      If a file is overwritten or if the export fails, a warning will be
 |      generated.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.exportfigure("filename")           | Exports the current figure to a JPG  |
 |      |                                      | image with the name "filename".      |
 |      |                                      |                                      |
 |      |                                      | The exported image will have the     |
 |      |                                      | same size as the current figure.     |
 |      +--------------------------------------+--------------------------------------+
 |      | o.exportfigure("filename",xres,yres) | The exported image will have the     |
 |      |                                      | specified resolution, xres,yres, in  |
 |      |                                      | the x,y directions respectively.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      selectfigure(), image(), plot(), setplot(), closeall(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_exportfigure.html
 |  
 |  exportmaterialdb(self, *args)
 |  
 |  exportsweep(self, *args)
 |      Exports S-parameter results from an S-parameter sweep task to a .dat
 |      file which can be loaded by the Optical N-Port S-parameter element in
 |      INTERCONNECT.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.exportsweep("sweep\_name","filenam | Exports S-parameter results from the |
 |      | e")                                  | specified S-parameter sweep task to  |
 |      |                                      | a .dat file with specified file name |
 |      |                                      | in the current working directory.    |
 |      |                                      |                                      |
 |      |                                      | If the maximum passivity over the    |
 |      |                                      | frequency range is larger than 1.03  |
 |      |                                      | or the maximum reciprocity error     |
 |      |                                      | over the frequency range exceeds     |
 |      |                                      | 0.03, a warning message will appear  |
 |      |                                      | in the script prompt when you export |
 |      |                                      | the data.                            |
 |      |                                      |                                      |
 |      |                                      | If a file of the same name already   |
 |      |                                      | exists, the existing file will be    |
 |      |                                      | overwritten.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addsweep(), runsweep(), getsweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_exportsweep.html
 |  
 |  exportview(self, *args)
 |  
 |  extractstructure(self, *args)
 |      Creates an a polygon (in 2D) or a planar solid (in 3D) using the
 |      finite-element geometric data stored in an unstructured dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.extractstructure(D)                | Creates a polygon for 2D data and a  |
 |      |                                      | planar solid for 3D data. The        |
 |      |                                      | parameter D is the input             |
 |      |                                      | unstructured dataset.                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.extractstructure(D,                | Same as the above command, but the   |
 |      | Rel\_Coplanar\_Tol)                  | relative tolerance to merge coplanar |
 |      |                                      | elements will be set to the value    |
 |      |                                      | specified.                           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.extractstructure(D,                | Same as the above command, but uses  |
 |      | Rel\_Coplanar\_Tol,                  | Laplacian smoothing on the surface   |
 |      | Smoothing\_Pass\_Count)              | mesh. The number of iteration is     |
 |      |                                      | defined by the value specified.      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.extractstructure(D,                | Same as the above command, but the   |
 |      | Rel\_Coplanar\_Tol,                  | allowed angular difference between   |
 |      | Smoothing\_Pass\_Count,              | triangles around a vertex where the  |
 |      | Smoothing\_Angle\_Coplanar\_Tol)     | vertex can be moved is set to the    |
 |      |                                      | value specified.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | o.extractstructure(D,                | Same as the above command, but       |
 |      | Rel\_Coplanar\_Tol,                  | allows re-triangulation of the       |
 |      | Smoothing\_Pass\_Count,              | facets.                              |
 |      | Smoothing\_Angle\_Coplanar\_Tol,     |                                      |
 |      | Allow\_Tessalation)                  |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameters              | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | D                       | unstructured dataset    | Input data that is used |
 |      |                         |                         | to create the           |
 |      |                         |                         | structure.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      | Rel\_Coplanar\_Tol      | number                  | (optional) Relative     |
 |      |                         |                         | tolerance to merge      |
 |      |                         |                         | coplanar elements. The  |
 |      |                         |                         | default value is 1e-6.  |
 |      +-------------------------+-------------------------+-------------------------+
 |      | Smoothing\_Pass\_Count  | number                  | (optional) In 3D only.  |
 |      |                         |                         | Enables Laplacian       |
 |      |                         |                         | smoothing on the        |
 |      |                         |                         | surface mesh before     |
 |      |                         |                         | surface extraction. The |
 |      |                         |                         | default value is 0 and  |
 |      |                         |                         | the maximum allowed     |
 |      |                         |                         | value is 20.            |
 |      +-------------------------+-------------------------+-------------------------+
 |      | Smoothing\_Angle\_Copla | number                  | (optional) Sets the     |
 |      | nar\_Tol                |                         | allowed angular         |
 |      |                         |                         | difference between      |
 |      |                         |                         | triangles around a      |
 |      |                         |                         | vertex where the vertex |
 |      |                         |                         | can be moved. The       |
 |      |                         |                         | default value is 0.001. |
 |      +-------------------------+-------------------------+-------------------------+
 |      | Allow\_Tessalation      | number                  | (optional) In 3D only.  |
 |      |                         |                         | Allows re-triangulation |
 |      |                         |                         | of the facets.          |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_extractstructure.html
 |  
 |  eye(self, *args)
 |      Creates a 2D identity matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | I = o.eye()                          | Returns a 1x1 matrix, value 1.0.     |
 |      +--------------------------------------+--------------------------------------+
 |      | I = o.eye(n)                         | Returns nxn identity matrix.         |
 |      +--------------------------------------+--------------------------------------+
 |      | I = o.eye(n,m)                       | Returns nxm matrix with ones on main |
 |      |                                      | diagonal                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrixdataset(), rectilineardataset(), matlab(), matrix()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_eye.html
 |  
 |  farfield2d(self, *args)
 |      Projects a given power or field profile monitor to the far field to a 1
 |      meter radius semi-circle. The electric field intensity \|E\|2 is
 |      returned.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | E2 = o.farfield2d("mname", f, n,     | Projects a given power or field      |
 |      | illumination, periods, index,        | profile monitor to the far field at  |
 |      | direction)                           | the specified frequency points.      |
 |      |                                      |                                      |
 |      |                                      | The result is an NxM matrix where    |
 |      |                                      | the first dimension is the           |
 |      |                                      | resolution of the far field          |
 |      |                                      | projection, and the second dimension |
 |      |                                      | is the number of frequency points    |
 |      |                                      | projected.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | Name of the    |
 |      |                |                |                |                | monitor        |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. f can   |
 |      |                |                |                |                | be a single    |
 |      |                |                |                |                | value, or a    |
 |      |                |                |                |                | vector of      |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | points.        |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection was |
 |      |                |                |                |                | introduced     |
 |      |                |                |                |                | since R2016b.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | n              | optional       | 2000           | number         | The number of  |
 |      |                |                |                |                | points in the  |
 |      |                |                |                |                | far field.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | illumination   | optional       | 1              | number         | For periodic   |
 |      |                |                |                |                | structures     |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Gaussian       |
 |      |                |                |                |                | illumination:  |
 |      |                |                |                |                | 1              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Plane wave     |
 |      |                |                |                |                | illumination:  |
 |      |                |                |                |                | 2              |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | periods        | optional       | 1              | number         | number of      |
 |      |                |                |                |                | periods to be  |
 |      |                |                |                |                | used           |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | direction of   | number         | Direction:     |
 |      |                |                | max power flow |                | this can be +1 |
 |      |                |                |                |                | or -1.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldangle(), farfieldvector2d(), farfieldpolar2d(),
 |      farfieldexact2d(), farfieldfilter(), farfieldexact(),
 |      farfield2dintegrate()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfield2d.html
 |  
 |  farfield2dintegrate(self, *args)
 |      Calculates the integral of the far field projection over some range of
 |      theta in 2D simulation. Angles are specified in degrees, but the
 |      integral is done in radians.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfield2dintegrate(E2,      | Integrate 2D far field projection    |
 |      | theta, halfangle, theta0)            | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | E2             | required       |                | matrix         | E field data   |
 |      |                |                |                |                | from           |
 |      |                |                |                |                | farfield2d     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | theta          | required       |                | matrix         | Theta from     |
 |      |                |                |                |                | farfieldangle  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | halfangle      | optional       | 90             | vector         | Half angle (in |
 |      |                |                |                |                | degrees) of    |
 |      |                |                |                |                | the            |
 |      |                |                |                |                | integration    |
 |      |                |                |                |                | region. Must   |
 |      |                |                |                |                | have same      |
 |      |                |                |                |                | length as      |
 |      |                |                |                |                | theta0 or      |
 |      |                |                |                |                | length 1. Half |
 |      |                |                |                |                | angle should   |
 |      |                |                |                |                | be between 0   |
 |      |                |                |                |                | to 90 degrees. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | theta0         | optional       | 0              | vector         | Center angle   |
 |      |                |                |                |                | (in degrees)   |
 |      |                |                |                |                | theta of the   |
 |      |                |                |                |                | integration    |
 |      |                |                |                |                | region. Must   |
 |      |                |                |                |                | have same      |
 |      |                |                |                |                | length as      |
 |      |                |                |                |                | halfangle or   |
 |      |                |                |                |                | length 1.      |
 |      |                |                |                |                | Theta0 should  |
 |      |                |                |                |                | be between -90 |
 |      |                |                |                |                | to 90 degrees. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldangle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfield2dintegrate.html
 |  
 |  farfield3d(self, *args)
 |      Projects a given power or field profile monitor to the far field in a 3D
 |      simulation. The electric field intensity \|E\|2 is returned.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfield3d("mname",f, na,    | Projects a given power or field      |
 |      | nb, illumination, periodsa,          | profile monitor to the far field.    |
 |      | periodsb, index, direction)          |                                      |
 |      |                                      | This returns an NxM matrix if 1      |
 |      |                                      | frequency point is projected, or a   |
 |      |                                      | NxMxP matrix if more than 1          |
 |      |                                      | frequency point is projected, where  |
 |      |                                      | N and M correspond to the resolution |
 |      |                                      | of the projection (na, and nb), and  |
 |      |                                      | P corresponds to the number of       |
 |      |                                      | frequency points projected.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | Name of the    |
 |      |                |                |                |                | monitor        |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection to  |
 |      |                |                |                |                | allow multiple |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | points to be   |
 |      |                |                |                |                | projected      |
 |      |                |                |                |                | simultaneously |
 |      |                |                |                |                | was introduced |
 |      |                |                |                |                | in R2016b.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | na             | optional       | 150            | number         | The number of  |
 |      |                |                |                |                | points in the  |
 |      |                |                |                |                | far field.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | nb             | optional       | 150            | number         | The number of  |
 |      |                |                |                |                | points in the  |
 |      |                |                |                |                | far field.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | illumination   | optional       | 1              | number         | For periodic   |
 |      |                |                |                |                | structures.    |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Gaussian       |
 |      |                |                |                |                | illumination:  |
 |      |                |                |                |                | 1              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Plane wave     |
 |      |                |                |                |                | illumination:  |
 |      |                |                |                |                | 2              |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | periodsa       | optional       | 1              | number         | number of      |
 |      |                |                |                |                | periods to be  |
 |      |                |                |                |                | used for       |
 |      |                |                |                |                | periodic       |
 |      |                |                |                |                | illumination   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | periodsb       | optional       | 1              | number         | number of      |
 |      |                |                |                |                | periods to be  |
 |      |                |                |                |                | used for       |
 |      |                |                |                |                | periodic       |
 |      |                |                |                |                | illumination   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | direction of   | number         | Direction:     |
 |      |                |                | max power flow |                | this can be +1 |
 |      |                |                |                |                | or -1.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      The following table summarizes how to interpret the ux, uy coordinate
 |      vectors and periods input properties for various monitor orientations.
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Monitor            | Monitor surface    | 'na', 'ux',        | 'nb', 'uy',        |
 |      | orientation        | normal             | 'periods a'        | 'periods b'        |
 |      |                    |                    | correspond to      | correspond to      |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | XY plane           | Z                  | x axis             | y axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | XZ plane           | Y                  | x axis             | z axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | YZ plane           | X                  | y axis             | z axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldvector3d(), farfieldpolar3d(), farfieldux(),
 |      farfielduy(), farfieldexact3d(), farfieldfilter(), farfield3dintegrate()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfield3d.html
 |  
 |  farfield3dintegrate(self, *args)
 |      Integrates the far field projection over a cone centered at theta0 and
 |      phi0, with a width specified by halfangle for 3D simulations. The far
 |      field electric field is a function of the direction cosines (ux,uy), but
 |      farfield3dintegrate automatically does the change of variables.
 |      Similarly, angles are specified in degrees, but converted to radians
 |      before the integral is calculated. See the farfield3d documentation for
 |      information on interpreting ux, uy, na, nb for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfield3dintegrate(E2, ux,  | Integrate 3D far field projection    |
 |      | uy, halfangle, theta0, phi0)         | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | E2             | required       |                | matrix         | E field data   |
 |      |                |                |                |                | from           |
 |      |                |                |                |                | farfield3d     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | ux             | required       |                | vector         | ux data from   |
 |      |                |                |                |                | farfieldux.    |
 |      |                |                |                |                | Note that the  |
 |      |                |                |                |                | result should  |
 |      |                |                |                |                | be a vector,   |
 |      |                |                |                |                | so it is       |
 |      |                |                |                |                | sufficient to  |
 |      |                |                |                |                | perform the    |
 |      |                |                |                |                | farfieldux     |
 |      |                |                |                |                | script command |
 |      |                |                |                |                | for only 1     |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | uy             | required       |                | vector         | uy data from   |
 |      |                |                |                |                | farfielduy.    |
 |      |                |                |                |                | Note that the  |
 |      |                |                |                |                | result should  |
 |      |                |                |                |                | be a vector,   |
 |      |                |                |                |                | so it is       |
 |      |                |                |                |                | sufficient to  |
 |      |                |                |                |                | perform the    |
 |      |                |                |                |                | farfieldux     |
 |      |                |                |                |                | script command |
 |      |                |                |                |                | for only 1     |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | halfangle      | optional       | 90             | vector         | Half angle of  |
 |      |                |                |                |                | the            |
 |      |                |                |                |                | integration    |
 |      |                |                |                |                | cone. unit in  |
 |      |                |                |                |                | degrees. must  |
 |      |                |                |                |                | have length L  |
 |      |                |                |                |                | or 1. Half     |
 |      |                |                |                |                | angle should   |
 |      |                |                |                |                | be between 0   |
 |      |                |                |                |                | to 90 degrees. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | theta0         | optional       | 0              | vector         | Center angle   |
 |      |                |                |                |                | theta of the   |
 |      |                |                |                |                | integration    |
 |      |                |                |                |                | cone. unit in  |
 |      |                |                |                |                | degrees. must  |
 |      |                |                |                |                | have length L  |
 |      |                |                |                |                | or 1. Theta0   |
 |      |                |                |                |                | should be      |
 |      |                |                |                |                | between 0 to   |
 |      |                |                |                |                | 90 degrees.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | phi0           | optional       | 0              | vector         | Center angle   |
 |      |                |                |                |                | phi of the     |
 |      |                |                |                |                | integration    |
 |      |                |                |                |                | cone. unit in  |
 |      |                |                |                |                | degrees. must  |
 |      |                |                |                |                | have length L  |
 |      |                |                |                |                | or 1. Phi0     |
 |      |                |                |                |                | should be      |
 |      |                |                |                |                | between 0 to   |
 |      |                |                |                |                | 360 degrees.   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldux(), farfielduy(), farfieldspherical()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfield3dintegrate.html
 |  
 |  farfieldangle(self, *args)
 |      Returns the vector of angles, in degrees, corresponding to the data from
 |      farfield2d for a 2D simulation.Used for 2D simulations. This is required
 |      because the farfield2d does not use a set of linearly spaced angles for
 |      the projection. It is often useful to re-interpolate the data onto a set
 |      of linearly spaced angles using the interp or spline functions.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | theta = o.farfieldangle( "mname", f, | Returns the matrix of angles         |
 |      | n, index)                            | corresponding to the data in         |
 |      |                                      | farfield2d                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | Name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                | If f is a      |
 |      |                |                |                |                | vector, the    |
 |      |                |                |                |                | second         |
 |      |                |                |                |                | dimension of   |
 |      |                |                |                |                | theta will     |
 |      |                |                |                |                | match the      |
 |      |                |                |                |                | length of the  |
 |      |                |                |                |                | vector of      |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | points.        |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection was |
 |      |                |                |                |                | introduced     |
 |      |                |                |                |                | since R2016b.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | n              | optional       | 2000           | number         | The number of  |
 |      |                |                |                |                | points in the  |
 |      |                |                |                |                | far field.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldvector2d(), farfieldpolar2d(), interp(), spline()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldangle.html
 |  
 |  farfieldexact(self, *args)
 |      Projects complete complex vector fields to specific locations. It is
 |      expected to be correct down to distances on the order of one wavelength.
 |      The projections from multiple monitors can be added to create a total
 |      far field projection  - see Projections from a monitor box.
 |      
 |      farfieldexact projects any surface fields to a series of points defined
 |      by vector lists. The x,y, z coordinates of each evaluation point are
 |      taken element-by-element from the vector lists. i.e., the i-th point in
 |      a 2D simulation would be at [x(i),y(i)].
 |      
 |      3D
 |      
 |      Vectors lists x,y,z must have the same length L or be length 1. The data
 |      is returned in a matrix of dimension Lx3. The first index represents
 |      positions defined by one element from each of x,y, z. [x(i),y(i),z(i)];
 |      the second index represents Ex, Ey, and Ez.
 |      
 |      2D
 |      
 |      Vector lists x, y must have the same length L or be length 1. The data
 |      is returned in the form of a matrix that is of dimension Lx3. The first
 |      index represents positions defined by one element from each of x,y.
 |      [x(i),y(i)]; The second index represents Ex, Ey, and Ez.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldexact("mname", x, y, | 2D far field exact projection        |
 |      | f, index)                            |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldexact("mname", x, y, | 3D far field exact projection        |
 |      | z, f, index)                         |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      | Default        | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | x              | required       |                | vector         | x coordinates  |
 |      |                |                |                |                | of points      |
 |      |                |                |                |                | where far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated.    |
 |      |                |                |                |                | must have      |
 |      |                |                |                |                | length L or 1. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | y              | required       |                | vector         | y coordinates  |
 |      |                |                |                |                | of points      |
 |      |                |                |                |                | where far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated.    |
 |      |                |                |                |                | must have      |
 |      |                |                |                |                | length L or 1. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | z              | required       |                | vector         | z coordinates  |
 |      |                |                |                |                | of points      |
 |      |                |                |                |                | where far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated.    |
 |      |                |                |                |                | must have      |
 |      |                |                |                |                | length L or 1. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection was |
 |      |                |                |                |                | introduced     |
 |      |                |                |                |                | since R2016b.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfield3d(), farfieldexact2d(), farfieldexact3d()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldexact.html
 |  
 |  farfieldexact2d(self, *args)
 |      This function projects complete complex vector fields to specific
 |      locations. It is expected to be correct down to distances on the order
 |      of one wavelength. The projections from multiple monitors can be added
 |      to create a total far field projection - see Projections from a monitor
 |      box.
 |      
 |      farfieldexact2d projects any surface to the grid points defined by the
 |      vectors x, y. The data is returned in the form of a matrix that is of
 |      dimension NxMxPx3 where N is the length of the x vector, M is the length
 |      of the y vector, P is the number of frequency points, and the final
 |      index represents Ex, Ey, and Ez. Note that N and M can be 1; when they
 |      are both 1, the function is the same as farfieldexact.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldexact2d( "mname", x, | Projects a given power or field      |
 |      | y, f, index)                         | profile monitor to the far field at  |
 |      |                                      | grid points specified by the vectors |
 |      |                                      | x,y.                                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | x              | required       |                | vector         | x coordinates  |
 |      |                |                |                |                | of the grid    |
 |      |                |                |                |                | points where   |
 |      |                |                |                |                | far field is   |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | y              | required       |                | vector         | y coordinates  |
 |      |                |                |                |                | of the grid    |
 |      |                |                |                |                | points where   |
 |      |                |                |                |                | far field is   |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection was |
 |      |                |                |                |                | introduced     |
 |      |                |                |                |                | since R2016b.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | index at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldexact3d(), farfieldexact()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldexact2d.html
 |  
 |  farfieldexact3d(self, *args)
 |      The three dimension form of farfieldexact2d. This function projects
 |      complete complex vector fields to specific locations. It is expected to
 |      be correct down to distances on the order of one wavelength. The
 |      projections from multiple monitors can be added to create a total far
 |      field projection - see Projections from a monitor box.
 |      
 |      farfieldexact3d projects any surface to the grid points defined by the
 |      vectors x,y and z. The data is returned in a matrix of dimension NxMxKx3
 |      if one frequency point is projected, and NxMxKx3xP if more than one
 |      frequency point is projected where N is the length of the vector x, M
 |      the length of the vector y, K is the length of the vector z, P is the
 |      number of frequency points, and the fourth index represents Ex, Ey, and
 |      Ez. Note that N, M and K can be 1, and when they are all 1, the function
 |      is the same as farfieldexact.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldexact3d( "mname", x, | Projects a given power or field      |
 |      | y, z, f, index)                      | profile monitor to the far field at  |
 |      |                                      | grid points specified by the vectors |
 |      |                                      | x,y,z.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | x              | required       |                | vector         | x coordinates  |
 |      |                |                |                |                | of the grid    |
 |      |                |                |                |                | points where   |
 |      |                |                |                |                | far field is   |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | y              | required       |                | vector         | y coordinates  |
 |      |                |                |                |                | of the grid    |
 |      |                |                |                |                | points where   |
 |      |                |                |                |                | far field is   |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | z              | required       |                | vector         | z coordinates  |
 |      |                |                |                |                | of the grid    |
 |      |                |                |                |                | points where   |
 |      |                |                |                |                | far field is   |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                | Multithreaded  |
 |      |                |                |                |                | projection was |
 |      |                |                |                |                | introduced     |
 |      |                |                |                |                | since R2016b.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldexact2d(), farfieldexact()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldexact3d.html
 |  
 |  farfieldfilter(self, *args)
 |      Sets or gets the filter width for far field filter which is used to
 |      remove ripples in the far field projection due to clipping of the near
 |      fields. It should be used when the near fields at the edge of the
 |      monitor are small but not precisely zero.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      |                                      | The bumpy blue line of the figure    |
 |      |                                      | shows the near field electric field  |
 |      |                                      | that will be used for a far field    |
 |      |                                      | projection. In this case, the field  |
 |      |                                      | does not go to zero at the edge of   |
 |      |                                      | the monitor, which will lead to      |
 |      |                                      | ripples in the far field projection. |
 |      |                                      | The green line shows the spatial     |
 |      |                                      | filter that will be applied to the   |
 |      |                                      | fields, ensuring they go to zero.    |
 |      |                                      | The filter parameter defines the     |
 |      |                                      | width of the filter by the following |
 |      |                                      | formula: α=(a)/(a+b).                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldfilter()             | Get the current far field filter     |
 |      |                                      | setting.                             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.farfieldfilter(α)                  | Set the current far field filter     |
 |      |                                      | setting. α=(a)/(a+b). The far field  |
 |      |                                      | filter has a single input parameter, |
 |      |                                      | which is a number between 0 and 1.   |
 |      |                                      | By default, it is 0, which turns the |
 |      |                                      | filter off. This filter is applied   |
 |      |                                      | to all far field projections.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Periodic structures                                                |
 |      |                                                                          |
 |      | The far field filter option should not be used for periodic structures.  |
 |      | Set it to zero when using the 'assume periodic' option.                  |
 |      +--------------------------------------------------------------------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfield3d()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldfilter.html
 |  
 |  farfieldpolar2d(self, *args)
 |      Projects a given power or field profile monitor to the far field to a 1
 |      meter radius semi-circle. This is similar to the farfield2d script
 |      command except the complex electric fields are returned, rather than
 |      field intensity. The data is returned as matrix of NxP if one frequency
 |      point is projected, or NxPx3 when multiple frequency points are
 |      projected where N is the resolution of the far field projection, P is
 |      the number frequency points projected, and the last index refers to Er,
 |      Eθ and Ez, in cylindrical coordinates. For TM simulations, this function
 |      gives precisely the result of farfieldvector2d because the only non-zero
 |      field component is Ez.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldpolar2d(             | Returns the polar complex electric   |
 |      | "mname",...)                         | fields. Same arguments as            |
 |      |                                      | farfield2d.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldvector2d(), farfieldangle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldpolar2d.html
 |  
 |  farfieldpolar3d(self, *args)
 |      The function farfieldpolar3d is similar to farfield3d, but it returns
 |      the complex electric fields, rather than field intensity. The data is
 |      returned as matrix of NxMx3 (if one frequency point is projected) or
 |      NxMxPx3 (if more than 1 frequency point is projected), where N and M are
 |      spatial indices, P is the number of frequency points, and the last index
 |      refers to Er, Eθ and Eφ, in spherical coordinates. The components Er, Eθ
 |      and Eφ are the complex components of the electric field vector. See the
 |      farfield3d documentation for information on interpreting ux, uy, na, nb
 |      for various monitor orientations.
 |      
 |      Note: When viewing far fields from the GUI with the visualizer, three
 |      Attributes are available: E2, Ep, Es. E2 corresponds to \|E\|^2, Ep to
 |      Etheta, and Es to Ephi.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldpolar3d(             | Returns the spherical complex        |
 |      | "monitorname",...)                   | electric fields. Same arguments as   |
 |      |                                      | farfield3d.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldvector3d()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldpolar3d.html
 |  
 |  farfieldsettings(self, *args)
 |  
 |  farfieldspherical(self, *args)
 |      Interpolates far field data (3D simulations) from E(ux,uy) to spherical
 |      coordinates E(theta,phi). The far field projections functions generally
 |      return the projection as a function of ux,uy (direction cosines).
 |      farfieldspherical can be used to interpolate this data into the more
 |      common units of theta, phi. See the farfield3d documentation for
 |      information on interpreting ux, uy, na, nb for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldspherical( E2, ux,   | Interpolate far field data to        |
 |      | uy, theta, phi)                      | spherical coordinates.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | E2             | required       |                | matrix         | E field data   |
 |      |                |                |                |                | from           |
 |      |                |                |                |                | farfield3d     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | ux             | required       |                | vector         | ux data from   |
 |      |                |                |                |                | farfieldux.    |
 |      |                |                |                |                | Note that the  |
 |      |                |                |                |                | result should  |
 |      |                |                |                |                | be a vector,   |
 |      |                |                |                |                | so it is       |
 |      |                |                |                |                | sufficient to  |
 |      |                |                |                |                | perform the    |
 |      |                |                |                |                | farfieldux     |
 |      |                |                |                |                | script command |
 |      |                |                |                |                | for only 1     |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | uy             | required       |                | vector         | uy data from   |
 |      |                |                |                |                | farfielduy.    |
 |      |                |                |                |                | Note that the  |
 |      |                |                |                |                | result should  |
 |      |                |                |                |                | be a vector,   |
 |      |                |                |                |                | so it is       |
 |      |                |                |                |                | sufficient to  |
 |      |                |                |                |                | perform the    |
 |      |                |                |                |                | farfieldux     |
 |      |                |                |                |                | script command |
 |      |                |                |                |                | for only 1     |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | theta          | required       |                | vector         | theta vector,  |
 |      |                |                |                |                | in degrees.    |
 |      |                |                |                |                | Must have      |
 |      |                |                |                |                | length L or 1. |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | phi            | required       |                | vector         | phi vector, in |
 |      |                |                |                |                | degrees. Must  |
 |      |                |                |                |                | have length L  |
 |      |                |                |                |                | or 1.          |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldux(), farfielduy(), meshgridx(), meshgridy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldspherical.html
 |  
 |  farfieldux(self, *args)
 |      Returns the matrix of ux corresponding to the far field data from
 |      farfield3d for a 3D simulation. See the farfield3d documentation for
 |      information on interpreting ux, uy, na, nb for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | See farfield3d help. Arguments are   |
 |      | o.farfieldux("mname",f,na,nb,index)  | same as for farfield3d.              |
 |      |                                      |                                      |
 |      |                                      | Note that the result is an NxM       |
 |      |                                      | matrix where N is the spatial index  |
 |      |                                      | and M is the number of frequency     |
 |      |                                      | points.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfielduy(), farfieldspherical(), farfieldexact()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldux.html
 |  
 |  farfielduy(self, *args)
 |      Returns the matrix of uy corresponding to the far field data from
 |      farfield3d for a 3D simulation. See the farfield3d documentation for
 |      information on interpreting ux, uy, na, nb for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | See farfield3d help. Arguments are   |
 |      | o.farfielduy("mname",f,na,nb,index)  | same as for farfield3d.              |
 |      |                                      |                                      |
 |      |                                      | Note that the result is an NxM       |
 |      |                                      | matrix where N is the spatial index  |
 |      |                                      | and M is the number of frequency     |
 |      |                                      | points.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldux(), farfieldspherical(), farfieldexact()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfielduy.html
 |  
 |  farfieldvector2d(self, *args)
 |      Projects a given power or field profile monitor to the far field to a 1
 |      meter radius semi-circle. This is similar to the farfield2d script
 |      command except the complex electric fields are returned, rather than
 |      field intensity. The data is returned as matrix of NxP if one frequency
 |      point is projected, or NxPx3 when multiple frequency points are
 |      projected where N is the resolution of the far field projection, P is
 |      the number frequency points projected, and the last index refers to Ex,
 |      Ey and Ez which are the complex components of the electric field vector
 |      in Cartesian coordinates.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldvector2d(            | Returns the Cartesian complex        |
 |      | "mname",...)                         | electric fields. Same arguments as   |
 |      |                                      | farfield2d.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield2d(), farfieldpolar2d(), farfieldangle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldvector2d.html
 |  
 |  farfieldvector3d(self, *args)
 |      The function farfieldvector3d is similar to farfield3d, but it returns
 |      the complex electric fields, rather than field intensity. The data is
 |      returned as matrix of NxMx3 (if one frequency point is projected) or
 |      NxMxPx3 (if more than 1 frequency point is projected), where N and M are
 |      spatial indices, P is the number of frequency points, and the last index
 |      refers to Ex, Ey and Ez. The components Ex, Ey and Ez are the complex
 |      components of the electric field vector. See the farfield3d
 |      documentation for information on interpreting ux, uy, na, nb for various
 |      monitor orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.farfieldvector3d(            | Returns the cartesian complex        |
 |      | "monitorname",...)                   | electric fields. Same arguments as   |
 |      |                                      | farfield3d.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      farfield3d(), farfieldpolar3d()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_farfieldvector3d.html
 |  
 |  feval(self, *args)
 |      Evaluates a string as script file. This function is useful for running
 |      script files that are not in your path and files with spaces in the
 |      name.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.feval(filename)                    | Execute string containing the name   |
 |      |                                      | of a script file.                    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      eval(), str2num(), num2str(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_feval.html
 |  
 |  fft(self, *args)
 |      Computes the 1D, 2D or 3D Fast Fourier Transform (FFT) of a matrix. In
 |      the 1D case the transform is given by
 |      
 |      The FFT, inverse FFT and all associated functions have an option (option
 |      1 below) that controls the format used to store the frequency domain
 |      data. When working with spectral data it is not possible to switch
 |      between formats; there are no functions to convert between formats. This
 |      implies that if you use option 1=n to produce a spectrum with fft, then
 |      you must also use option 1=n if you want to pass that same spectral data
 |      to invfft. Similarly, if you use option 1=n for fft, then you also need
 |      to use option 1=n with fftw to get the proper frequency vector
 |      corresponding to your spectrum. invfft and fftk work in the same way.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fft(Ex)                      | Returns the fast Fourier transform   |
 |      |                                      | of Ex. Ex can be 1D, 2D or 3D.       |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fft(Ex,option1,option2)      | option1                              |
 |      |                                      |                                      |
 |      |                                      | This option controls the format used |
 |      |                                      | to store the frequency domain data.  |
 |      |                                      | The options are:                     |
 |      |                                      |                                      |
 |      |                                      | •1 : the standard FFT (zero          |
 |      |                                      | frequency is at the first element of |
 |      |                                      | the matrix). This is the default     |
 |      |                                      | option.                              |
 |      |                                      |                                      |
 |      |                                      | •2 : zero frequency is the first     |
 |      |                                      | element, but only data up to and     |
 |      |                                      | including the Nyquist frequency is   |
 |      |                                      | stored. This option is only useful   |
 |      |                                      | for real valued, 1D time/spatial     |
 |      |                                      | signals.                             |
 |      |                                      |                                      |
 |      |                                      | •3 : the FFT is shifted so zero      |
 |      |                                      | frequency is the central element of  |
 |      |                                      | the spectrum (more precisely, this   |
 |      |                                      | means the zero frequency point is at |
 |      |                                      | element floor(N/2 + 1), where N is   |
 |      |                                      | the number of samples).              |
 |      |                                      |                                      |
 |      |                                      | option2                              |
 |      |                                      |                                      |
 |      |                                      | This option is either a 1, 2 or 3    |
 |      |                                      | element vector depending on whether  |
 |      |                                      | Ex is 1D, 2D or 3D. For each         |
 |      |                                      | dimension, specify a value of either |
 |      |                                      | 0, 1 or N to obtain the desired 0    |
 |      |                                      | padding options.                     |
 |      |                                      |                                      |
 |      |                                      | •0: no zero padding.                 |
 |      |                                      |                                      |
 |      |                                      | •1: zero padding up to the next      |
 |      |                                      | power of 2 longer than the length of |
 |      |                                      | Ex (default).                        |
 |      |                                      |                                      |
 |      |                                      | •N: zero pad up to length N if N >   |
 |      |                                      | length(Ex), where length of Ex is    |
 |      |                                      | the length in a specific dimension.  |
 |      |                                      | If N <= length(Ex), it will zero pad |
 |      |                                      | up to the next power of 2 longer     |
 |      |                                      | than the length of Ex. For the       |
 |      |                                      | fastest results, N should be a power |
 |      |                                      | of 2 and can be entered, for         |
 |      |                                      | example, as 2^12.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: FFT Conventions                                                    |
 |      |                                                                          |
 |      | There are different, but equivalent conventions for defining Fourier     |
 |      | transforms. Lumerical defines the forward FFT using a positive sign in   |
 |      | the exponential term, and the inverse FFT using a negative sign in the   |
 |      | exponential term. However, some other packages (e.g. MATLAB) use the     |
 |      | opposite convention, with a negative sign in the exponential for the     |
 |      | forward FFT and a positive sign in the exponential for the inverse FFT.  |
 |      | To convert between the different FFT conventions, switch the invfft and  |
 |      | fft and rescale the results. For a signal y with N elements this can be  |
 |      | done as follows:                                                         |
 |      |                                                                          |
 |      | +--------------------------------------+-------------------------------- |
 |      | ------+                                                                  |
 |      | | Lumerical                            | MATLAB                          |
 |      |       |                                                                  |
 |      | +--------------------------------------+-------------------------------- |
 |      | ------+                                                                  |
 |      | | fft(y,1,0)                           | ifft(y)\*N                      |
 |      |       |                                                                  |
 |      | |                                      |                                 |
 |      |       |                                                                  |
 |      | | invfft(y,1,0)                        | fft(y)/N                        |
 |      |       |                                                                  |
 |      | +--------------------------------------+-------------------------------- |
 |      | ------+                                                                  |
 |      +--------------------------------------------------------------------------+
 |      
 |      See Also
 |      
 |      invfft(), fftw(), fftk(), czt()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_fft.html
 |  
 |  fftk(self, *args)
 |      Returns the spatial wavevector kx associated with the Fourier transform
 |      of a function of x.
 |      
 |      ,
 |      
 |      where M=length(x).
 |      
 |      fftk and all related functions have an option (option 1 below) that
 |      controls the format used to store the frequency domain data. When
 |      working with spectral data it is not possible to switch between formats;
 |      there are no functions to convert between formats. This implies that if
 |      you use option1=n to produce a spectrum with fft, then you must also use
 |      option1=n if you want to pass that same spectral data to invfft.
 |      Similarly, if you use option1=n for fft, then you also need to use
 |      option1=n with fftw to get the proper frequency vector corresponding to
 |      your spectrum. invfft and fftk work in the same way.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fftk(x)                      | Returns the spatial wavevector kx    |
 |      |                                      | associated with a fourier transform  |
 |      |                                      | of a function of x..                 |
 |      +--------------------------------------+--------------------------------------+
 |      | o.fftk(x,option1,option2)            | option1                              |
 |      |                                      |                                      |
 |      |                                      | •1 : the standard FFT (zero          |
 |      |                                      | frequency is at the first element of |
 |      |                                      | the matrix). This is the default     |
 |      |                                      | option.                              |
 |      |                                      |                                      |
 |      |                                      | •2 : zero frequency is the first     |
 |      |                                      | element, but frequencies above the   |
 |      |                                      | Nyquist frequency are removed.       |
 |      |                                      |                                      |
 |      |                                      | •3 : the FFT is shifted so zero      |
 |      |                                      | frequency is the central element of  |
 |      |                                      | the spectrum (more precisely, this   |
 |      |                                      | means the zero frequency point is at |
 |      |                                      | element floor(N/2 + 1), where N is   |
 |      |                                      | the number of samples). Both         |
 |      |                                      | positive and negative frequencies    |
 |      |                                      | are seen                             |
 |      |                                      |                                      |
 |      |                                      | option2                              |
 |      |                                      |                                      |
 |      |                                      | •0: no zero padding.                 |
 |      |                                      |                                      |
 |      |                                      | •1: zero padding up to the next      |
 |      |                                      | power of 2 longer than the length of |
 |      |                                      | Ex (default).                        |
 |      |                                      |                                      |
 |      |                                      | •N: zero pad up to length N if N >   |
 |      |                                      | length(t). If N <= length(t), it     |
 |      |                                      | will zero pad up to the next power   |
 |      |                                      | of 2 longer than the length of t.    |
 |      |                                      | For the fastest results, N should be |
 |      |                                      | a power of 2 and can be entered, for |
 |      |                                      | example, as 2^12.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fft(), fftw(), invfft()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_fftk.html
 |  
 |  fftw(self, *args)
 |      Returns the angular frequency vector corresponding to time vector t.
 |      
 |      ,
 |      
 |      where M=length(t).
 |      
 |      fftw and all related functions have an option (option 1 below) that
 |      controls the format used to store the frequency domain data. When
 |      working with spectral data it is not possible to switch between formats;
 |      there are no functions to convert between formats. This implies that if
 |      you use option1=n to produce a spectrum with fft, then you must also use
 |      option1=n if you want to pass that same spectral data to invfft.
 |      Similarly, if you use option1=n for fft, then you also need to use
 |      option1=n with fftw to get the proper frequency vector corresponding to
 |      your spectrum. invfft and fftk work in the same way.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fftw(t)                      | Returns the angular frequency vector |
 |      |                                      | corresponding to time vector t.      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.fftw(t,option1,option2)            | option1                              |
 |      |                                      |                                      |
 |      |                                      | •1 : the standard FFT (zero          |
 |      |                                      | frequency is at the first element of |
 |      |                                      | the matrix). This is the default     |
 |      |                                      | option.                              |
 |      |                                      |                                      |
 |      |                                      | •2 : zero frequency is the first     |
 |      |                                      | element, but frequencies above the   |
 |      |                                      | Nyquist frequency are removed.       |
 |      |                                      |                                      |
 |      |                                      | •3 : the FFT is shifted so zero      |
 |      |                                      | frequency is the central element of  |
 |      |                                      | the spectrum (more precisely, this   |
 |      |                                      | means the zero frequency point is at |
 |      |                                      | element floor(N/2 + 1), where N is   |
 |      |                                      | the number of samples). Both         |
 |      |                                      | positive and negative frequencies    |
 |      |                                      | are seen                             |
 |      |                                      |                                      |
 |      |                                      | option2                              |
 |      |                                      |                                      |
 |      |                                      | •0: no zero padding.                 |
 |      |                                      |                                      |
 |      |                                      | •1: zero padding up to the next      |
 |      |                                      | power of 2 longer than the length of |
 |      |                                      | Ex (default).                        |
 |      |                                      |                                      |
 |      |                                      | •N: zero pad up to length N if N >   |
 |      |                                      | length(t). If N <= length(t), it     |
 |      |                                      | will zero pad up to the next power   |
 |      |                                      | of 2 longer than the length of t.    |
 |      |                                      | For the fastest results, N should be |
 |      |                                      | a power of 2 and can be entered, for |
 |      |                                      | example, as 2^12.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fft(), fftk(), invfft()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_fftw.html
 |  
 |  filebasename(self, *args)
 |      Gets the file basename from a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.filebasename(                | Returns the file basename as a       |
 |      | "location/filename.ext" )            | string.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      currentfilename(), getpath(), which(), pwd(), filedirectory(),
 |      fileextension()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_file_basename.html
 |  
 |  filedirectory(self, *args)
 |      Gets the file directory from a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.filedirectory(               | Returns the file directory as a      |
 |      | "location/filename.ext" )            | string.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      currentfilename(), getpath(), which(), pwd(), fileextension(),
 |      filebasename()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_file_directory.html
 |  
 |  fileexists(self, *args)
 |      Checks if a file exists. The file extension (ie, .fsp, .lms, etc) must
 |      be specified. By default, the entire path will be searched.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fileexists("filename")       | Returns 1 if the file exists         |
 |      |                                      |                                      |
 |      |                                      | Returns 0 if the file does not       |
 |      |                                      | exist.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Search for a file not in the path    |
 |      | o.fileexists("c:\\temp\\file.txt")   |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getpath(), which(), pwd(), load(), loaddata(), write(), readdata(),
 |      currentfilename(), rm(), exist()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_file_exists.html
 |  
 |  fileexpand(self, *args)
 |      Expands a file name by replacing any environmental variables.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.fileexpand(filename)               | Expands a file name by replacing any |
 |      |                                      | environmental variables (defined by  |
 |      |                                      | setsetting).                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setsetting()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_fileexpand.html
 |  
 |  fileextension(self, *args)
 |      Gets the file extension from a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fileextension( "name.ext")   | Returns the file extension as a      |
 |      |                                      | string.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      currentfilename(), getpath(), which(), pwd(), filedirectory(),
 |      filebasename()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_file_extension.html
 |  
 |  fileopendialog(self, *args)
 |      Calls the standard windows file open dialog.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fileopendialog()             | Brings up the open file dialog box   |
 |      |                                      | and returns the path that the user   |
 |      |                                      | selects.                             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.fileopendialog(".ext")       | Brings up the open file dialog box,  |
 |      |                                      | displaying only files with the       |
 |      |                                      | extension .ext. Returns the path of  |
 |      |                                      | the file that the user selects.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      filesavedialog()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_fileopendialog.html
 |  
 |  filesavedialog(self, *args)
 |      Calls the standard windows file save dialog.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.filesavedialog()             | Brings up the save file dialog box   |
 |      |                                      | and returns the path that the user   |
 |      |                                      | selects.                             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.filesavedialog(".ext")       | Brings up the save file dialog box,  |
 |      |                                      | displaying only files with the       |
 |      |                                      | extension .ext. Returns the path of  |
 |      |                                      | the file that the user selects.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      fileopendialog()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_filesavedialog.html
 |  
 |  find(self, *args)
 |      Searchs for entries in a matrix that meet some condition. The indices of
 |      those values are returned. For multi-dimensional matrices, the find
 |      function will still return a single index. This is useful when using the
 |      output from find in a loop.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.find(x,5e-6)                 | Will return the index of x that      |
 |      |                                      | corresponds to the closest value to  |
 |      |                                      | 5e-6.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.find(x>5)                    | Will return the indices of all       |
 |      |                                      | values of x that are greater than 5. |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.find((x<7) & (x>=2))         | Will return the indices of all       |
 |      |                                      | values of x that are greater than or |
 |      |                                      | equal to 2, AND less than 7.         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      pinch(), findpeaks(), integrate(), length(), size(), mod(),
 |      meshgrid3dx(), meshgrid3dy(), meshgrid3dz()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_find.html
 |  
 |  findpeaks(self, *args)
 |      Returns the position of peaks in a matrix. A peak (or local maximum) is
 |      defined as a data point that is larger than its nearest neighbors.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.findpeaks(y)                 | Returns the position of the peak     |
 |      |                                      | with the largest value in y. The     |
 |      |                                      | length of y must be at least 2. If   |
 |      |                                      | no peak is found in the data, a      |
 |      |                                      | value of 1 is returned.              |
 |      +--------------------------------------+--------------------------------------+
 |      | o.findpeaks(y,n)                     | Returns a matrix containing the      |
 |      |                                      | positions of the largest n peaks     |
 |      |                                      | found in the data. The returned      |
 |      |                                      | values are ordered from largest to   |
 |      |                                      | smallest. The returned matrix is     |
 |      |                                      | always of dimension nX1. If less     |
 |      |                                      | than n peaks are found, the          |
 |      |                                      | remaining values of the returned     |
 |      |                                      | matrix are 1.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      find()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_findpeaks.html
 |  
 |  findresonances(self, *args)
 |  
 |  findstring(self, *args)
 |      Returns the position of a given substring in a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | pos = o.findstring(s,s1)             | Returns the position of the first    |
 |      |                                      | instance substring s1 in s. If s1 is |
 |      |                                      | not found in s, it returns -1.       |
 |      +--------------------------------------+--------------------------------------+
 |      | pos = o.findstring(s,s1,p0)          | Returns the position of the first    |
 |      |                                      | instance substring s1 in s, starting |
 |      |                                      | at position p0. If s1 is not found   |
 |      |                                      | in s, starting from p0, it returns   |
 |      |                                      | -1.                                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), replace(), replacestring(), str2num(), num2str(),
 |      splitstring(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_findstring.html
 |  
 |  finite(self, *args)
 |      Returns 1 (true) if a value is finite. Numbers such as NaN or #1.INF
 |      return 0 (false).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.finite(x)                    | Returns a matrix of the same size as |
 |      |                                      | x. The values are 1 for values of x  |
 |      |                                      | that are finite and 0 for values     |
 |      |                                      | that are NaN.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lineintersect(), linecross()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_finite.html
 |  
 |  fitlorentzpdf(self, *args)
 |  
 |  fitnormpdf(self, *args)
 |  
 |  fitpearson4pdf(self, *args)
 |  
 |  flip(self, *args)
 |      Flips (reverses the order of) a matrix along a given dimension.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | C = o.flip(A, dim)                   | Flips the matrix A along the         |
 |      |                                      | dimension dim.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      size(), length(), pinch(), transpose(), reshape(), permute()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_flip.html
 |  
 |  floor(self, *args)
 |      Rounds the input to the nearest integer less than or equal to itself.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.floor(X)                     | Returns the nearest integer less     |
 |      |                                      | than or equal to X.                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      ceil(), mod()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_floor.html
 |  
 |  gdsaddcircle(self, *args)
 |      This function adds an approximation of a circle to a GDSII file stream.
 |      GDSII files do not support circles, so this is just a convenient
 |      function to create a polygon representation of a circle. Polygons can
 |      only be added in a GDSII cell, so this command can be called only if a
 |      cell has been created.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsaddcircle(f, layer, x, y, r, n) | Adds an approximation of a circle on |
 |      |                                      | a layer with x-, y-coordinates,      |
 |      |                                      | radius and number of polygon sides.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      | layer                   | number                  | layer number for this   |
 |      |                         |                         | structure.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      | x                       | number                  | x-coordinate of the     |
 |      |                         |                         | center position in      |
 |      |                         |                         | meters.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      | y                       | number                  | y-coordinate of the     |
 |      |                         |                         | center position in      |
 |      |                         |                         | meters.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      | r                       | number                  | radius of the circle in |
 |      |                         |                         | meters.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      | n                       | number                  | number of sides to use  |
 |      |                         |                         | in the polygon          |
 |      |                         |                         | approximation. It is 64 |
 |      |                         |                         | by default.             |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),
 |      gdsaddref(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsaddcircle.html
 |  
 |  gdsaddellipse(self, *args)
 |  
 |  gdsaddmultipoly(self, *args)
 |  
 |  gdsaddpath(self, *args)
 |  
 |  gdsaddpoly(self, *args)
 |      This function adds a polygon element to a GDSII file stream. Polygons
 |      are also known as boundary elements in GDS terminology. This command can
 |      be called only if a cell has been created.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsaddpoly(f, layer, [vertices])   | Adds a polygon element on a layer    |
 |      |                                      | with vertices.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      | layer                   | number                  | layer number for this   |
 |      |                         |                         | structure.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      | vertices                | matrix                  | vertices of the         |
 |      |                         |                         | polygon, in a Nx2       |
 |      |                         |                         | matrix where the first  |
 |      |                         |                         | column represents x and |
 |      |                         |                         | the second column       |
 |      |                         |                         | represents y, e.g.,     |
 |      |                         |                         | [x1,y1;                 |
 |      |                         |                         | x2,y2;...xn,yn]. The    |
 |      |                         |                         | values are in meters.   |
 |      |                         |                         | The first and last      |
 |      |                         |                         | values should not be    |
 |      |                         |                         | the same, the polygon   |
 |      |                         |                         | will be automatically   |
 |      |                         |                         | closed.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddcircle(),
 |      gdsaddref(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsaddpoly.html
 |  
 |  gdsaddrect(self, *args)
 |      This function adds a rectangle element to a GDSII file stream. This is
 |      just a convenient function to create a polygon for the case of a
 |      rectangle. Other element type for rectangle (such as, box) is not
 |      supported at this moment. Polygons can only be added in a GDSII cell, so
 |      this command can be called only if a cell has been created.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsaddrect(f, layer, x, y, width,  | Adds a rectangle element on a layer  |
 |      | height)                              | with x-, y-coordinates, width and    |
 |      |                                      | height.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      | layer                   | number                  | layer number for this   |
 |      |                         |                         | structure.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      | x                       | number                  | x-coordinate of the     |
 |      |                         |                         | center position in      |
 |      |                         |                         | meters.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      | y                       | number                  | y-coordinate of the     |
 |      |                         |                         | center position in      |
 |      |                         |                         | meters.                 |
 |      +-------------------------+-------------------------+-------------------------+
 |      | width                   | number                  | width of the rectangle  |
 |      |                         |                         | in meters.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      | height                  | number                  | height of the rectangle |
 |      |                         |                         | in meters.              |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),
 |      gdsaddref(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsaddrect.html
 |  
 |  gdsaddref(self, *args)
 |      This function adds a reference to another cell to the current cell in
 |      the GDSII file stream. This function replicates the referenced cell (has
 |      to be previously opened and finished) to the current cell, to create a
 |      nested hierarchy. The layer numbers of the replicated structures follow
 |      the referenced cell. References can only be added in a GDSII cell, so
 |      this command can be called only if a current cell has been created. In
 |      addition, the cell to be replicated has to exist before it is
 |      referenced.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsaddref(f, "cellname", dx, dy)   | Adds a reference to another cell     |
 |      |                                      | ("cellname") to the current cell,    |
 |      |                                      | with a specified move of dx and dy.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      | cellname                | string                  | name of the referenced  |
 |      |                         |                         | cell.                   |
 |      +-------------------------+-------------------------+-------------------------+
 |      | dx                      | number                  | x-movement of the       |
 |      |                         |                         | replicated cell in the  |
 |      |                         |                         | current cell.           |
 |      +-------------------------+-------------------------+-------------------------+
 |      | dy                      | number                  | y-movement of the       |
 |      |                         |                         | replicated cell in the  |
 |      |                         |                         | current cell.           |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(),
 |      gdsaddcircle(), gdsaddrect(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsaddref.html
 |  
 |  gdsaddtext(self, *args)
 |  
 |  gdsbegincell(self, *args)
 |      This function creates a cell in a GDSII file. All GDS elements
 |      (polygons, boxes, references, array references, etc) must be placed
 |      inside a cell, so this function must be called before adding any
 |      elements. When finished adding elements, gdsendcell can be called to
 |      finish the cell. Cells cannot be nested, so after calling gdsbegincell,
 |      a new cell cannot be called again until the first called cell has been
 |      closed. Although the GDSII file is a flat list of cells, cells can
 |      reference other cells, thus creating a nested hierarchy. See gdsaddref
 |      for more details. A GDS "cell" exists as a "structure group" when
 |      imported to FDTD, see gdsimport for more details.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsbegincell(f, "cellname")        | Creates a new cell in a GDSII file.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      | cellname                | string                  | name of the cell.       |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsendcell(), gdsaddpoly(), gdsaddref(),
 |      gdsimport(), cell()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsbegincell.html
 |  
 |  gdsclose(self, *args)
 |      This function closes a GDSII file for writing. Before calling this
 |      command, a .gds file has to be previously opened, see gdsopen.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsclose("filename")               | closes a .gds file in the current    |
 |      |                                      | working directory.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the GDSII file  |
 |      |                         |                         | to export, may also     |
 |      |                         |                         | contain a file path.    |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsbegincell(), gdsendcell(), gdsaddpoly(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsclose.html
 |  
 |  gdsendcell(self, *args)
 |      This function finishes a cell in a GDSII file. This function ends the
 |      current cell in the GDSII file stream. The command gdsbegincell has to
 |      be called before closing a cell.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.gdsendcell(f)                      | Finishes the previously created cell |
 |      |                                      | in a GDSII file.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | f                       | string                  | a file handle that was  |
 |      |                         |                         | previously opened with  |
 |      |                         |                         | gdsopen.                |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      gdsopen(), gdsclose(), gdsbegincell(), gdsaddpoly(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsendcell.html
 |  
 |  gdsimport(self, *args)
 |      This command imports a cell from a .gds file into the layout
 |      environment. This is equivalent to performing a GDSII import through the
 |      FILE->IMPORT menu. See the Layout editor reference guide on GDSII import
 |      for more information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | n = o.gdsimport("filename",          | Imports the specified layer from the |
 |      | "cellname", layer)                   | specified cell in the specified file |
 |      |                                      | into the current simulation          |
 |      |                                      | environment. The objects created     |
 |      |                                      | will have their material set to an   |
 |      |                                      | object defined dielectric. In 3D,    |
 |      |                                      | the 2D geometric data will be        |
 |      |                                      | extruded to default values in the Z  |
 |      |                                      | dimension. The optional returned     |
 |      |                                      | value, n, is the number of objects   |
 |      |                                      | that were imported from the gds      |
 |      |                                      | file.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | n = o.gdsimport("filename",          | Same as the above command, but the   |
 |      | "cellname", layer, "material")       | material of the imported object will |
 |      |                                      | be set to the value specified.       |
 |      +--------------------------------------+--------------------------------------+
 |      | n = o.gdsimport("filename",          | This form of the command is only     |
 |      | "cellname", layer, "material", zmin, | allowed in 3D layouts. The behavior  |
 |      | zmax)                                | is the same as the above command,    |
 |      |                                      | but the structures will be extruded  |
 |      |                                      | in the Z dimension to the specified  |
 |      |                                      | z min and z max values               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the GDSII file  |
 |      |                         |                         | to import. It can       |
 |      |                         |                         | contain a complete path |
 |      |                         |                         | to file, or path        |
 |      |                         |                         | relative to the current |
 |      |                         |                         | working directory.      |
 |      +-------------------------+-------------------------+-------------------------+
 |      | cellname                | string                  | name of the cell to     |
 |      |                         |                         | import from the GDSII   |
 |      |                         |                         | file.                   |
 |      +-------------------------+-------------------------+-------------------------+
 |      | layer                   | number or string        | the layer number from   |
 |      |                         |                         | the GDSII file to       |
 |      |                         |                         | import. If only         |
 |      |                         |                         | elements matching a     |
 |      |                         |                         | certain data type are   |
 |      |                         |                         | desired, this can be    |
 |      |                         |                         | specified by using a    |
 |      |                         |                         | string of the form:     |
 |      |                         |                         |                         |
 |      |                         |                         | "6:2"                   |
 |      |                         |                         |                         |
 |      |                         |                         | where the desired layer |
 |      |                         |                         | is 6 and the desired    |
 |      |                         |                         | data type is 2.         |
 |      +-------------------------+-------------------------+-------------------------+
 |      | material                | string                  | a valid name of a       |
 |      |                         |                         | material in your        |
 |      |                         |                         | current layout          |
 |      |                         |                         | environment. Partial    |
 |      |                         |                         | names of materials can  |
 |      |                         |                         | be matched starting at  |
 |      |                         |                         | the beginning of the    |
 |      |                         |                         | string. For example,    |
 |      |                         |                         | "Al (3" would match "Al |
 |      |                         |                         | (300nm)".               |
 |      +-------------------------+-------------------------+-------------------------+
 |      | zmin                    | number                  | the minimum z value for |
 |      |                         |                         | extruding 2D GDSII data |
 |      |                         |                         | into 3D objects         |
 |      +-------------------------+-------------------------+-------------------------+
 |      | zmax                    | number                  | the maximum z value for |
 |      |                         |                         | extruding 2D GDSII data |
 |      |                         |                         | into 3D objects         |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |       
 |      -
 |      
 |      See Also
 |      
 |      setnamed(), fileexists(), gdsopen()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsimport.html
 |  
 |  gdsopen(self, *args)
 |      This function creates a new .gds file and returns a file handle that can
 |      be used with the other GdsWriter functions to write the file. The
 |      default database units are in 0.1nm and the user units are microns. The
 |      GDSII export function works as a group of commands, shown below as an
 |      example. For more information, please see Userguide - GDSII - Import and
 |      export.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | f = o.gdsopen("filename",            | Opens a .gds file in the current     |
 |      | "userUnit", "dataBaseUnit")          | directory, specifies the size of     |
 |      |                                      | user units and size of the GDSII     |
 |      |                                      | file units. f is a file handle to    |
 |      |                                      | open the GDSII file.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the GDSII file  |
 |      |                         |                         | to export, may also     |
 |      |                         |                         | contain a file path.    |
 |      +-------------------------+-------------------------+-------------------------+
 |      | userUnit                | number                  | size of user units in   |
 |      |                         |                         | GDSII file units.       |
 |      +-------------------------+-------------------------+-------------------------+
 |      | databaseUnit            | number                  | size of the GDSII file  |
 |      |                         |                         | units in meters.        |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |       
 |      =
 |      
 |      See Also
 |      
 |      gdsclose(), gdsbegincell(), gdsendcell(), gdsaddpoly(), gdsimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gdsopen.html
 |  
 |  gdsread(self, *args)
 |  
 |  get(self, *args)
 |      Gets a property from selected objects. The property names for the get
 |      command are the same as the property names in the Edit dialogue box.
 |       For example, if you see a property called "mesh accuracy", then you can
 |      use the command get("mesh accuracy"); to get that property. It is
 |      possible to get numeric, string, drop down and checkbox properties.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.get()                        | Returns a list of the properties of  |
 |      |                                      | the selected object(s).              |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.get("property")              | Gets the requested property value    |
 |      |                                      | from the currently selected object.  |
 |      |                                      | It cannot be used to get the         |
 |      |                                      | property value of a selected object  |
 |      |                                      | in a group.                          |
 |      |                                      |                                      |
 |      |                                      | If multiple objects are selected     |
 |      |                                      | get("property") is the same as       |
 |      |                                      | get("property",i), where i is the    |
 |      |                                      | number of the first selected objects |
 |      |                                      | with the requested property.         |
 |      |                                      |                                      |
 |      |                                      | Out can be a matrix or a string,     |
 |      |                                      | depending on the property requested. |
 |      +--------------------------------------+--------------------------------------+
 |      | o.get("property",i)                  | Gets the property of the ith         |
 |      |                                      | selected object. Use this to act on  |
 |      |                                      | a series of objects. It cannot be    |
 |      |                                      | used to get the value of a selected  |
 |      |                                      | object in a group.                   |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getnumber(), getnamed(), getnamednumber(), set(), haveproperty(),
 |      runsetup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_get.html
 |  
 |  getAllSelectedObjects(self)
 |      returns a list of all currently selected simulation objects
 |  
 |  getObjectById(self, id)
 |      returns the simulation object identified by ID
 |      
 |      The object ID is the fully distinguished name of the object. Eg:
 |      
 |      ::model::group::rectangle
 |      
 |      If a duplicate names exist, you should append #N to the name to
 |      unambiguously identify a single object. N is an integer identifing
 |      the Nth object in the tree with the given name. Eg:
 |      
 |      ::model::group::rectangle#3
 |      
 |      If an unqualified name is given, the group scope will be prepended to
 |      the name
 |  
 |  getObjectBySelection(self)
 |      returns the currently selected simulation objects
 |      
 |      If multiple objects are selected the first object is returned
 |  
 |  getassertresults(self, *args)
 |  
 |  getattribute(self, *args)
 |      Gets an attribute from an existing dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getattribute(R)              | Returns the names of all the         |
 |      |                                      | attributes in the dataset R.         |
 |      +--------------------------------------+--------------------------------------+
 |      | Attribute = R.o.getattribute("a")    | Retrieves the attribute a from the   |
 |      |                                      | existing dataset R. The result       |
 |      |                                      | "Attribute" is a matrix in one of    |
 |      |                                      | the forms below depending on the     |
 |      |                                      | type of atrribute:                   |
 |      |                                      |                                      |
 |      |                                      | vertex\_scalar\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...1]              |
 |      |                                      |                                      |
 |      |                                      | vertex\_vector\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...3]              |
 |      |                                      |                                      |
 |      |                                      | cell\_scalar\_attribute[ncells; 1]   |
 |      |                                      |                                      |
 |      |                                      | cell\_vector\_attribute[ncells; 3]   |
 |      |                                      |                                      |
 |      |                                      | "npts" is the number of vertices     |
 |      |                                      | which is equal tothe length of       |
 |      |                                      | geometric parameters 'x', 'y', 'z'   |
 |      |                                      |                                      |
 |      |                                      | "ncells" is the number of elements   |
 |      |                                      | equal to number of rows of geometry  |
 |      |                                      | parameter 'elements'                 |
 |      +--------------------------------------+--------------------------------------+
 |      | Attribute = getparameter(R,"a")      | Retrieves the attribute a from the   |
 |      |                                      | existing dataset R. The result       |
 |      |                                      | "Attribute" is a matrix in one of    |
 |      |                                      | the forms below depending on the     |
 |      |                                      | type of atrribute:                   |
 |      |                                      |                                      |
 |      |                                      | vertex\_scalar\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...1]              |
 |      |                                      |                                      |
 |      |                                      | vertex\_vector\_attribute[npts;      |
 |      |                                      | npar\_1; npar\_2; ...3]              |
 |      |                                      |                                      |
 |      |                                      | cell\_scalar\_attribute[ncells; 1]   |
 |      |                                      |                                      |
 |      |                                      | cell\_vector\_attribute[ncells; 3]   |
 |      |                                      |                                      |
 |      |                                      | "npts" is the number of vertices     |
 |      |                                      | which is equal tothe length of       |
 |      |                                      | geometric parameters 'x', 'y', 'z'   |
 |      |                                      |                                      |
 |      |                                      | "ncells" is the number of elements   |
 |      |                                      | equal to number of rows of geometry  |
 |      |                                      | parameter 'elements'                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrixdataset(), rectilineardataset(), getresult(), getparameter(),
 |      visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getattribute.html
 |  
 |  getcelllist(self, *args)
 |      Returns the list of cells associated with the gds file that has been
 |      loaded into a layer builder object. There needs to be a layer builder
 |      object selected, with a gds file loaded.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getcelllist()                      | Returns the list of cells associated |
 |      |                                      | with the loaded gds file.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),
 |      addlayer(), getlayerlist(), setlayer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getcellist.html
 |  
 |  getcommands(self, *args)
 |      Returns the list of available script commands in the current script
 |      workspace.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getcommands()                | Returns a list of available script   |
 |      |                                      | commands                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getcommands.html
 |  
 |  getcontour(self, *args)
 |  
 |  getdata(self, *args)
 |      Get raw data from a simulation object. In most cases, it is more
 |      convenient to get a complete dataset with getresult, rather than getting
 |      individual data elements with getdata.
 |      
 |      Remember to run the simulation before using getdata.
 |      
 |      For FDTD and MODE,
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getdata()                    | Returns names of all objects with    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getdata("monitor")           | Returns list of of data within the   |
 |      |                                      | simulation object.                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getdata( "monitor",          | Gets data from a monitor. For        |
 |      | "dataname")                          | example, you can use                 |
 |      |                                      |                                      |
 |      |                                      | •Ex = getdata("monitor1","Ex");      |
 |      |                                      |                                      |
 |      |                                      | to get the Ex field data from        |
 |      |                                      | monitor1.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getdata( "monitor",          | The optional argument, option, can   |
 |      | "dataname", option)                  | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      |                                      |                                      |
 |      |                                      | For Propagator simulations in MODE   |
 |      |                                      | Solutions, this options also allow   |
 |      |                                      | users to choose whether to expand    |
 |      |                                      | the data to the correct size for     |
 |      |                                      | dimensions where the field component |
 |      |                                      | is zero. Option 1 will return a      |
 |      |                                      | singleton value of 0 for the field   |
 |      |                                      | component in that dimension, and     |
 |      |                                      | option 2 will return a matrix        |
 |      |                                      | (composed of zeros) that matches the |
 |      |                                      | size of the other field components.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For DEVICE,
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getdata()                    | Returns names of all objects with    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getdata("monitor")           | Returns list of of results within    |
 |      |                                      | the simulation object.               |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getdata( "monitor",          | Returns list of of data within the   |
 |      | "result")                            | simulation object result.            |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getdata( "monitor",          | Gets the simulation data.            |
 |      | "result", "dataname")                |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getresult(), havedata(), getelectric(), getmagnetic(), nonorm(),
 |      cwnorm(), getsweepdata(), getsweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getdata.html
 |  
 |  geteigensolver(self, *args)
 |      Mode sources and mode expansion monitors in FDTD Solutions and MODE
 |      Solutions, and ports in FDTD Solutions have embedded eigensolvers. This
 |      script command makes it possible to get the properties of that
 |      eigensolver without using the GUI.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.geteigensolver()             | Returns a list of the properties of  |
 |      |                                      | the embedded eigensolver             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.geteigensolver("property")         | This will get the eigensolver        |
 |      |                                      | properties of the currently selected |
 |      |                                      | objects. The returned value may be a |
 |      |                                      | number or a string, depending on the |
 |      |                                      | property.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmode(), addmodeexpansion(), addport(), clearsourcedata(),
 |      clearmodedata(), clearportmodedata(), getresult(), seteigensolver(),
 |      geteigensolver(), updatemodes(), updatesourcemode(), updateportmodes()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_geteigensolver.html
 |  
 |  getelectric(self, *args)
 |      Returns the sum of the amplitude squares for all electric field
 |      components, i.e. it returns \|Ex\|2+\|Ey\|2+\|Ez\|2.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getelectric( "monitorname")  | Returns \|Ex\|2+\|Ey\|2+\|Ez\|2 from |
 |      |                                      | the monitor.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getelectric( "monitorname",        | The optional argument, option, can   |
 |      | option)                              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), getmagnetic(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getelectric.html
 |  
 |  getfdtdindex(self, *args)
 |      Returns the complex refractive index of a material in the database with
 |      material fit that will be used in a simulation in FDTD Solutions.
 |      
 |      Many materials (such as Sampled materials) have properties that depend
 |      on frequency. Using getfdtdindex, you can specify frequency range, and
 |      the fitting routine will find a best fit of the material data over that
 |      range. The refractive index evaluated at the specified frequencies is
 |      then returned.
 |      
 |      Note that the fit result depends on the fit parameters, Max coefficients
 |      and Tolerance set for the material, thus getfdtdindex result depends on
 |      those parameters as well. Tips for setting these parameters can be found
 |      at Modifying the material fits.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getfdtdindex(                | Returns the complex index of the     |
 |      | "materialname", f, fmin, fmax)       | material with the given name. The    |
 |      |                                      | index is returned for the specified  |
 |      |                                      | frequency f. Similar to getindex,    |
 |      |                                      | but you also specify fmin and fmax,  |
 |      |                                      | the span of frequency of the FDTD    |
 |      |                                      | simulation. All frequency units are  |
 |      |                                      | in Hz.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getfdtdindex("materialname",       | Optional argument component can be   |
 |      | f,fmin, fmax, component)             | 1, 2 or 3 to specify the x, y or z   |
 |      |                                      | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getindex(), getmodeindex(), addmaterial(), setmaterial(),
 |      getnumericalpermittivity()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getfdtdindex.html
 |  
 |  getfdtdsurfaceconductivity(self, *args)
 |      For materials which use a surface conductivity material model (such as
 |      Graphene), this function returns the surface conductivity of the
 |      material in the database as it will be used in an actual simulation. For
 |      a list of materials which use the surface conductivity model, see
 |      Material conductivity models.
 |      
 |      The conductivity evaluated at the specified frequencies is returned.
 |      Note that the fit result depends on the fit parameters, Max coefficients
 |      and Tolerance set for the material, thus getfdtdsurfaceconductivity
 |      result depends on those parameters as well.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getfdtdsurfaceconductivity(  | Returns the surface conductivity (in |
 |      | "materialname", f, fmin, fmax)       | units of S) of the material with the |
 |      |                                      | given name. The surface conductivity |
 |      |                                      | is returned for the specified        |
 |      |                                      | frequency f. Similar to              |
 |      |                                      | getsurfaceconductivity, but you also |
 |      |                                      | specify fmin and fmax, the span of   |
 |      |                                      | frequency range of the simulation.   |
 |      |                                      | All frequency units are in Hz.       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getfdtdsurfaceconductivity("materi | Optional argument component can be   |
 |      | alname",                             | 1, 2 or 3 to specify the x, y or z   |
 |      | f,fmin, fmax, component)             | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmaterial(), setmaterial(), getsurfaceconductivity()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getfdtdsurfaceconductivity.html
 |  
 |  getfield(self, *args)
 |      The script command returns the value of a field from structure input.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | value= o.getfield(input, field)      | Returns the value of a ‘field’ from  |
 |      |                                      | structure ‘input’.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      isfield(), setfield()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getfield.html
 |  
 |  getglobalmonitor(self, *args)
 |      Sets global monitor properties. This command will return an error in
 |      analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getglobalmonitor()           | Returns a list of the global monitor |
 |      |                                      | properties                           |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getglobalmonitor("property") | Returns the value of the requested   |
 |      |                                      | property.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), setglobalmonitor(), setglobalsource(), getglobalsource()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getglobalmonitor.html
 |  
 |  getglobalsource(self, *args)
 |      Sets global monitor properties. This command will return an error in
 |      analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getglobalsource()                  | Returns a list of the global source  |
 |      |                                      | properties                           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getglobalsource("property")        | Returns the value of the requested   |
 |      |                                      | property.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), setglobalmonitor(), getglobalmonitor(), setglobalsource()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getglobalsource.html
 |  
 |  getid(self, *args)
 |  
 |  getindex(self, *args)
 |      Returns the complex refractive index of a material in the material
 |      database. The refractive index at the specified frequency is linearly
 |      interpolated from the neighboring frequencies where the data is
 |      available.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getindex("materialname", f)  | Returns the complex index of the     |
 |      |                                      | material with the given name. The    |
 |      |                                      | index is returned for the specified  |
 |      |                                      | frequency f. Frequency f is in Hz.   |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getindex("materialname", f,        | Optional argument component can be   |
 |      | component)                           | 1, 2 or 3 to specify the x, y or z   |
 |      |                                      | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getfdtdindex(), getmodeindex(), addmaterial(), setmaterial(),
 |      getsurfaceconductivity()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getindex.html
 |  
 |  getlayer(self, *args)
 |  
 |  getlayerlist(self, *args)
 |      Returns the list of layers associated with the loaded gds file. There
 |      needs to be a layer builder object selected, with a gds file loaded.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getlayerlist()                     | Returns the list of layers           |
 |      |                                      | associated with the loaded gds file. |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),
 |      addlayer(), getcelllist(), setlayer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getlayerlist.html
 |  
 |  getlicenseversion(self, *args)
 |  
 |  getmagnetic(self, *args)
 |      Returns the sum of the amplitude squares for all magnetic field
 |      components, i.e. it returns \|Hx\|2+\|Hy\|2+\|Hz\|2.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getmagnetic( "monitorname")  | Returns \|Hx\|2+\|Hy\|2+\|Hz\|2 from |
 |      |                                      | the monitor.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getmagnetic( "monitorname",        | The optional argument, option, can   |
 |      | option)                              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), getelectric(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getmagnetic.html
 |  
 |  getmaterial(self, *args)
 |      Returns properties of a material in the material database.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getmaterial( "materialname") | Displays the property names of the   |
 |      |                                      | specified material that can be       |
 |      |                                      | modified.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getmaterial( "materialname", | Returns the property named           |
 |      | "propertyname")                      | "propertyname" of the material with  |
 |      |                                      | the name "materialname". The         |
 |      |                                      | returned variable is either a matrix |
 |      |                                      | or a string, depending on the        |
 |      |                                      | property in the query.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+
 |      +----+
 |      
 |      See Also
 |      
 |      addmaterial(), setmaterial(), getindex(), getfdtdindex()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getmaterial.html
 |  
 |  getmeshcontours(self, *args)
 |      Gets information about the contours between different domains in an
 |      unstructured (finite-element) dataset.  The dataset must contain the
 |      "ID" attribute (a unique identified for each domain in the
 |      finite-element mesh generated by DEVICE).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | A = o.getmeshcontours(dataset)       | Returns information about the        |
 |      |                                      | contours between different domains   |
 |      |                                      | of the unstructured dataset named    |
 |      |                                      | "dataset".  The output is provided   |
 |      |                                      | as a cell array.  Each entry is a    |
 |      |                                      | struct with three fields:            |
 |      |                                      |                                      |
 |      |                                      | ID:  An integer ID that is unique    |
 |      |                                      | for that contour.                    |
 |      |                                      |                                      |
 |      |                                      | adjacent:  Two integers representing |
 |      |                                      | the IDs of the adjacent domains.     |
 |      |                                      |                                      |
 |      |                                      | elements:  For 2D, Nx2 array and for |
 |      |                                      | 3D, Nx3 array of integers that are   |
 |      |                                      | the indexes to the vertices for each |
 |      |                                      | face on the boundary.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      unstructureddataset(), mesh(), getresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getmeshcontours.html
 |  
 |  getmeshfaces(self, *args)
 |  
 |  getmodeindex(self, *args)
 |      This function returns the material index of a material in the database
 |      as it will be used in an actual MODE simulation.
 |      
 |      Many materials (such as Sampled Materials) have properties that depend
 |      on frequency. Using getmodeindex, you can obtain the refractive index as
 |      a function of the specified frequency, f, as it will be used in MODE
 |      calculations.
 |      
 |      Note that the fit result depends on the fit parameters, Max coefficients
 |      and Tolerance set for the material, thus getfdtdindex result depends on
 |      those parameters as well. Tips for setting these parameters can be found
 |      at Modifying the material fits.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getmodeindex(                | Returns the complex index of the     |
 |      | "materialname", f)                   | material with the given name. The    |
 |      |                                      | index is returned for the specified  |
 |      |                                      | frequency f. This result is          |
 |      |                                      | identical to getindex unless the     |
 |      |                                      | optional arguments fitsampled and    |
 |      |                                      | fitanalytic are used. All frequency  |
 |      |                                      | units are in Hz.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getmodeindex("materialname",       | Optional argument component can be   |
 |      | f,component)                         | 1, 2 or 3 to specify the x, y or z   |
 |      |                                      | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getmodeindex("materialname",       | Optional arguments to specify if     |
 |      | f,component, fitsampled,             | Sampled Materials or Analytic        |
 |      | fitanalytic, fmin, fmax)             | Materials should be fitted using     |
 |      |                                      | Lumerical's multi-coefficient model  |
 |      |                                      | (MCM), which is commonly used in     |
 |      |                                      | FDTD simulations. If either of these |
 |      |                                      | options are set to 1 (true) then you |
 |      |                                      | must supply a minimum and maximum    |
 |      |                                      | frequency for fitting. The MCM is    |
 |      |                                      | typically used in MODE Solutions for |
 |      |                                      |                                      |
 |      |                                      | •Sampled Materials when calculating  |
 |      |                                      | waveguide dispersion, and for        |
 |      |                                      |                                      |
 |      |                                      | •Analytic Materials only for the     |
 |      |                                      | purpose of using precisely the same  |
 |      |                                      | materials in both FDTD and MODE      |
 |      |                                      | simulations.                         |
 |      |                                      |                                      |
 |      |                                      | The default values are 0 (false) for |
 |      |                                      | fitsampled and fitanalytic.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getindex(), getfdtdindex(), addmaterial(), setmaterial()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getmodeindex.html
 |  
 |  getname(self, *args)
 |      The script command getname is used to get the name of a datset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getname(a)                   | Returns the name of the dataset of   |
 |      |                                      | the variable a.                      |
 |      +--------------------------------------+--------------------------------------+
 |      | print a.o.getname()                  | Returns the name of the dataset of   |
 |      |                                      | the variable a.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setname()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getname.html
 |  
 |  getnamed(self, *args)
 |      Gets a property from objects with a given name.
 |      
 |      If multiple objects are selected, and the values are different, the
 |      smallest value is returned. To be certain of the results, be sure that
 |      only one object is selected, or use the form of getnamed that allows a
 |      specific object to be selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getnamed("name")             | Returns a list of the properties of  |
 |      |                                      | the objects called name.             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnamed("name", "property") | The same as get, but acts on objects |
 |      |                                      | with a specific name, instead of     |
 |      |                                      | selected objects.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.getnamed("name", "property",   | Gets the property of the ith named   |
 |      | i)                                   | object. Use this to act on a series  |
 |      |                                      | of objects.                          |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnamed("groupname::name",  | The same as get, but acts on objects |
 |      | "property")                          | named "name" located in the group    |
 |      |                                      | "groupname", instead of selected     |
 |      |                                      | objects.                             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnamed("groupname::name",  | Gets the property of the ith object  |
 |      | "property")                          | named "name" located in the group    |
 |      |                                      | "groupname". Use this to act on a    |
 |      |                                      | series of objects.                   |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), getnumber(), getnamednumber(), set(), setnamed()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getnamed.html
 |  
 |  getnamednumber(self, *args)
 |      Gets the number of objects with a given name.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnamednumber( "name")      | The same as getnumber, but acts on   |
 |      |                                      | objects with a specific name,        |
 |      |                                      | instead of selected objects.         |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnamednumber(              | The same as getnumber, but acts on   |
 |      | "groupname::name")                   | all objects named "name" in the      |
 |      |                                      | group "groupname", instead of        |
 |      |                                      | selected objects.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), getnamed(), getnumber(), set(), setnamed()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getnamednumber.html
 |  
 |  getnumber(self, *args)
 |      Gets the number of objects that are selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnumber()                  | Returns the number of objects that   |
 |      |                                      | are selected;                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), getnamed(), getnamednumber(), set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getnumber.html
 |  
 |  getnumericalpermittivity(self, *args)
 |      This advanced function returns the permittivity of a material in the
 |      database as it will be used in an actual FDTD simulation, including the
 |      effects of a finite time step, dt. In FDTD, the relationship between the
 |      displacement field, D, and the electric field, E, is given by
 |      
 |      In the limit where dt tends to zero, we have
 |      
 |      where n(ω) is the refractive index returned by the script function
 |      getfdtdindex, or shown in the Materials Explorer. If you set dt to zero
 |      when calling this function, it will return exactly the same result as
 |      the square of getfdtdindex.
 |      
 |      The name of the function is a reminder that it returns the numerical
 |      permittivity, i.e., the ratio of D and E, which is different from the
 |      refractive index, i.e. the ratio of the speed of light in a vacuum to
 |      the phase velocity of light in the medium. To understand the
 |      relationship between them, we must consider the full, numerical
 |      dispersion relation between ω and k, which is given by
 |      
 |               
 |      
 |      In the limit where dt, dx, dy and dz tend to zero, it is easy to show
 |      that we have the expected result
 |      
 |      The spatial FDTD mesh and time step are generally chosen to obtain a
 |      desired level of simulation accuracy, essentially by ensuring that the
 |      arguments of the sine functions are sufficiently small that sin(x)~x and
 |      that the simulation is stable. For some materials, it may be desired to
 |      further reduce the value of the time step, dt, without modifying the
 |      spatial FDTD mesh, in order to obtain a higher level of accuracy for
 |      εr(ω,dt). This script function makes it possible to calculate, in
 |      advance, the value of dt required to obtain the desired accuracy for the
 |      permittivity.
 |      
 |      The results from getnumericalpermittivity will be different if the
 |      Broadband Fixed Angle Source Technique (BFAST) is used. Since the script
 |      function does not require a calculation being performed beforehand, the
 |      user needs to specify if the computation uses BFAST or not. See the
 |      BFAST page for more details about this technique.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getnumericalpermittivity (   | Returns the complex permittivity of  |
 |      | "materialname", f, fmin, fmax, dt)   | the material with the given name.    |
 |      |                                      | The permittivity is returned for the |
 |      |                                      | specified frequency f. This is       |
 |      |                                      | similar to getfdtdindex except for   |
 |      |                                      | the additional parameter dt. All     |
 |      |                                      | frequency units are in Hz.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getnumericalpermittivity("material | Optional argument component can be   |
 |      | name",                               | 1, 2 or 3 to specify the x, y or z   |
 |      | f,fmin, fmax, dt, component)         | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getnumericalpermittivity("material | Optional argument use\_bfast can be  |
 |      | name",                               | 0 or 1. It indicates whether the     |
 |      | f,fmin, fmax, dt, component,         | simulation is performed using the    |
 |      | use\_bfast)                          | Broadband Fixed Angle Source         |
 |      |                                      | Technique (BFAST) or not. The        |
 |      |                                      | default is 0.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getindex(), addmaterial(), setmaterial(), getfdtdindex()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getnumericalpermittivity.html
 |  
 |  getobjectlist(self, *args)
 |  
 |  getparameter(self, *args)
 |      Gets a parameter from an existing dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getparameter(R)              | Returns the names of all the         |
 |      |                                      | parameters in the dataset R.         |
 |      +--------------------------------------+--------------------------------------+
 |      | Parameter = R.o.getparameter("p")    | Retrieves the parameter p from the   |
 |      |                                      | existing dataset R. The result       |
 |      |                                      | "Parameter" is a scalar matrix.      |
 |      |                                      |                                      |
 |      |                                      | See Dataset introduction for details |
 |      |                                      | about dimensions of attribute data.  |
 |      +--------------------------------------+--------------------------------------+
 |      | Parameter = o.getparameter(R,"p")    | Retrieves the parameter p from the   |
 |      |                                      | existing dataset R. The result       |
 |      |                                      | "Parameter" is a scalar matrix.      |
 |      |                                      |                                      |
 |      |                                      | See Dataset introduction for details |
 |      |                                      | about dimensions of attribute data.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrixdataset(), rectilineardataset(), getresult(), getattribute(),
 |      visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getparameter.html
 |  
 |  getpath(self, *args)
 |      Gets the current path. By default, the current working directory and the
 |      script sub-directory of the installation (eg. C:\\Program
 |      Files\\Lumerical\\FDTD\\scripts) are in the path.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getpath()                    | Returns the current path as a        |
 |      |                                      | string.                              |
 |      |                                      |                                      |
 |      |                                      | Use ?getpath; to print it to the     |
 |      |                                      | screen.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addpath(), clearpath(), which(), pwd()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getpath.html
 |  
 |  getremotedata(self, *args)
 |      An interoperability command that will get a variable from the server
 |      workspace into the client workspace via an active session
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | y=o.getremotedata(s,'x')             | Creates variable y in the local      |
 |      |                                      | client workspace that has value of x |
 |      |                                      | in the server workspace via an       |
 |      |                                      | active session s                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      opensession(), closesession(), putremotedata(), evalremote()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getremotedata.html
 |  
 |  getresource(self, *args)
 |  
 |  getresult(self, *args)
 |      Get results from simulation objects. Results will be returned as
 |      datasets.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getresult("monitor\_name")   | Returns the names of all the results |
 |      |                                      | for the monitor. All the dataset and |
 |      |                                      | scalar matrix results will be        |
 |      |                                      | returned in this case.               |
 |      +--------------------------------------+--------------------------------------+
 |      | R = o.getresult("monitor\_name","T") | Returns the result T from the        |
 |      |                                      | monitor. T is a dataset.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      haveresult(), visualize(), getdata(), rectilineardataset(),
 |      matrixdataset(), getattribute(), addattribute(), splitstring()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getresult.html
 |  
 |  getsourceangle(self, *args)
 |      Returns the source angle theta as a function of frequency. Broadband
 |      sources inject fields that have a constant in-plane wavevector at all
 |      frequencies. This implies injection angle must change as a function of
 |      frequency. The in-plane wavevector is chosen such that the incidence
 |      angle at the center frequency of the simulation (fSIM) will match the
 |      source angle theta (thetaSIM) specified in the source properties. Higher
 |      frequencies will be injected at smaller angles, while lower frequencies
 |      will be injected at larger angles. This 'theta vs wavelength' plot in
 |      the beam source edit window shows the same function.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | theta = o.getsourceangle(            | Returns the source angle theta       |
 |      | "sourcename", f)                     | (degrees) as a function of           |
 |      |                                      | frequency. f is a vector of          |
 |      |                                      | frequencies (Hz).                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcepower()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getsourceangle.html
 |  
 |  getsurfaceconductivity(self, *args)
 |      For materials which use a surface conductivity material model (such as
 |      Graphene), this function returns the complex index of any material that
 |      is in the material database. The surface conductivity at the specified
 |      frequency is interpolated from the neighboring frequencies where the
 |      conductivity data is available. For a list of materials which use the
 |      surface conductivity model, see Material conductivity models.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getsurfaceconductivity(      | Returns the surface conductivity (in |
 |      | "materialname", f)                   | units of S) of the material with the |
 |      |                                      | given name. The surface conductivity |
 |      |                                      | is returned for the specified        |
 |      |                                      | frequency f where f is in units of   |
 |      |                                      | Hz.                                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getsurfaceconductivity(            | Optional argument component can be   |
 |      | "materialname", f, component)        | 1, 2 or 3 to specify the x, y or z   |
 |      |                                      | component for anisotropic materials. |
 |      |                                      | The default is 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmaterial(), setmaterial(), getfdtdsurfaceconductivity()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getsurfaceconductivity.html
 |  
 |  getsweep(self, *args)
 |      Gets a property from a parameter sweep/optimization/Monte
 |      Carlo/S-parameter sweep item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.getsweep("name", "property\_name") | Gets a property from a parameter     |
 |      |                                      | sweep/optimization/Monte             |
 |      |                                      | Carlo/S-parameter sweep item.        |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "property\_name" is the property     |
 |      |                                      | showed in the edit window.           |
 |      |                                      |                                      |
 |      |                                      | Returns the value of the property.   |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getsweep("name")             | Lists the properties that are        |
 |      |                                      | available from the analysis item.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      deletesweep(), copysweep(), pastesweep(), addsweep(), insertsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getsweep.html
 |  
 |  getsweepdata(self, *args)
 |      Gets raw data from a parameter sweep/optimization/Monte Carlo analysis.
 |      In most cases, it is more convenient to get a complete dataset with
 |      getsweepresult, rather than getting individual data elements with
 |      getsweepdata.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getsweepdata()               | Returns names of all sweep,          |
 |      |                                      | optimization, and Monte Carlo        |
 |      |                                      | analysis objects.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getsweepdata("sweep\_name")  | Returns all the names of the         |
 |      |                                      | available data which is stored in    |
 |      |                                      | the sweep, optimization, or Monte    |
 |      |                                      | Carlo analysis object.               |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getsweepdata("sweep\_name",  | Returns parameter sweep,             |
 |      | "data")                              | optimization, or Monte Carlo         |
 |      |                                      | analysis data.                       |
 |      |                                      |                                      |
 |      |                                      | The following data can be obtained   |
 |      |                                      | from an optimization:                |
 |      |                                      |                                      |
 |      |                                      | •fomTrend - Figure of merit as a     |
 |      |                                      | function of generation               |
 |      |                                      |                                      |
 |      |                                      | •fomHistory - Figure of merit        |
 |      |                                      | history (for each generation there   |
 |      |                                      | will be generation size number)      |
 |      |                                      |                                      |
 |      |                                      | •bestFom - Best figure of merit      |
 |      |                                      | obtained during sweep                |
 |      |                                      |                                      |
 |      |                                      | •bestParameter - Parameter which     |
 |      |                                      | corresponds to bestFom               |
 |      |                                      |                                      |
 |      |                                      | •paramHistory - Parameter history    |
 |      |                                      |                                      |
 |      |                                      | For a parameter sweep and Monte      |
 |      |                                      | Carlo analysis, this command returns |
 |      |                                      | both parameters and results.         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),
 |      savesweep(), loadsweep()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getsweepdata.html
 |  
 |  getsweepresult(self, *args)
 |      Gets the parameter parameter sweep/optimization/Monte Carlo/S-parameter
 |      sweep results in the form of a dataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.getsweepresult()             | Returns names of all sweep,          |
 |      |                                      | optimization, Monte Carlo, and       |
 |      |                                      | S-parameter sweep objects with       |
 |      |                                      | available results.                   |
 |      +--------------------------------------+--------------------------------------+
 |      | print                                | Returns names of the available       |
 |      | o.getsweepresult("sweep\_name")      | results from the specified sweep,    |
 |      |                                      | optimization,Monte Carlo, or         |
 |      |                                      | S-parameter sweep task.              |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Returns the specified result dataset |
 |      | o.getsweepresult("sweep\_name",      | from the specified parameter sweep,  |
 |      | "result")                            | optimization, Monte Carlo, or        |
 |      |                                      | S-parameter sweep task.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      runsweep(), havesweepresult(), getresult(), savedata(), getsweepdata(),
 |      savesweep(), loadsweep()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getsweepresult.html
 |  
 |  getv(self, varname)
 |      getv is a wrapper around getVar for the session
 |  
 |  getview(self, *args)
 |      This command allows the viewing properties of the Layout Editor to be
 |      retrieved.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | outstring = o.getview()              | Returns a list of the view           |
 |      |                                      | properties that can be set. The      |
 |      |                                      | command                              |
 |      |                                      |                                      |
 |      |                                      | ?getview;                            |
 |      |                                      |                                      |
 |      |                                      | will return                          |
 |      |                                      |                                      |
 |      |                                      | extent, zoom, theta, phi             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.getview("property")          | Returns the current value of any of  |
 |      |                                      | the view properties. For example,    |
 |      |                                      |                                      |
 |      |                                      | zoom\_level = getview("zoom");       |
 |      |                                      |                                      |
 |      |                                      | will return the current zoom setting |
 |      |                                      | of the perspective view relative to  |
 |      |                                      | the default level.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setview(), orbit(), redraw()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_getview.html
 |  
 |  getwizardinputs(self, *args)
 |  
 |  grating(self, *args)
 |      Returns the fraction of transmitted power to each physical grating
 |      orders for a given simulation. Results are normalized such that the sum
 |      of all the orders is equal to 1. To convert these values into fractions
 |      of the source power, multiply by the the transmission script function.
 |      
 |      3D simulations: Data is returned in a NxMxP matrix where N,M are the
 |      number of grating orders, and P is the number of frequency points.
 |      
 |      2D simulations: Data is returned in a NxP matrix where N is the number
 |      of grating orders, and P is the number of frequency points.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.grating("monitorname",f,     | Returns the strength of all physical |
 |      | index, direction )                   | grating orders from monitorname.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | monitorname    | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      |                |                |                |                |  Multithreaded |
 |      |                |                |                |                | projection to  |
 |      |                |                |                |                | allow multiple |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | points to be   |
 |      |                |                |                |                | calculated     |
 |      |                |                |                |                | simultaneously |
 |      |                |                |                |                | was introduced |
 |      |                |                |                |                | in R2016b.     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | direction of   | number         | Direction:     |
 |      |                |                | max power flow |                | this can be +1 |
 |      |                |                |                |                | or -1.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      The following table summarizes how to interpret the coordinate vector
 |      properties for various monitor orientations.
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Monitor            | Monitor surface    | 'N', 'ux',         | 'M', 'uy',         |
 |      | orientation        | normal             | 'gratingn',        | 'gratingm',        |
 |      |                    |                    | 'gratingperiod1',  | 'gratingperiod2',  |
 |      |                    |                    | 'gratingu1',       | 'gratingu2',       |
 |      |                    |                    | 'gratingbloch1',   | 'gratingbloch2'    |
 |      |                    |                    | correspond to      | correspond to      |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | XY plane           | Z                  | x axis             | y axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | XZ plane           | Y                  | x axis             | z axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | YZ plane           | X                  | y axis             | z axis             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      gratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),
 |      gratingangle(), gratingpolar(), gratingvector()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_grating.html
 |  
 |  gratingangle(self, *args)
 |      Returns the angle vector corresponding to the values returned by
 |      grating, in degrees, for 2D simulations. For 3D simulations, use
 |      gratingu1 and gratingu2.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingangle( "monitorname", | Same arguments as grating function.  |
 |      | ...)                                 |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingu1(), gratingu2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingangle.html
 |  
 |  gratingbloch1(self, *args)
 |      Returns the bloch vector (kin\_1 and kin\_2) used in the grating
 |      calculation. This corresponds to the bloch vector setting in the
 |      simulation region. gratingbloch1 gives the bloch vector for the first
 |      dimension (2D and 3D). gratingbloch2 gives the bloch vector for the 2nd
 |      dimension (3D only). See the grating function documentation for
 |      information on interpreting N, M, ux, uy for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingbloch1(               | Same arguments as grating function.  |
 |      | "monitorname", ...)                  |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingbloch2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingbloch1.html
 |  
 |  gratingbloch2(self, *args)
 |      Returns the bloch vector (kin\_1 and kin\_2) used in the grating
 |      calculation. This corresponds to the bloch vector setting in the
 |      simulation region. gratingbloch1 gives the bloch vector for the first
 |      dimension (2D and 3D). gratingbloch2 gives the bloch vector for the 2nd
 |      dimension (3D only). See the grating function documentation for
 |      information on interpreting N, M, ux, uy for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingbloch2(               | Same arguments as grating function.  |
 |      | "monitorname", ...)                  |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingbloch1()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingbloch2.html
 |  
 |  gratingm(self, *args)
 |      Returns a vector of the grating order numbers (i.e. zeroeth order, first
 |      order) corresponding to the data from the grating function. gratingn
 |      gives the order numbers for the first dimension of the data (2D and 3D).
 |      gratingm gives the order numbers for the 2nd dimension (3D only). See
 |      the grating function documentation for information on interpreting N, M,
 |      ux, uy for various monitor orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingm( "monitorname",...) | Same arguments as grating function.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingn()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingm.html
 |  
 |  gratingn(self, *args)
 |      Returns a vector of the grating order numbers (i.e. zeroeth order, first
 |      order) corresponding to the data from the grating function. gratingn
 |      gives the order numbers for the first dimension of the data (2D and 3D).
 |      gratingm gives the order numbers for the 2nd dimension (3D only). See
 |      the grating function documentation for information on interpreting N, M,
 |      ux, uy for various monitor orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingn( "monitorname",...) | Same arguments as grating function.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingn.html
 |  
 |  gratingordercount(self, *args)
 |      Returns the total number of supported grating numbers.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingordercount(           | Returns the total number of          |
 |      | "monitorname", f, index, direction)  | supported grating orders. Same       |
 |      |                                      | arguments as grating script command. |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingn(), gratingm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingordercount.html
 |  
 |  gratingperiod1(self, *args)
 |      Returns the grating period (i.e. the simulation span) used in the
 |      grating calculations. gratingperiod1 gives the grating period for the
 |      first dimension (2D and 3D). gratingperiod2 gives the period of the 2nd
 |      dimension (3D only). See the grating function documentation for
 |      information on interpreting N, M, ux, uy for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingperiod1(              | Same arguments as grating function.  |
 |      | "monitorname", ...)                  |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingperiod2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingperiod1.html
 |  
 |  gratingperiod2(self, *args)
 |      Returns the grating period (i.e. the simulation span) used in the
 |      grating calculations. gratingperiod1 gives the grating period for the
 |      first dimension (2D and 3D). gratingperiod2 gives the period of the 2nd
 |      dimension (3D only). See the grating function documentation for
 |      information on interpreting N, M, ux, uy for various monitor
 |      orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingperiod2(              | Same arguments as grating function.  |
 |      | "monitorname", ...)                  |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingperiod1()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingperiod2.html
 |  
 |  gratingpolar(self, *args)
 |      Returns the relative strength of all physical grating orders where
 |      vector field information is returned in spherical coordinates. This is
 |      useful when studying the polarization effects. The data is normalized
 |      such that the sum of \|Er\|^2+\|Etheta\|^2+ \|Ephi\|^2 over all grating
 |      orders equals 1. See the grating function documentation for information
 |      on interpreting N, M, ux, uy for various monitor orientations.
 |      
 |      3D simulations: Data is returned in a NxMxPx3 matrix where N,M are the
 |      number of grating orders. P is the number of frequency points. The third
 |      dimension is Er, Etheta, Ephi.
 |      
 |      2D simulations: Data is returned in a NxPx3 matrix where N is the number
 |      of grating orders. P is the number of frequency points. The second
 |      dimension is Er, Etheta, Ephi.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingpolar( "mname", f,    | Returns the strength of all physical |
 |      | index, direction)                    | grating orders from the monitor.     |
 |      |                                      | Output is in spherical coordinates.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | acan be a      |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | of a vector.   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | direction of   | number         | Direction:     |
 |      |                |                | max power flow |                | this can be +1 |
 |      |                |                |                |                | or -1.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      grating(), gratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),
 |      gratingangle(), gratingvector()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingpolar.html
 |  
 |  gratingu1(self, *args)
 |      Returns the grating order direction unit vectors (u1 and u2)
 |      corresponding to the data from the grating function from 3D simulation.
 |      For 2D simulations, use the gratingangle function. See the grating
 |      function documentation for information on interpreting N, M, ux, uy for
 |      various monitor orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingu1( "monitorname",    | Same arguments as grating function.  |
 |      | ...)                                 |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingu2(), gratingangle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingu1.html
 |  
 |  gratingu2(self, *args)
 |      Returns the grating order direction unit vectors (u1 and u2)
 |      corresponding to the data from the grating function from 3D simulation.
 |      For 2D simulations, use the gratingangle function. See the grating
 |      function documentation for information on interpreting N, M, ux, uy for
 |      various monitor orientations.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingu2( "monitorname",    | Same arguments as grating function.  |
 |      | ...)                                 |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      grating(), gratingu1(), gratingangle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingu2.html
 |  
 |  gratingvector(self, *args)
 |      Returns the relative strength of all physical grating orders where
 |      vector field information is returned in Cartesian coordinates. This is
 |      useful when studying the polarization effects. The data is normalized
 |      such that the sum of \|Ex\|^2+\|Ey\|^2+ \|Ez\|^2 over all grating orders
 |      equals 1. See the grating function documentation for information on
 |      interpreting N, M, ux, uy for various monitor orientations.
 |      
 |      3D simulations: Data is returned in a NxMxPx3 matrix where N,M are the
 |      number of grating orders. P is the number of frequency points. The third
 |      dimension is Ex, Ey, Ez.
 |      
 |      2D simulations: Data is returned in a NxPx3 matrix where N is the number
 |      of grating orders. P is the number of frequency points. The second
 |      dimension is Ex, Ey, Ez.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.gratingvector( "mname", f,   | Returns the strength of all physical |
 |      | index, direction)                    | grating orders from monitorname.     |
 |      |                                      | Output is in Cartesian coordinates.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | mname          | required       |                | string         | name of the    |
 |      |                |                |                |                | monitor from   |
 |      |                |                |                |                | which far      |
 |      |                |                |                |                | field is       |
 |      |                |                |                |                | calculated     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | optional       | 1              | vector         | Index of the   |
 |      |                |                |                |                | desired        |
 |      |                |                |                |                | frequency      |
 |      |                |                |                |                | point. This    |
 |      |                |                |                |                | can be a       |
 |      |                |                |                |                | single number  |
 |      |                |                |                |                | or a vector.   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | index          | optional       | value at       | number         | The index of   |
 |      |                |                | monitor center |                | the material   |
 |      |                |                |                |                | to use for the |
 |      |                |                |                |                | projection.    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | direction of   | number         | Direction:     |
 |      |                |                | max power flow |                | this can be +1 |
 |      |                |                |                |                | or -1.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      grating(), gratingn(), gratingperiod1(), gratingbloch1(), gratingu1(),
 |      gratingangle(), gratingpolar()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_gratingvector.html
 |  
 |  groupscope(self, *args)
 |      Changes the group scope. Script commands that add or modify simulation
 |      object use the groupscope property to know where to act within the
 |      object tree. For example, if you want to delete everything within a
 |      particular group, set the groupscope to that group (i.e.
 |      ::model::my\_group). If you want to delete all objects in the
 |      simulation, set the group scope the root level (i.e. ::model).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.groupscope()                 | returns the current group scope      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.groupscope("group\_name")          | changes the group scope              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      delete(), selectall(), select()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_groupscope.html
 |  
 |  h(self, *args)
 |      The Planck constant.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  h5info(self, *args)
 |      Returns information about the structure of an HDF5 file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | info = o.h5info("filename")          | Returns a struct "info" that         |
 |      |                                      | contains information about the       |
 |      |                                      | structure of the HDF5 file named     |
 |      |                                      | "filename."                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the HDF5 file.  |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      h5read(), h5readattr()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_h5info.html
 |  
 |  h5read(self, *args)
 |      Reads data from an HDF5 file. The command supports a large number of
 |      dataset types such as integer, float, double, string, compound, etc.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | data = o.h5read("filename",          | Reads data in the dataset named      |
 |      | "dataset\_name")                     | "dataset\_name" within the HDF5 file |
 |      |                                      | named "filename."                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the HDF5 file.  |
 |      +-------------------------+-------------------------+-------------------------+
 |      | datasetname             | string                  | name (path) of the      |
 |      |                         |                         | dataset to be read.     |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      h5info(), h5readattr()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_h5read.html
 |  
 |  h5readattr(self, *args)
 |      Reads attributes from an HDF5 file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | attr = o.h5readattr("filename",      | Reads the attribute named            |
 |      | "attr\_path", "attr\_name")          | "attr\_name" at the location         |
 |      |                                      | "attr\_path" within the HDF5 file    |
 |      |                                      | named "filename."                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +-------------------------+-------------------------+-------------------------+
 |      | Parameter               | Type                    | Description             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | filename                | string                  | name of the HDF5 file.  |
 |      +-------------------------+-------------------------+-------------------------+
 |      | attr\_path              | string                  | name (path) of the      |
 |      |                         |                         | dataset or group to     |
 |      |                         |                         | which the attribute     |
 |      |                         |                         | belongs to.             |
 |      +-------------------------+-------------------------+-------------------------+
 |      | attr\_name              | string                  | name of the attribute   |
 |      |                         |                         | to be read.             |
 |      +-------------------------+-------------------------+-------------------------+
 |      
 |      See Also
 |      
 |      h5info(), h5read()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_h5readattr.html
 |  
 |  h5write(self, *args)
 |  
 |  h5writeattr(self, *args)
 |  
 |  havedata(self, *args)
 |      Used to see a simulation object (such as a monitor) has any data. This
 |      command is very similar to haveresult, but is intended to be used with
 |      the getdata command, rather than getresult.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.havedata()                         | Returns 1 if any simulation objects  |
 |      |                                      | have raw data, and 0 if none have    |
 |      |                                      | any raw data.                        |
 |      +--------------------------------------+--------------------------------------+
 |      | o.havedata("name")                   | Returns 1 if "name" has raw data,    |
 |      |                                      | and 0 if it does not have any raw    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.havedata("name","data")            | Returns 1 if "name" has the raw data |
 |      |                                      | named "data", and 0 if it does not   |
 |      |                                      | have that data.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), haveresult(), getresult(), copydcard(), cleardcard(),
 |      workspace(), havesweepdata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_havedata.html
 |  
 |  haveproperty(self, *args)
 |      Returns the number of selected objects with a particular property.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.haveproperty("property")     | Returns the number of selected       |
 |      |                                      | objects with the specified property. |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), set()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_haveproperty.html
 |  
 |  haveresult(self, *args)
 |      Used to see a simulation object (such as a monitor) has any results.
 |      
 |      Note: This command is very similar to havedata, but is intended to be
 |      used with the getresult command, rather than getdata.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.haveresult()                       | Returns 1 if any simulation objects  |
 |      |                                      | currently have any results.          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.haveresult("name")                 | Returns 1 if "name" has any results, |
 |      |                                      | and 0 if it does not.                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.haveresult("name","data")          | Returns 1 if the "name" has a result |
 |      |                                      | named "data", and 0 if it does not.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getresult(), havedata(), getdata(), copydcard(), cleardcard(),
 |      workspace(), havesweepdata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_haveresult.html
 |  
 |  havesweepdata(self, *args)
 |      Checks whether a parameter sweep/optimization/Monte Carlo analysis has
 |      data. Similar to the script command havedata.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.havesweepdata()              | Returns 1 if any sweeps,             |
 |      |                                      | optimizations or Monte Carlo         |
 |      |                                      | analysis have data. Returns 0 if     |
 |      |                                      | data is not available.               |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.havesweepdata("name")        | Returns 1 if the specified sweep,    |
 |      |                                      | optimization or Monte Carlo analysis |
 |      |                                      | has data.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.havesweepdata("name","data") | Returns 1 if the specified sweep,    |
 |      |                                      | optimization or Monte Carlo analysis |
 |      |                                      | named "name" has the specified data  |
 |      |                                      | "data".                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      runsweep(), getsweepdata(), getdata(), havedata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_havesweepdata.html
 |  
 |  havesweepresult(self, *args)
 |      Checks whether a parameter parameter sweep/optimization/Monte
 |      Carlo/S-parameter sweep has results. Similar to haveresult.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.havesweepresult()            | Returns 1 if any sweeps or           |
 |      |                                      | optimizations, Monte Carlo analysis, |
 |      |                                      | or S-parameter sweeps have results.  |
 |      |                                      | Returns 0 if data is not available.  |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.havesweepresult("name")      | Returns 1 if the specified sweep,    |
 |      |                                      | optimization, Monte Carlo, or        |
 |      |                                      | S-parameter sweep has results.       |
 |      +--------------------------------------+--------------------------------------+
 |      | print                                | Returns 1 if the sweep,              |
 |      | o.havesweepresult("name","data")     | optimization, Monte Carlo, or        |
 |      |                                      | S-parameter sweep named "name" has   |
 |      |                                      | the specified result "data".         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      runsweep(), getsweepresult(), getresult(), haveresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_havesweepresult.html
 |  
 |  hbar(self, *args)
 |      The reduced Planck constant.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  help(self, *args)
 |      Opens the Lumerical Knowledge Base using the default web browser.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.help(argument=””)                  | Opens the Lumerical knowledge base   |
 |      |                                      | using the default web browser. If no |
 |      |                                      | arguments are provided the web       |
 |      |                                      | browser will open the page with the  |
 |      |                                      | alphabetical list of all script      |
 |      |                                      | commands, otherwise it will run a    |
 |      |                                      | search using the ‘argument’          |
 |      |                                      | parameter and open the page with the |
 |      |                                      | search results for the ‘argument’    |
 |      |                                      | parameter.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_help.html
 |  
 |  histc(self, *args)
 |      Creates a histogram plot.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.histc(y)                     | Creates a histogram plot of y.       |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.histc(y,n)                         | Creates a histogram plot of y, using |
 |      |                                      | n bins.                              |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.histc (y,n, "x label", "y label",  | Creates a histogram plot of y, using |
 |      | "title")                             | n bins, with axis labels and a       |
 |      |                                      | title.                               |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      histogram(), legend(), plot(), closeall(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_histc.html
 |  
 |  histogram(self, *args)
 |      Create a matrix containing the histogram count of a yield analysis
 |      result.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.histogram(y)                 | Returns a matrix containing the      |
 |      |                                      | histogram count of y.                |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.histogram(y,n)               | Returns a matrix containing the      |
 |      |                                      | histogram count of y, using n bins.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      histc()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_histogram.html
 |  
 |  history(self, *args)
 |  
 |  holdoff(self, *args)
 |      Switches off the holdon mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.holdoff()                          | Switches off the mode to hold        |
 |      |                                      | multiple mathematical functions on   |
 |      |                                      | the same figure.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), holdon()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_holdoff.html
 |  
 |  holdon(self, *args)
 |      Holds multiple functions on a single plot. Note that, only the labeling
 |      and plot options of the first plot are taken into account; a warning is
 |      reported in this case. The command setplot can be used instead.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.holdon()                           | Switches on the mode to hold         |
 |      |                                      | multiple mathematical functions on   |
 |      |                                      | the same figure.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), plotxy(), legend(), setplot(), log(), log10(), holdoff()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_holdon.html
 |  
 |  icht(self, *args)
 |      Takes the Chebyshev interpolation coefficients and returns the
 |      corresponding function samples.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.icht(coeff,option)             | Returns function samples from        |
 |      |                                      | Chebyshev interpolation coefficients |
 |      |                                      | coeff.                               |
 |      |                                      |                                      |
 |      |                                      | Option:                              |
 |      |                                      |                                      |
 |      |                                      | If option=1 is selected, the vector  |
 |      |                                      | x will not include the endpoints     |
 |      |                                      |                                      |
 |      |                                      | If option=2 is selected, the vector  |
 |      |                                      | x will include the endpoints         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      dcht(), chpts(), chebin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_icht.html
 |  
 |  imag(self, *args)
 |      Returns the imaginary part of a number or matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.imag(x)                      | Returns the imaginary part of x.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      real(), conj()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_imag.html
 |  
 |  image(self, *args)
 |      Creates 2D image plots.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.image(x,y,z)                 | Creates a 2D image plot of the data  |
 |      |                                      | in z. If x is of dimension N x 1 and |
 |      |                                      | y is of dimension M x 1, then z must |
 |      |                                      | be of dimension N x M. The figure    |
 |      |                                      | number is returned.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.image(x,y,z, "x label", "y label", | Creates a 2D image plot with axis    |
 |      | "title")                             | labels and a title. The figure       |
 |      |                                      | number is returned.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.image(x,y,z, "x label", "y label", | Creates a 2D image plot with axis    |
 |      | "title", "options")                  | labels and options, options can be   |
 |      |                                      |                                      |
 |      |                                      | •logplot                             |
 |      |                                      |                                      |
 |      |                                      | •polar                               |
 |      |                                      |                                      |
 |      |                                      | •red2blue                            |
 |      |                                      |                                      |
 |      |                                      | •any comma separated list of the     |
 |      |                                      | above                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), closeall(), setplot(), exportfigure(), visualize(),
 |      polarimage(), vectorplot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_image.html
 |  
 |  importbinary(self, *args)
 |      Import binary data (1s and 0s) over an entire volume from a file. The
 |      object will be present wherever the binary data is 1 and not when it is
 |      0. This command only applies to import primitives. The function returns
 |      1 if the data is successfully imported. Example script files showing how
 |      to use these functions can be found in the Online Help. See the User
 |      Guide, Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import binary data from filename in  |
 |      | o.importbinary(filename,file\_units, | three dimensional simulations. All   |
 |      | x0,y0,z0,reverse\_index\_order)      | arguments after the filename are     |
 |      |                                      | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | name of the file   |
 |      |                    |                    |                    | with binary data   |
 |      |                    |                    |                    | to import. May     |
 |      |                    |                    |                    | contain complete   |
 |      |                    |                    |                    | path to file, or   |
 |      |                    |                    |                    | path relative to   |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | file\_units        | "m"                | string             | The optional       |
 |      |                    |                    |                    | string argument    |
 |      |                    |                    |                    | file\_units can be |
 |      |                    |                    |                    | "m", "cm, "mm",    |
 |      |                    |                    |                    | "microns" or "nm"  |
 |      |                    |                    |                    | to specify the     |
 |      |                    |                    |                    | units in the file. |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x0                 | 0                  | number             | The optional       |
 |      |                    |                    |                    | arguments x0, y0   |
 |      |                    |                    |                    | and z0 specify the |
 |      |                    |                    |                    | data origin in the |
 |      |                    |                    |                    | global coordinates |
 |      |                    |                    |                    | of the Graphical   |
 |      |                    |                    |                    | Layout Editor. For |
 |      |                    |                    |                    | example, if you    |
 |      |                    |                    |                    | defined your       |
 |      |                    |                    |                    | volume with        |
 |      |                    |                    |                    | respect to a       |
 |      |                    |                    |                    | particular point   |
 |      |                    |                    |                    | in space, for      |
 |      |                    |                    |                    | example (0,0,-5)   |
 |      |                    |                    |                    | microns, then you  |
 |      |                    |                    |                    | should set z0 to   |
 |      |                    |                    |                    | -5 microns.        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | reverse\_index\_or | 0                  | number             | The optional       |
 |      | der                |                    |                    | argument           |
 |      |                    |                    |                    | reverse\_index\_or |
 |      |                    |                    |                    | der                |
 |      |                    |                    |                    | can be set to 1 to |
 |      |                    |                    |                    | reverse how the    |
 |      |                    |                    |                    | indices are        |
 |      |                    |                    |                    | interpreted in the |
 |      |                    |                    |                    | file. It is best   |
 |      |                    |                    |                    | to verify the      |
 |      |                    |                    |                    | correct setting    |
 |      |                    |                    |                    | with a graphical   |
 |      |                    |                    |                    | import before      |
 |      |                    |                    |                    | using the script   |
 |      |                    |                    |                    | command.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importbinary2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importbinary.html
 |  
 |  importbinary2(self, *args)
 |      Import binary data (1s and 0s) over an entire volume from script
 |      variables. The object will be present wherever the binary data is 1 and
 |      not when it is 0. This command only applies to import primitives. The
 |      function returns 1 if the data is successfully imported. Example script
 |      files showing how to use these functions can be found in the Online
 |      Help. See the User Guide, Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.importbinary2(binary,x,y,z)  | Import binary data from script       |
 |      |                                      | variables in three dimensional       |
 |      |                                      | simulations. All arguments are       |
 |      |                                      | required.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | binary             | required           | matrix             | The binary data    |
 |      |                    |                    |                    | This should be an  |
 |      |                    |                    |                    | NxMxP matrix in    |
 |      |                    |                    |                    | three dimensions   |
 |      |                    |                    |                    | and an NxM matrix  |
 |      |                    |                    |                    | in two dimensions. |
 |      |                    |                    |                    | It should have     |
 |      |                    |                    |                    | only values of 0   |
 |      |                    |                    |                    | or 1. If other     |
 |      |                    |                    |                    | values are         |
 |      |                    |                    |                    | present, all       |
 |      |                    |                    |                    | non-zero values    |
 |      |                    |                    |                    | will be            |
 |      |                    |                    |                    | interpreted as 1.  |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x                  | required           | matrix             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then x     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Nx1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if n   |
 |      |                    |                    |                    | is an NxM matrix   |
 |      |                    |                    |                    | then x should have |
 |      |                    |                    |                    | dimension Nx1.     |
 |      |                    |                    |                    | Values of x must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y                  | required           | matrix             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then y     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Mx1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if n   |
 |      |                    |                    |                    | is an NxM matrix   |
 |      |                    |                    |                    | then y should have |
 |      |                    |                    |                    | dimension Mx1.     |
 |      |                    |                    |                    | Values of y must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z                  | 1                  | number             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then z     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Px1.     |
 |      |                    |                    |                    | Values of z must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importbinary()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importbinary2.html
 |  
 |  importbinaryobfuscated(self, *args)
 |      This command is identical to importbinary but makes it possible to
 |      import data from a file that has been obfuscated. For details on how to
 |      obfuscate the data files, please see the Online Help in the User Guide,
 |      Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import binary data from filename in  |
 |      | o.importbinaryobfuscated(key,filenam | three dimensional simulations. All   |
 |      | e,file\_units,x0,y0,z0,reverse\_inde | arguments after the filename are     |
 |      | x\_order)                            | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | key                | required           | string             | The key that is    |
 |      |                    |                    |                    | used to decrypt    |
 |      |                    |                    |                    | the obfuscated     |
 |      |                    |                    |                    | file.              |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | name of the file   |
 |      |                    |                    |                    | with binary data   |
 |      |                    |                    |                    | to import. May     |
 |      |                    |                    |                    | contain complete   |
 |      |                    |                    |                    | path to file, or   |
 |      |                    |                    |                    | path relative to   |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | file\_units        | "m"                | string             | The optional       |
 |      |                    |                    |                    | string argument    |
 |      |                    |                    |                    | file\_units can be |
 |      |                    |                    |                    | "m", "cm, "mm",    |
 |      |                    |                    |                    | "microns" or "nm"  |
 |      |                    |                    |                    | to specify the     |
 |      |                    |                    |                    | units in the file. |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x0                 | 0                  | number             | The optional       |
 |      |                    |                    |                    | arguments x0, y0   |
 |      |                    |                    |                    | and z0 specify the |
 |      |                    |                    |                    | data origin in the |
 |      |                    |                    |                    | global coordinates |
 |      |                    |                    |                    | of the Graphical   |
 |      |                    |                    |                    | Layout Editor. For |
 |      |                    |                    |                    | example, if you    |
 |      |                    |                    |                    | defined your       |
 |      |                    |                    |                    | volume with        |
 |      |                    |                    |                    | respect to a       |
 |      |                    |                    |                    | particular point   |
 |      |                    |                    |                    | in space, for      |
 |      |                    |                    |                    | example (0,0,-5)   |
 |      |                    |                    |                    | microns, then you  |
 |      |                    |                    |                    | should set z0 to   |
 |      |                    |                    |                    | -5 microns.        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | reverse\_index\_or | 0                  | number             | The optional       |
 |      | der                |                    |                    | argument           |
 |      |                    |                    |                    | reverse\_index\_or |
 |      |                    |                    |                    | der                |
 |      |                    |                    |                    | can be set to 1 to |
 |      |                    |                    |                    | reverse how the    |
 |      |                    |                    |                    | indices are        |
 |      |                    |                    |                    | interpreted in the |
 |      |                    |                    |                    | file. It is best   |
 |      |                    |                    |                    | to verify the      |
 |      |                    |                    |                    | correct setting    |
 |      |                    |                    |                    | with a graphical   |
 |      |                    |                    |                    | import before      |
 |      |                    |                    |                    | using the script   |
 |      |                    |                    |                    | command.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importbinary()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importbinaryobfuscated.html
 |  
 |  importcsvlc(self, *args)
 |      This command adds a LC grid attribute or analysis group containing a
 |      liquid crystal structure and LC grid attribute with data imported from a
 |      specified csv (comma separated value) file without using the GUI import
 |      wizard. The arguments allow you to make the same choices that are
 |      available in the GUI. For more information about the GUI import wizard,
 |      see Import object - Liquid crystal from CSV.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.importcsvlc(filename)              | Import the csv file from the         |
 |      |                                      | specified filename. All arguments    |
 |      |                                      | after the filename are optional.     |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.importcsvlc(filename,option) | Import the csv file but specify if   |
 |      |                                      | it should be imported as a single    |
 |      |                                      | grid attribute or added to an        |
 |      |                                      | analysis group LC structure.         |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import the csv file and specify if   |
 |      | o.importcsvlc(filename,option,export | it was originally exported from the  |
 |      | ed\_from\_xz\_plane)                 | x-z plane. This option only applies  |
 |      |                                      | to 2D datasets but is critical to    |
 |      |                                      | get the orientation of the LC        |
 |      |                                      | structure correct when it is         |
 |      |                                      | imported into FDTD Solutions in the  |
 |      |                                      | x-y plane.                           |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import the csv file with additional  |
 |      | o.importcsvlc(filename,option,export | axis rotations.                      |
 |      | ed\_from\_xz\_plane,rotations)       |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | The name of the    |
 |      |                    |                    |                    | csv file to        |
 |      |                    |                    |                    | import. May        |
 |      |                    |                    |                    | contain complete   |
 |      |                    |                    |                    | path to file, or   |
 |      |                    |                    |                    | path relative to   |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | option             | true               | boolean            | When set to 1      |
 |      |                    |                    |                    | (true) the import  |
 |      |                    |                    |                    | will create an     |
 |      |                    |                    |                    | analysis group     |
 |      |                    |                    |                    | structure with the |
 |      |                    |                    |                    | grid attribute and |
 |      |                    |                    |                    | a rectangle, the   |
 |      |                    |                    |                    | same as when using |
 |      |                    |                    |                    | the graphical      |
 |      |                    |                    |                    | import. When set   |
 |      |                    |                    |                    | to 0 (false) it    |
 |      |                    |                    |                    | will import only   |
 |      |                    |                    |                    | the grid           |
 |      |                    |                    |                    | attribute. This    |
 |      |                    |                    |                    | argument is        |
 |      |                    |                    |                    | optional           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | exported\_from\_xz | true               | boolean            | Applies to 2D      |
 |      | \_plane            |                    |                    | datasets only.     |
 |      |                    |                    |                    | This indicates     |
 |      |                    |                    |                    | that the data was  |
 |      |                    |                    |                    | originally         |
 |      |                    |                    |                    | exported from the  |
 |      |                    |                    |                    | x-z plane and this |
 |      |                    |                    |                    | should be          |
 |      |                    |                    |                    | accounted for when |
 |      |                    |                    |                    | it is imported     |
 |      |                    |                    |                    | into the x-y       |
 |      |                    |                    |                    | plane.             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | rotations          | [0,0,0]            | matrix             | The optional       |
 |      |                    |                    |                    | argument allows    |
 |      |                    |                    |                    | you to specify 3   |
 |      |                    |                    |                    | rotations around   |
 |      |                    |                    |                    | the x, y and z     |
 |      |                    |                    |                    | axes respectively  |
 |      |                    |                    |                    | that are used      |
 |      |                    |                    |                    | exactly the same   |
 |      |                    |                    |                    | way as the         |
 |      |                    |                    |                    | graphical import   |
 |      |                    |                    |                    | wizard. The matrix |
 |      |                    |                    |                    | must have 3        |
 |      |                    |                    |                    | elements and each  |
 |      |                    |                    |                    | value will be      |
 |      |                    |                    |                    | rounded to the     |
 |      |                    |                    |                    | nearest 90         |
 |      |                    |                    |                    | degrees.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      addgridattribute(), cleardataset(), importdataset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importcsvlc.html
 |  
 |  importdataset(self, *args)
 |      This command can be used to import a rectilinear or unstructured dataset
 |      into a simulation object.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.importdataset("filename")          | Imports the dataset the specified    |
 |      |                                      | Matlab file from the current working |
 |      |                                      | directory. The object to load data   |
 |      |                                      | into must be selected.               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.importdataset(charge)              | Imports the data from the specified  |
 |      |                                      | dataset in the script workspace.     |
 |      |                                      | Dataset can be loaded from a Matlab  |
 |      |                                      | file to the script workspace using   |
 |      |                                      | the matlabload command. The object   |
 |      |                                      | to load data into must be selected.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      There are several cases where this command can be used
 |      
 |      1. Import data into a grid attribute (data could be from charge monitor
 |      or temperature monitor in DEVICE).
 |      
 |      2. Import doping data into a selected 'import doping' object.
 |      
 |      3. Import optical generation data into a selected 'import generation'
 |      object.
 |      
 |      4. Import field data to an import source (FDTD Solutions).
 |      
 |      5. Import field data to a port object (FDTD Solutions and MODE
 |      Solutions).
 |      
 |      The command can be used in two ways. The dataset can be saved inside a
 |      matlab (.mat) file which can be called to load the data or, the command
 |      can directly call the dataset from the script workspace to load it into
 |      the simulation object. In both cases, the dataset need to have the
 |      following properties:
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Data           | Simulation     | Dataset type   | Name for       | Name for       |
 |      |                | object         |                | variables      | variables      |
 |      |                |                |                | defining       | defining       |
 |      |                |                |                | coordinate     | actual data    |
 |      |                |                |                | data           |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Liquid crystal | 'lc            | Rectilinear    | x, y, z        | u              |
 |      | orientation (3 | orientation'   |                |                |                |
 |      | element unit   | grid attribute |                |                |                |
 |      | vector)        |                |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Rotation       | 'permittivity  | Rectilinear    | x, y, z        | theta, phi,    |
 |      | angles in      | rotation' grid |                |                | psi            |
 |      | radians        | attribute      |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Unitary        | 'matrix        | Rectilinear    | x, y, z        | U              |
 |      | transform      | transform'     |                |                |                |
 |      | matrix (3x3    | grid attribute |                |                |                |
 |      | tensor)        |                |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Charge density | 'np density'   | Unstructured   | x, y, z, C     | n, p           |
 |      |                | grid attribute |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Doping profile | 'Import        | Unstructured   | x, y, z, C     | N              |
 |      |                | doping' object | or rectangular | (unstructured) |                |
 |      |                |                |                | ;              |                |
 |      |                |                |                | x, y, z        |                |
 |      |                |                |                | (rectangular)  |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Optical        | Import         | Rectangular    | x, y, z        | G              |
 |      | generation     | generation'    |                |                |                |
 |      | rate           | object         |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Temperature in | 'temperature'  | Unstructured   | x, y, z,       | N              |
 |      | Kelvin         | grid attribute |                | elements       |                |
 |      |                |                |                |                |                |
 |      |                |                |                | (see Dataset   |                |
 |      |                |                |                | builder for    |                |
 |      |                |                |                | more           |                |
 |      |                |                |                | information)   |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | E and H field  | Import source  | Rectilinear    | x, y, z, f     | E (required),  |
 |      | data           | in FDTD        |                | (optional)     | H (optional)   |
 |      |                | Solutions      |                |                |                |
 |      |                |                |                | (see Sources - |                |
 |      |                |                |                | Import for     |                |
 |      |                |                |                | more           |                |
 |      |                |                |                | information)   |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | E and H field  | Port in FDTD   | Rectilinear    | x,y,z          | E, H           |
 |      | data           | Solutions or   |                |                |                |
 |      |                | MODE Solutions |                | (see Importing |                |
 |      |                | EME solver     |                | arbitrary      |                |
 |      |                | (note that     |                | source fields  |                |
 |      |                | only 1 mode    |                | for more       |                |
 |      |                | can be         |                | information)   |                |
 |      |                | imported at a  |                |                |                |
 |      |                | time for each  |                |                |                |
 |      |                | port)          |                |                |                |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      cleardataset(), matlabload(), addgridattribute(), unstructureddataset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importdataset.html
 |  
 |  importmaterialdb(self, *args)
 |  
 |  importnk(self, *args)
 |      Imports the refractive index (n and k) over an entire volume or surface
 |      from a file. This command only applies to import primitives. The
 |      function returns 1 if the data is successfully imported. It is possible
 |      to import anisotropic nk data.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import n (and k) data from filename  |
 |      | o.importnk(filename,file\_units,     | in three dimensional (or two         |
 |      | x0,y0,z0,reverse\_index\_order)      | dimensional) simulations. All        |
 |      |                                      | arguments after the filename are     |
 |      |                                      | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | name of the file   |
 |      |                    |                    |                    | with n (and k)     |
 |      |                    |                    |                    | data to import.    |
 |      |                    |                    |                    | May contain        |
 |      |                    |                    |                    | complete path to   |
 |      |                    |                    |                    | file, or path      |
 |      |                    |                    |                    | relative to        |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | file\_units        | "m"                | string             | The optional       |
 |      |                    |                    |                    | string argument    |
 |      |                    |                    |                    | file\_units can be |
 |      |                    |                    |                    | "m", "cm, "mm",    |
 |      |                    |                    |                    | "microns" or "nm"  |
 |      |                    |                    |                    | to specify the     |
 |      |                    |                    |                    | units in the file. |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x0                 | 0                  | number             | The optional       |
 |      |                    |                    |                    | arguments x0, y0   |
 |      |                    |                    |                    | and z0 specify the |
 |      |                    |                    |                    | data origin in the |
 |      |                    |                    |                    | global coordinates |
 |      |                    |                    |                    | of the Graphical   |
 |      |                    |                    |                    | Layout Editor. For |
 |      |                    |                    |                    | example, you can   |
 |      |                    |                    |                    | define your volume |
 |      |                    |                    |                    | with respect to a  |
 |      |                    |                    |                    | particular point   |
 |      |                    |                    |                    | in space, for      |
 |      |                    |                    |                    | example (0,0,-5)   |
 |      |                    |                    |                    | microns.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | reverse\_index\_or | 0                  | number             | The optional       |
 |      | der                |                    |                    | argument           |
 |      |                    |                    |                    | reverse\_index\_or |
 |      |                    |                    |                    | der                |
 |      |                    |                    |                    | can be set to 1 to |
 |      |                    |                    |                    | reverse how the    |
 |      |                    |                    |                    | indices are        |
 |      |                    |                    |                    | interpreted in the |
 |      |                    |                    |                    | file. It is best   |
 |      |                    |                    |                    | to verify the      |
 |      |                    |                    |                    | correct setting    |
 |      |                    |                    |                    | with a graphical   |
 |      |                    |                    |                    | import before      |
 |      |                    |                    |                    | using the script   |
 |      |                    |                    |                    | command.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importnk2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importnk.html
 |  
 |  importnk2(self, *args)
 |      Imports the refractive index (n and k) over an entire volume or surface
 |      from script variables. This command only applies to import primitives.
 |      The function returns 1 if the data is successfully imported. It is
 |      possible to import anisotropic nk data.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.importnk2(n,x,y,z)           | Import n (and k) data from script    |
 |      |                                      | variables in three dimensional       |
 |      |                                      | simulations, n can be complex. All   |
 |      |                                      | arguments are required. n must be of |
 |      |                                      | dimension NxMxP or NxMxPx3 with N >= |
 |      |                                      | 2, M >= 2 and P >= 2.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | n                  | required           | matrix             | The refractive     |
 |      |                    |                    |                    | index. If it is    |
 |      |                    |                    |                    | complex-valued,    |
 |      |                    |                    |                    | then the imaginary |
 |      |                    |                    |                    | part is            |
 |      |                    |                    |                    | interpreted as k.  |
 |      |                    |                    |                    | For isotropic      |
 |      |                    |                    |                    | material, this     |
 |      |                    |                    |                    | should be an NxMxP |
 |      |                    |                    |                    | matrix in three    |
 |      |                    |                    |                    | dimensions and an  |
 |      |                    |                    |                    | NxMx2 matrix in    |
 |      |                    |                    |                    | two dimensions.    |
 |      |                    |                    |                    | For anisotropic    |
 |      |                    |                    |                    | material, this     |
 |      |                    |                    |                    | should be an       |
 |      |                    |                    |                    | NxMxPx3 matrix in  |
 |      |                    |                    |                    | three dimensions   |
 |      |                    |                    |                    | and an NxMx2x3     |
 |      |                    |                    |                    | matrix in two      |
 |      |                    |                    |                    | dimensions.        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x                  | required           | matrix             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then x     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Nx1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if n   |
 |      |                    |                    |                    | is an NxMx2 matrix |
 |      |                    |                    |                    | then x should have |
 |      |                    |                    |                    | dimension Nx1.     |
 |      |                    |                    |                    | Values of x must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y                  | required           | matrix             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then y     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Mx1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if n   |
 |      |                    |                    |                    | is an NxMx2 matrix |
 |      |                    |                    |                    | then y should have |
 |      |                    |                    |                    | dimension Mx1.     |
 |      |                    |                    |                    | Values of y must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z                  | required           | matrix             | If n is an NxMxP   |
 |      |                    |                    |                    | matrix, then z     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Px1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if n   |
 |      |                    |                    |                    | is an NxMx2 matrix |
 |      |                    |                    |                    | then z should have |
 |      |                    |                    |                    | dimension 2x1.     |
 |      |                    |                    |                    | Values of z must   |
 |      |                    |                    |                    | be uniformly       |
 |      |                    |                    |                    | spaced.            |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importnk()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importnk2.html
 |  
 |  importnkobfuscated(self, *args)
 |      This command is identical to importnk but makes it possible to import
 |      data from a file that has been obfuscated. For details on how to
 |      obfuscate the data files, please see the Online Help in the User Guide,
 |      Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import n (and k) data from filename  |
 |      | o.importnkobfuscated(key,filename,fi | in three dimensional simulations.    |
 |      | le\_units,x0,y0,z0,reverse\_index\_o | All arguments after the filename are |
 |      | rder)                                | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | key                | required           | string             | The key that is    |
 |      |                    |                    |                    | used to decrypt    |
 |      |                    |                    |                    | the obfuscated     |
 |      |                    |                    |                    | file.              |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | name of the file   |
 |      |                    |                    |                    | with n (and k)     |
 |      |                    |                    |                    | data to import.    |
 |      |                    |                    |                    | May contain        |
 |      |                    |                    |                    | complete path to   |
 |      |                    |                    |                    | file, or path      |
 |      |                    |                    |                    | relative to        |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | file\_units        | "m"                | string             | The optional       |
 |      |                    |                    |                    | string argument    |
 |      |                    |                    |                    | file\_units can be |
 |      |                    |                    |                    | "m", "cm, "mm",    |
 |      |                    |                    |                    | "microns" or "nm"  |
 |      |                    |                    |                    | to specify the     |
 |      |                    |                    |                    | units in the file. |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x0                 | 0                  | number             | The optional       |
 |      |                    |                    |                    | arguments x0, y0   |
 |      |                    |                    |                    | and z0 specify the |
 |      |                    |                    |                    | data origin in the |
 |      |                    |                    |                    | global coordinates |
 |      |                    |                    |                    | of the Graphical   |
 |      |                    |                    |                    | Layout Editor. For |
 |      |                    |                    |                    | example, if you    |
 |      |                    |                    |                    | defined your       |
 |      |                    |                    |                    | volume with        |
 |      |                    |                    |                    | respect to a       |
 |      |                    |                    |                    | particular point   |
 |      |                    |                    |                    | in space, for      |
 |      |                    |                    |                    | example (0,0,-5)   |
 |      |                    |                    |                    | microns, then you  |
 |      |                    |                    |                    | should set z0 to   |
 |      |                    |                    |                    | -5 microns.        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | reverse\_index\_or | 0                  | number             | The optional       |
 |      | der                |                    |                    | argument           |
 |      |                    |                    |                    | reverse\_index\_or |
 |      |                    |                    |                    | der                |
 |      |                    |                    |                    | can be set to 1 to |
 |      |                    |                    |                    | reverse how the    |
 |      |                    |                    |                    | indices are        |
 |      |                    |                    |                    | interpreted in the |
 |      |                    |                    |                    | file. It is best   |
 |      |                    |                    |                    | to verify the      |
 |      |                    |                    |                    | correct setting    |
 |      |                    |                    |                    | with a graphical   |
 |      |                    |                    |                    | import before      |
 |      |                    |                    |                    | using the script   |
 |      |                    |                    |                    | command.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importnk(), importbinaryobfuscated()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importnkobfuscated.html
 |  
 |  importsurface(self, *args)
 |      Imports surface data. This command only applies to import primitives.
 |      The function returns 1 if the data is successfully imported. Example
 |      script files showing how to use these functions can be found in the
 |      Online Help. See the User Guide, Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import a surface from the file in    |
 |      | o.importsurface(filename,upper\_surf | the string filename in a three       |
 |      | ace,file\_units,x0,y0,z0,invertXY)   | dimensional simulation. All          |
 |      |                                      | arguments after filename are         |
 |      |                                      | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import a surface from the file in    |
 |      | o.importsurface(filename,upper\_surf | the string filename in a two         |
 |      | ace,file\_units,x0,y0,invertXY)      | dimensional simulation. All          |
 |      |                                      | arguments after filename are         |
 |      |                                      | optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | filename           | required           | string             | name of the file   |
 |      |                    |                    |                    | with surface data  |
 |      |                    |                    |                    | to import. May     |
 |      |                    |                    |                    | contain complete   |
 |      |                    |                    |                    | path to file, or   |
 |      |                    |                    |                    | path relative to   |
 |      |                    |                    |                    | current working    |
 |      |                    |                    |                    | directory          |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | upper\_surface     | 1                  | number             | This optional      |
 |      |                    |                    |                    | argument should be |
 |      |                    |                    |                    | 1 to import the    |
 |      |                    |                    |                    | upper surface and  |
 |      |                    |                    |                    | 0 to import the    |
 |      |                    |                    |                    | lower surface.     |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | file\_units        | "m"                | string             | The optional       |
 |      |                    |                    |                    | string argument    |
 |      |                    |                    |                    | file\_units can be |
 |      |                    |                    |                    | "m", "cm, "mm",    |
 |      |                    |                    |                    | "microns" or "nm"  |
 |      |                    |                    |                    | to specify the     |
 |      |                    |                    |                    | units in the file. |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x0                 | 0                  | number             | The optional       |
 |      |                    |                    |                    | arguments x0, y0   |
 |      |                    |                    |                    | and z0 specify the |
 |      |                    |                    |                    | data origin in the |
 |      |                    |                    |                    | global coordinates |
 |      |                    |                    |                    | of the Graphical   |
 |      |                    |                    |                    | Layout Editor. For |
 |      |                    |                    |                    | example, if you    |
 |      |                    |                    |                    | are importing a    |
 |      |                    |                    |                    | surface defined by |
 |      |                    |                    |                    | an AFM that is on  |
 |      |                    |                    |                    | a slab of Si that  |
 |      |                    |                    |                    | ranges from 0 to 2 |
 |      |                    |                    |                    | microns, you       |
 |      |                    |                    |                    | should set z0 to 2 |
 |      |                    |                    |                    | microns.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | z0                 | 0                  | number             |                    |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | invertXY           | 0                  | number             | The optional       |
 |      |                    |                    |                    | argument invertXY  |
 |      |                    |                    |                    | can be used to     |
 |      |                    |                    |                    | reverse how the x  |
 |      |                    |                    |                    | and y axes are     |
 |      |                    |                    |                    | read from the      |
 |      |                    |                    |                    | file.              |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importsurface2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importsurface.html
 |  
 |  importsurface2(self, *args)
 |      Imports surface data from script variables. This command only applies to
 |      import primitives. The function returns 1 if the data is successfully
 |      imported. Example script files showing how to use these functions can be
 |      found in the Online Help. See the User Guide, Structures section.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out =                                | Import a surface from the variables  |
 |      | o.importsurface2(Z,x,y,upper\_surfac | Z, x and y in three dimensional      |
 |      | e)                                   | simulations. The upper\_surface      |
 |      |                                      | argument is optional.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          | Default value      | Type               | Description        |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Z                  | required           | matrix             | The two            |
 |      |                    |                    |                    | dimensional matrix |
 |      |                    |                    |                    | that defines the   |
 |      |                    |                    |                    | surface.           |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | x                  | required           | matrix             | If Z is an NxM     |
 |      |                    |                    |                    | matrix, then x     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Nx1. For |
 |      |                    |                    |                    | two dimensional    |
 |      |                    |                    |                    | simulation, if Y   |
 |      |                    |                    |                    | is an Nx1 matrix   |
 |      |                    |                    |                    | then x should have |
 |      |                    |                    |                    | dimension Nx1.     |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | y                  | required           | matrix             | If Z is an NxM     |
 |      |                    |                    |                    | matrix, then y     |
 |      |                    |                    |                    | should have        |
 |      |                    |                    |                    | dimension Mx1.     |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | upper\_surface     | 1                  | number             | This optional      |
 |      |                    |                    |                    | argument should be |
 |      |                    |                    |                    | 1 to import the    |
 |      |                    |                    |                    | upper surface and  |
 |      |                    |                    |                    | 0 to import the    |
 |      |                    |                    |                    | lower surface.     |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Y                  | required           | matrix             | This argument      |
 |      |                    |                    |                    | should be an Nx1   |
 |      |                    |                    |                    | matrix that        |
 |      |                    |                    |                    | defines the        |
 |      |                    |                    |                    | surface for two    |
 |      |                    |                    |                    | dimensional        |
 |      |                    |                    |                    | simulations.       |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      importsurface()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_importsurface2.html
 |  
 |  inpoly(self, *args)
 |      Determines if a point is inside or outside a polygon. The function is
 |      vectorized so it can be used to create a mesh of a polygon.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.inpoly(V,x,y)                | Returns a matrix of the same         |
 |      |                                      | dimension of x with 1 if the         |
 |      |                                      | corresponding point is inside the    |
 |      |                                      | polygon and 0 otherwise. The         |
 |      |                                      | matrices x and y must have the same  |
 |      |                                      | length, or one of them can be a      |
 |      |                                      | singleton.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyarea(), centroid(), polyintersect(), polygrow(), polyand(),
 |      polyor(), polydiff(), polyxor(), meshgridx(), meshgridy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_inpoly.html
 |  
 |  insert(self, *args)
 |      Inserts an object into an existing cell in a lookup table.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out{1}.association = o.insert(       | Inserts an object into an existing   |
 |      | out{1}.association, association,     | cell.                                |
 |      | cell number )                        |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupopen(), lookupread(), lookupwrite(), lookupclose(),
 |      lookupreadtable(), lookupreadvalue(), lookupreadnportsparameter(),
 |      lookupappend()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_insert.html
 |  
 |  insertsweep(self, *args)
 |      Inserts a sweep/optimization/Monte Carlo item as a parent to an existing
 |      analysis item. The existing item becomes a child of the newly inserted
 |      sweep.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.insertsweep("name")                | Inserts a sweep/optimization/Monte   |
 |      |                                      | Carlo item as a child to a parent    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of the   |
 |      |                                      | existing analysis item.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      deletesweep(), copysweep(), pastesweep(), addsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_insertsweep.html
 |  
 |  integrate(self, *args)
 |      Returns the integral over the specified dimension of a matrix.
 |      
 |      Integrals over singleton dimensions will return zero (i.e. the area
 |      under a single point is zero). See integrate2 for an alternate behavior.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.integrate(A, n, x1)          | Integrates A over the nth dimension  |
 |      |                                      | in the matrix.                       |
 |      |                                      |                                      |
 |      |                                      | x1 is the corresponding position     |
 |      |                                      | vector for that dimension.           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.integrate(A, d, x1, x2, ...) | Calculates the integral of A over    |
 |      |                                      | the specified list of dimension(s)   |
 |      |                                      | d.                                   |
 |      |                                      |                                      |
 |      |                                      | d is a vector containing the         |
 |      |                                      | dimensions over which to integrate.  |
 |      |                                      |                                      |
 |      |                                      | xi are the position vectors          |
 |      |                                      | corresponding to the dimensions of A |
 |      |                                      | over which the integration is        |
 |      |                                      | occurring.                           |
 |      |                                      |                                      |
 |      |                                      | For example                          |
 |      |                                      |                                      |
 |      |                                      | •power = integrate(A,1:2,x,y) will   |
 |      |                                      | integrate A over an x-y surface.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      integrate2(), max(), min(), interp(), find(), pinch(), round(),
 |      getdata(), sum(), length()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_integrate.html
 |  
 |  integrate2(self, *args)
 |      Very similar to the standard integrate function, except that singleton
 |      dimensions are ignored.
 |      
 |      As described in the integrate function description, integrating over
 |      dimensions with a single value (singleton dimensions) returns zero
 |      because the area under a single point is zero. In some cases,
 |      particularly when you are not sure which dimensions are singleton, this
 |      behavior can cause difficulties. The integrate2 function automatically
 |      ignores all dimensions with a size of one, which avoids the problem of a
 |      zero valued integrals due to singleton dimensions.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.integrate2(A, 1, x1)         | Integrates A over the first          |
 |      |                                      | dimension in the matrix.             |
 |      |                                      |                                      |
 |      |                                      | x1 is the corresponding position     |
 |      |                                      | vector.                              |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.integrate2(A, d, x1, x2,     | Calculates the integral of A over    |
 |      | ...)                                 | the specified dimension(s) d.        |
 |      |                                      |                                      |
 |      |                                      | d is a vector containing the         |
 |      |                                      | dimensions over which to integrate.  |
 |      |                                      |                                      |
 |      |                                      | xi is the position vector            |
 |      |                                      | corresponding to the dimensions of A |
 |      |                                      | over which the integration is        |
 |      |                                      | occurring. If any of the xi vectors  |
 |      |                                      | only have 1 element, integrate       |
 |      |                                      | returns 0.                           |
 |      |                                      |                                      |
 |      |                                      | For example                          |
 |      |                                      |                                      |
 |      |                                      | •power = integrate2(A,1:2,x,y) will  |
 |      |                                      | integrate A over an x-y surface.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      integrate(), max(), min(), interp(), find(), pinch(), round(),
 |      getdata(), sum(), length()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_integrate2.html
 |  
 |  interp(self, *args)
 |      Calculates the linear interpolation of a given data set. The data can be
 |      complex.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.interp(Ex, xold, xnew)       | Does a linear interpolation of a 1D  |
 |      |                                      | data set.                            |
 |      |                                      |                                      |
 |      |                                      | •Ex is existing data                 |
 |      |                                      |                                      |
 |      |                                      | •xold specifies the points where Ex  |
 |      |                                      | is sampled                           |
 |      |                                      |                                      |
 |      |                                      | •xnew specifies new point to         |
 |      |                                      | interpolate the data.                |
 |      |                                      |                                      |
 |      |                                      | The xnew does not have to be within  |
 |      |                                      | the bounds of xold.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.interp(Ex, xold, yold, xnew, ynew) | The 2D version of interp.            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.interp(Ex, xold, yold, zold, xnew, | The 3D version of interp.            |
 |      | ynew, znew)                          |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.interp(Ex, xold, yold, zold, told, | The 4D version of interp.            |
 |      | xnew, ynew, znew, tnew)              |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      spline(), plotxy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_interp.html
 |  
 |  interptet(self, *args)
 |      Interpolates a data set in 3D from a tetrahedral to a rectangular grid.
 |      The data can be complex.
 |      
 |      This function is typically used for resampling data evaluated originally
 |      in a finite element mesh (monitor data from DEVICE, for example) to a
 |      new rectilinear grid.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.interptet(tet, vtx,u, xi,    | Does a tetrahedral to rectilinear    |
 |      | yi,zi,extrap\_val)                   | interpolation of a function and      |
 |      |                                      | outputs a PxQxR array of             |
 |      |                                      | interpolated values, f(xi,yi,zi).    |
 |      |                                      |                                      |
 |      |                                      | •u is existing data of the finite    |
 |      |                                      | element mesh (Nx1)                   |
 |      |                                      |                                      |
 |      |                                      | •xi, yi and zi are arrays with       |
 |      |                                      | length P, Q and R, respectively.     |
 |      |                                      | They specify the points where u is   |
 |      |                                      | to be sampled on the rectilinear     |
 |      |                                      | mesh, in the x-direction,            |
 |      |                                      | y-direction and z-direction          |
 |      |                                      |                                      |
 |      |                                      | •tet is the connectivity array, Mx4, |
 |      |                                      | containing row entries that index    |
 |      |                                      | the 4 vertices of M tetrahedra.      |
 |      |                                      | Taken from the simulation region     |
 |      |                                      |                                      |
 |      |                                      | •vtx is a matrix with the vertices   |
 |      |                                      | of the tetrahedral mesh, Nx3,        |
 |      |                                      | containing row entries of (x,y,z)    |
 |      |                                      | pairs. Taken from the simulation     |
 |      |                                      | region                               |
 |      |                                      |                                      |
 |      |                                      | •extrap\_val(optional): if an        |
 |      |                                      | interpolation point is outside of    |
 |      |                                      | the finite element mesh, the point   |
 |      |                                      | will be assigned this value (default |
 |      |                                      | is Inf)                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      quadtet(), quadtri(), interptri()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_interptet.html
 |  
 |  interptri(self, *args)
 |      Interpolates a data set from a triangular to a rectilinear grid. The
 |      data can be complex.
 |      
 |      This function is typically used for resampling data evaluated originally
 |      in a finite element mesh (monitor data from DEVICE, for example) to a
 |      new rectilinear grid.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.interptri(tri, vtx,u, xi,    | Does a triangular to rectilinear     |
 |      | yi,extrap\_val)                      | grid interpolation of a function and |
 |      |                                      | outputs a PxQ array of interpolated  |
 |      |                                      | values, z(xi,yi).                    |
 |      |                                      |                                      |
 |      |                                      | •u is existing data of the finite    |
 |      |                                      | element mesh (size Nx1)              |
 |      |                                      |                                      |
 |      |                                      | •xi and yi are arrays with length P  |
 |      |                                      | and Q, respectively. They specify    |
 |      |                                      | the points where u is to be sampled  |
 |      |                                      | on the rectilinear mesh, in the      |
 |      |                                      | x-direction and y-direction          |
 |      |                                      |                                      |
 |      |                                      | •tri is the connectivity array, Mx3, |
 |      |                                      | containing row entries that index    |
 |      |                                      | the three vertices of M triangles.   |
 |      |                                      | Taken from the simulation region     |
 |      |                                      |                                      |
 |      |                                      | •vtx is a matrix with the vertices   |
 |      |                                      | of the triangular mesh, Nx2,         |
 |      |                                      | containing row entries of (x,y)      |
 |      |                                      | pairs. Taken from the simulation     |
 |      |                                      | region                               |
 |      |                                      |                                      |
 |      |                                      | •extrap\_val(optional): if an        |
 |      |                                      | interpolation point is outside of    |
 |      |                                      | the finite element mesh, the point   |
 |      |                                      | will be assigned this value (default |
 |      |                                      | is Inf)                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      quadtri(), interptet(), quadtet()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_interptri.html
 |  
 |  inv(self, *args)
 |      Calculates the inverse of a matrix. The matrix has to be invertible.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.inv(A)                       | Returns the inverse of matrix A      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or(), eig(), mult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_inv.html
 |  
 |  invfft(self, *args)
 |      Computes the 1D, 2D or 3D inverse Fast Fourier Transform (FFT) of a
 |      matrix. In the 1D case the transform is given by
 |      
 |      The inverse FFT, FFT and all related functions have an option (option 1
 |      below) that controls the format used to store the frequency domain data.
 |      When working with spectral data it is not possible to switch between
 |      formats; there are no functions to convert between formats. This implies
 |      that if you use option1=n to produce a spectrum with fft, then you must
 |      also use option1=n if you want to pass that same spectral data to
 |      invfft. Similarly, if you use option1=n for fft, then you also need to
 |      use option1=n with fftw to get the proper frequency vector corresponding
 |      to your spectrum. invfft and fftk work in the same way.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.invfft(Ew)                   | Returns the inverse fast Fourier     |
 |      |                                      | transform of Ew. Ew can 1D,2D or 3D. |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.invfft(Ew,option1,option2)   | option1                              |
 |      |                                      |                                      |
 |      |                                      | This option controls the format used |
 |      |                                      | to store the frequency domain data.  |
 |      |                                      | The options are:                     |
 |      |                                      |                                      |
 |      |                                      | •1 : the standard FFT (zero          |
 |      |                                      | frequency is at the first element of |
 |      |                                      | the matrix). This is the default     |
 |      |                                      | option.                              |
 |      |                                      |                                      |
 |      |                                      | •2 : zero frequency is the first     |
 |      |                                      | element, but only data up to and     |
 |      |                                      | including the Nyquist frequency is   |
 |      |                                      | stored. This option is only useful   |
 |      |                                      | for real valued, 1D time/spatial     |
 |      |                                      | signals.                             |
 |      |                                      |                                      |
 |      |                                      | •3 : the FFT is shifted so zero      |
 |      |                                      | frequency is the central element of  |
 |      |                                      | the spectrum (more precisely, this   |
 |      |                                      | means the zero frequency point is at |
 |      |                                      | element floor(N/2 + 1), where N is   |
 |      |                                      | the number of samples).              |
 |      |                                      |                                      |
 |      |                                      | option2                              |
 |      |                                      |                                      |
 |      |                                      | This option is either a 1, 2 or 3    |
 |      |                                      | element vector depending on whether  |
 |      |                                      | Ex is 1D, 2D or 3D. For each         |
 |      |                                      | dimension, specify a value of either |
 |      |                                      | 0, 1 or N to obtain the desired 0    |
 |      |                                      | padding options.                     |
 |      |                                      |                                      |
 |      |                                      | •0: no zero padding                  |
 |      |                                      |                                      |
 |      |                                      | •1: zero padding up to the next      |
 |      |                                      | power of 2 longer than the length of |
 |      |                                      | Ex (default)                         |
 |      |                                      |                                      |
 |      |                                      | •N: zero pad up to length N if N >   |
 |      |                                      | length(Ex), where length of Ex is    |
 |      |                                      | the length in a specific dimension.  |
 |      |                                      | If N <= length(Ex), it will zero pad |
 |      |                                      | up to the next power of 2 longer     |
 |      |                                      | than the length of Ex. For the       |
 |      |                                      | fastest results, N should be a power |
 |      |                                      | of 2 and can be entered, for         |
 |      |                                      | example, as 2^12.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      fft(), fftw(), fftk()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_invfft.html
 |  
 |  iscell(self, *args)
 |      The script command checks whether input is a cell.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | value= o.iscell(input)               | Determine whether ‘input is a cell.  |
 |      |                                      | It returns logical 1 (true) if       |
 |      |                                      | ‘input’ is a cell and logical 0      |
 |      |                                      | (false) otherwise.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      issweep(), isstruct(), isfield()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_iscell.html
 |  
 |  isfield(self, *args)
 |      The script command checks whether input is a field.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | value= o.isfield(input, field)       | Determine whether ‘input contains    |
 |      |                                      | filed name ‘field’. It returns       |
 |      |                                      | logical 1 (true) if ‘input contains  |
 |      |                                      | ‘field’, and logical 0 (false)       |
 |      |                                      | otherwise.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      issweep(), isstruct(), iscell(), getfield(), setfield()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_isfield.html
 |  
 |  isstruct(self, *args)
 |      The script command checks whether input is a structure.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | value= o.isstruct(input)             | Determine whether ‘input’ is a       |
 |      |                                      | structure. It returns logical 1      |
 |      |                                      | (true) if ‘input’ is a structure and |
 |      |                                      | logical 0 (false) otherwise.         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      issweep(), iscell(), isfield()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_isstruct.html
 |  
 |  itkdbgetgeometry(self, *args)
 |  
 |  itkdbgetlibraryinfo(self, *args)
 |  
 |  itkdbgetparams(self, *args)
 |  
 |  jsonload(self, *args)
 |  
 |  jsonloads(self, *args)
 |  
 |  jsonread(self, *args)
 |  
 |  jsonreads(self, *args)
 |  
 |  jsonsave(self, *args)
 |  
 |  jsonsaves(self, *args)
 |  
 |  jsonvalidate(self, *args)
 |  
 |  jsonwrite(self, *args)
 |  
 |  jsonwrites(self, *args)
 |  
 |  killwizard(self, *args)
 |      This closes the wizard window. It should only be called after a wizard
 |      window has been created with the newwizard command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.killwizard()                       | This closes the wizard window.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizardpage()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_killwizard.html
 |  
 |  layoutmode(self, *args)
 |      This script command can be used to determine whether the simulation file
 |      is currently in LAYOUT mode or in ANALYSIS mode.  It is important to use
 |      this command to check the status of the project file once it is opened
 |      to avoid running into an error during the subsequent operations if the
 |      file is not in the desired mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.layoutmode()                 | Returns 1 if in LAYOUT mode (DESIGN  |
 |      |                                      | mode for INTERCONNECT), and 0 if in  |
 |      |                                      | ANALYSIS mode.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      switchtolayout(), designmode()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_layoutmode.html
 |  
 |  legend(self, *args)
 |      Adds a legend to a line plot.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.legend("o.legend1","o.legend2",... | Adds a legend to the selected        |
 |      | ,                                    | figure.                              |
 |      | "o.legendn")                         |                                      |
 |      |                                      | Parameters can be strings, or an     |
 |      |                                      | array (cell) of strings              |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      legend(), plot(), closeall(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_legend.html
 |  
 |  length(self, *args)
 |      Returns the number of elements in a matrix. If the argument is a string,
 |      it will return the length of the string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | y = o.length(x)                      | y the number of elements in a        |
 |      |                                      | matrix. For example, if x is an n by |
 |      |                                      | m matrix, y = length( x ) = n \* m.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      size(), transpose(), flip(), substring(), findstring(), replace(),
 |      replacestring()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_length.html
 |  
 |  linecross(self, *args)
 |      Determines if two line segments in the x-y plane cross each other.
 |      
 |      Line segments are contained in a single matrix of dimension 2\*Nx2,
 |      where there are N line segments. For example, the matrix L = [ 0,0; 1,1;
 |      0,0; 0,1]; represents two lines segments, one from (0,0) to (1,1) and
 |      another from (0,0) to (0,1).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.linecross(L1,L2)             | Returns an array of dimension N      |
 |      |                                      | which determines if the N line       |
 |      |                                      | segments in L1 and the N line        |
 |      |                                      | segments in L2 cross; the comparison |
 |      |                                      | is done pairwise as in the           |
 |      |                                      | lineintersect command. L1 and L2     |
 |      |                                      | must have the same size (2\*Nx2 for  |
 |      |                                      | N line segments). The elements in    |
 |      |                                      | the output array are 0 if the        |
 |      |                                      | segments do not cross, 1 if they     |
 |      |                                      | cross and 0.5 if the endpoint of one |
 |      |                                      | segment touches the other. Line      |
 |      |                                      | segments that are coincident and     |
 |      |                                      | touch also return a value of 0.5     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lineintersect(), finite()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_linecross.html
 |  
 |  lineintersect(self, *args)
 |      Returns the intersection points of two lines in the x-y plane. Note that
 |      the intersection point does not have to lie on the segments that define
 |      the lines. Use the command linecross to determine if the line segments
 |      actually cross .
 |      
 |      Line segments are contained in a single matrix of dimension 2\*Nx2,
 |      where there are N line segments. For example, the matrix L = [ 0,0; 1,1;
 |      0,0; 0,1]; represents two lines segments, one from (0,0) to (1,1) and
 |      another from (0,0) to (0,1).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lineintersect(L1,L2)         | Returns the intersection of the      |
 |      |                                      | lines represented by the segments in |
 |      |                                      | L1 and L2. L1 and L2 must have the   |
 |      |                                      | same size (2\*Nx2 for N line         |
 |      |                                      | segments). The result is a sequence  |
 |      |                                      | of x,y points in the form Nx2        |
 |      |                                      | representing the pairwise            |
 |      |                                      | intersections of the N lines. There  |
 |      |                                      | are special cases when               |
 |      |                                      |                                      |
 |      |                                      | •The lines are parallel. In this     |
 |      |                                      | case, the position returned is       |
 |      |                                      | (1.#INF,b). The presence of 1.#INF   |
 |      |                                      | can be tested using the script       |
 |      |                                      | command finite. The value of b is 0  |
 |      |                                      | if the lines coincide and 1 if they  |
 |      |                                      | do not.                              |
 |      |                                      |                                      |
 |      |                                      | •The points in a segment are         |
 |      |                                      | degenerate, i.e., the same. In this  |
 |      |                                      | case, the position returned is       |
 |      |                                      | (1.#INF,b), where b is 0, 1 or 2 if  |
 |      |                                      | both line segments are degenerate,   |
 |      |                                      | the first is degenerate, or the      |
 |      |                                      | second is degenerate, respectively.  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      linecross(), finite()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lineintersect.html
 |  
 |  linspace(self, *args)
 |      Creates a linearly spaced array.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.linspace(min,max,num)          | x will be an array with num          |
 |      |                                      | elements, linearly spaced between    |
 |      |                                      | min and max. If num is set to 1,     |
 |      |                                      | then x will be the average of min    |
 |      |                                      | and max.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_linspace.html
 |  
 |  listjobs(self, *args)
 |      Lists all the jobs in the job manager queue.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.listjobs("solver")                 | Lists all the jobs in the Job queue  |
 |      |                                      | for specified solver. If the solver  |
 |      |                                      | is not specified, all the jobs for   |
 |      |                                      | all solvers will be listed. No       |
 |      |                                      | argument is necessary for this       |
 |      |                                      | command in INTERCONNECT.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      run(), runsweep(), addjob(), clearjobs(), save(), load()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_listjobs.html
 |  
 |  load(self, *args)
 |      Loads an simulation project file. If the simulation has been run, the
 |      file will also contain the simulation results.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.load(filename)                     | Loads the simulation file.           |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      loaddata(), save(), savedata(), savedcard(), fileexists(), dir()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_load.html
 |  
 |  loaddata(self, *args)
 |      Loads workspace variables or d-card data from a Lumerical data file
 |      (ldf) file. If any current variables exist with the same names as those
 |      in the file, the current values will be overwritten.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.loaddata("filename")               | Reads data script variables or       |
 |      |                                      | d-card data from the specified file. |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      |                                      |                                      |
 |      |                                      | Note: This function will check for   |
 |      |                                      | the file in the current working      |
 |      |                                      | directory. If the file to read from  |
 |      |                                      | is in a different directory, either  |
 |      |                                      | specify the full path or change the  |
 |      |                                      | current working directory.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      savedata(), savedcard(), workspace(), load(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_loaddata.html
 |  
 |  loadgdsfile(self, *args)
 |      Loads a gds file to a layer builder object. The command only functions
 |      properly when a layer builder object is included in the simulation and
 |      is selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.loadgdsfile("gds\_example.gds")    | Loads the gds file named             |
 |      |                                      | "gds\_example" to the layer builder  |
 |      |                                      | object.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayerbuilder(), getlayerlist(), setlayer(), addlayer(),
 |      getcelllist(), getlayerlist(), setlayer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_loadgdsfile.html
 |  
 |  loadprocessfile(self, *args)
 |  
 |  loadsweep(self, *args)
 |      Loads the sweep object with the previously generated sweep result.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.loadsweep()                        | Loads previously generated sweep     |
 |      |                                      | result to all the sweep objects in   |
 |      |                                      | simulation.                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.loadsweep("name")                  | Loads previously generated sweep     |
 |      |                                      | result to the specified sweep        |
 |      |                                      | objects in simulation.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),
 |      savesweep()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_loadsweep.html
 |  
 |  log(self, *args)
 |      Calculates the natural logarithm function. Input can be complex or
 |      negative.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.log(x)                       | The natural logarithm of x. Input    |
 |      |                                      | can be complex or negative.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      log10(), exp()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_log.html
 |  
 |  log10(self, *args)
 |      Calculates the base 10 logarithm function. Input can be complex or
 |      negative.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.log10(x)                     | The base 10 logarithm of x. Input    |
 |      |                                      | can be complex or negative.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      log()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_log10.html
 |  
 |  lognrnd(self, *args)
 |      Generates a log-normal distributed random number. In order to reset the
 |      generator seed use the command randreset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lognrnd (mean,stddev)        | Generates a lognormal distributed    |
 |      |                                      | random number with user defined mean |
 |      |                                      | value and standard deviation.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      randreset(), randn(), histc()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lognrnd.html
 |  
 |  lookupappend(self, *args)
 |      Inserts a new association into an existing lookup table.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.lookupappend("filename", "table",  | Inserts a new association into an    |
 |      | design, "extracted")                 | existing lookup table.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupopen(), lookupread(), lookupwrite(), lookupclose(),
 |      lookupreadtable(), lookupreadvalue(), lookupreadnportsparameter(),
 |      insert()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lookupappend.html
 |  
 |  lookupclose(self, *args)
 |      Closes a lookup table file previously created with a lookupopen command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.lookupclose ("filename")           | Closes a file previously created     |
 |      |                                      | with a lookupopen command. This      |
 |      |                                      | command is required in order to      |
 |      |                                      | close any file open by lookupopen.   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupopen(), lookupread(), lookupwrite(), lookupreadtable(),
 |      lookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lookupclose.html
 |  
 |  lookupopen(self, *args)
 |      Opens a file to write a lookup table.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.lookupopen ("filename","table")    | Opens a file to write a lookup       |
 |      |                                      | table. This command is required      |
 |      |                                      | before any calls to lookupwrite can  |
 |      |                                      | be made.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupclose(), lookupread(), lookupwrite(), lookupreadtable(),
 |      lookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lookupopen.html
 |  
 |  lookupread(self, *args)
 |      Finds the nearest extracted value from a file containing a lookup table
 |      of design and extracted parameters.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lookupread                   | Finds the nearest extracted value    |
 |      | ("filename","table",design,"extracte | from a file containing a lookup      |
 |      | d")                                  | table of design and extracted        |
 |      |                                      | parameters. Parameter table is the   |
 |      |                                      | name of the lookup table located     |
 |      |                                      | inside the file, design is a cell    |
 |      |                                      | containing multiple structures that  |
 |      |                                      | define the design parameters to      |
 |      |                                      | search, and extracted is the name of |
 |      |                                      | the parameter to be extracted. It    |
 |      |                                      | will return the value located at the |
 |      |                                      | nearest design parameters.           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lookupread ("filename")      | Returns a script object, in this     |
 |      |                                      | case a cell array containing all the |
 |      |                                      | contents of the xml file.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupclose(), lookupopen(), lookupwrite(), lookupreadtable(),
 |      lookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lookupread.html
 |  
 |  lookupwrite(self, *args)
 |      Writes to a lookup table file with a design and an extracted parameter
 |      pair. This function must be called after lookupopen and before
 |      lookupclose.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lookupwrite                  | Writes to a lookup table with a      |
 |      | ("filename","table",design,          | design and an extracted parameter    |
 |      | "extracted")                         | pair. The design and extracted       |
 |      |                                      | parameters are cells that contain    |
 |      |                                      | multiple structures, allowing for    |
 |      |                                      | mapping between multiple design and  |
 |      |                                      | extracted parameters. This function  |
 |      |                                      | can be called multiple times, for    |
 |      |                                      | each call the design and extracted   |
 |      |                                      | parameters will be appended to the   |
 |      |                                      | current file. This function must be  |
 |      |                                      | called after lookupopen and before   |
 |      |                                      | lookupclose.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.lookupwrite ("filename")     | Takes a script object, in this case  |
 |      |                                      | a cell array containing all the      |
 |      |                                      | contents of the xml file, and save   |
 |      |                                      | it to a file.                        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      lookupclose(), lookupopen(), lookupread(), lookupreadtable(),
 |      lookupreadvalue(), lookupreadnportsparameter(), lookupappend(), insert()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lookupwrite.html
 |  
 |  lorentzpdf(self, *args)
 |  
 |  lower(self, *args)
 |      Converts all the characters in a string to lower case.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.lower(string)                      | Converts a string to lower case.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      splitstring(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_lower.html
 |  
 |  ls(self, *args)
 |      Lists files in a directory. Files other than Lumerical project files are
 |      also listed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = dir; out = o.ls()              | The output is a string.              |
 |      |                                      |                                      |
 |      |                                      | Use ?dir; to write the value to the  |
 |      |                                      | screen.                              |
 |      +--------------------------------------+--------------------------------------+
 |      | out = dir("directory") out =         | Lists the files in the specified     |
 |      | o.ls("directory")                    | directory. For example,              |
 |      |                                      | ?ls("C:\\Downloads");                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      load(), splitstring()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_ls.html
 |  
 |  lswmexport(self, *args)
 |  
 |  mapfind(self, *args)
 |      Returns the nearest value from a file containing a map of values. It
 |      returns the string value located at the specified nearest point.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mapfind (filename,x,y)       | Find the nearest value from a file   |
 |      |                                      | containing a map of values. It       |
 |      |                                      | returns the string value located at  |
 |      |                                      | the nearest point (x,y).             |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mapfind (filename,x,y,z)     | Find the nearest value from a file   |
 |      |                                      | containing a map of values. It       |
 |      |                                      | returns the string value located at  |
 |      |                                      | the nearest point (x,y,z).           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mapfind (filename,x,y,z,w)   | Find the nearest value from a file   |
 |      |                                      | containing a map of values. It       |
 |      |                                      | returns the string value located at  |
 |      |                                      | the nearest point (x,y,z,w).         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      read(), readdata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mapfind.html
 |  
 |  materialexists(self, *args)
 |      Returns a boolean indicating whether or not a material exists in the
 |      material database.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.materialexists("materialname")     | Returns 1 if the material named      |
 |      |                                      | "materialname" is present in the     |
 |      |                                      | material database. Otherwise return  |
 |      |                                      | 0.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmaterial(), deletematerial(), setmaterial(), getmaterial(),
 |      copymaterial()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_materialexists.html
 |  
 |  matlab(self, *args)
 |      Runs a MATLAB command from the Lumerical script prompt. This gives
 |      access to extended mathematical and visualization functionality from the
 |      Lumerical script environment.  If the MATLAB script integration is not
 |      enabled, this function will return an error.
 |      
 |      The first time a MATLAB function (matlab, matlabget or matlabput) is
 |      called, a MATLAB session will be started and a connection will be
 |      established with the Lumerical scripting environment. Once this
 |      connection is established, MATLAB commands can be run using the matlab
 |      function. It is important to understand that the MATLAB and the
 |      Lumerical script variable workspaces are completely separate and
 |      independent. A MATLAB command cannot act on a variable defined in the
 |      Lumerical workspace, and vice-versa. Variables must be passed between
 |      the workspaces using the matlabget and matlabput functions. At any time
 |      you may examine the MATLAB workspace or interact with the MATLAB
 |      environment by typing commands at the MATLAB script prompt. The working
 |      directory of the MATLAB instance is always set to match the working
 |      directory of the Lumerical application.
 |      
 |      The output from the MATLAB commands will be printed at the Lumerical
 |      script prompt. One limitation of the matlab function is that no error
 |      reporting is provided to either the Lumerical script prompt or the
 |      MATLAB prompt. MATLAB commands should be tested by typing them directly
 |      into the MATLAB prompt before they are called from a Lumerical script.
 |      The output buffer length is roughly 1e5 characters. Additional output
 |      will be truncated.
 |      
 |      When you have a long sequence of MATLAB commands, you may find it more
 |      convenient to save them in a MATLAB m-file. Then, you can simply call
 |      the m-file by running a single command.
 |      
 |      +--------------------------------------------------------------------------+
 |      | See MATLAB integration setup for installation and configuration          |
 |      | instructions.  Additional tips (particularly for plotting data in        |
 |      | Matlab) can be found in the MATLAB section of the online help.           |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlab("command")                  | command: a string containing one or  |
 |      |                                      | more valid MATLAB commands.          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlab(" command\_1 command\_2 ")  | Multi-line strings can be used in    |
 |      |                                      | script files to contain a block of   |
 |      |                                      | MATLAB commands. Multi-line strings  |
 |      |                                      | are not supported at the script      |
 |      |                                      | command prompt.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matlabget(), matlabput()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matlab.html
 |  
 |  matlabget(self, *args)
 |      Copies a variable from the MATLAB workspace to the script variable
 |      workspace. The resulting variable will have the same name as the MATLAB
 |      variable, and will overwrite any existing variable with the same name.
 |      If the variable does not exist in MATLAB, the command will return an
 |      error. For more information, please see the matlab command description.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Matlab script integration must be enabled in order to use this     |
 |      | command. For more information on how to set this up see the Matlab       |
 |      | script integration page.                                                 |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabget(var1, var2,...varN)      | The arguments to this command are    |
 |      |                                      | one or more variable names that      |
 |      |                                      | refer to variables in the MATLAB     |
 |      |                                      | workspace.                           |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matlab(), matlabput()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matlabget.html
 |  
 |  matlabload(self, *args)
 |      Load Matlab .mat data into workspace
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabload("filename")             | Load to the workspace the data of    |
 |      |                                      | the specified .mat file.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matlabput(), matlabsavelegacy(), matlabsave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matlabload.html
 |  
 |  matlabput(self, *args)
 |      Copies a variable from Lumerical's Script Workspace to the MATLAB
 |      workspace. The resulting variable in the MATLAB workspace will have the
 |      same name as in Lumerical, and will overwrite any existing variable with
 |      the same name. If the variable does not exist in the Lumerical
 |      workspace, the command will return an error.
 |      
 |      For more information, please see the matlab command description.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabput(var1, var2,...varN)      | The arguments to this command are    |
 |      |                                      | one or more variable names that      |
 |      |                                      | exist in the Lumerical variable      |
 |      |                                      | workspace.                           |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matlab(), matlabget()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matlabput.html
 |  
 |  matlabsave(self, *args)
 |      Save workspace data to Matlab .mat data files.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabsave("")                     | Save all workspace variables to a    |
 |      |                                      | .mat file that has the same name as  |
 |      |                                      | the simulation file.                 |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabsave("filename")             | Saves all workspace variables to the |
 |      |                                      | specified .mat file.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matlabsave("filename", var1, ...,  | Saves the specified workspace        |
 |      | varN)                                | variables to the .mat file.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matlabput(), matlabsavelegacy(), matlabload(), vtksave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matlabsave.html
 |  
 |  matrix(self, *args)
 |      Initialize a matrix. All elements are set to zero.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.matrix(i,j,k,....)             | Initializes an i x j x k x ....      |
 |      |                                      | matrix.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      linspace()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matrix.html
 |  
 |  matrixdataset(self, *args)
 |      Creates an empty matrix dataset. Matrix datasets are used for data
 |      (attributes and parameters) that don't have any spatial dependence (i.e.
 |      Reflection vs frequency). For datasets that do have x/y/z spatial
 |      coordinates (i.e. electric fields), use rectilineardataset or
 |      unstructureddataset.
 |      
 |      Matrix datasets can be parameterized, and can contain an arbitrary
 |      number of attributes (see addattribute) and parameters (see
 |      addparameter).
 |      
 |      See Dataset introduction for more information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matrixdataset()                    | Creates an empty dataset.            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.matrixdataset("name")              | Creates an empty dataset with the    |
 |      |                                      | name "name".                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), addattribute(), addparameter(), visualize(),
 |      getparameter(), getattribute(), matrixdataset(), struct()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_matrixdataset.html
 |  
 |  max(self, *args)
 |      Returns the maximum value in a matrix. For complex numbers, only the
 |      real part is considered.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.max(x)                       | The maximum value in matrix x.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      min(), abs(), mean(), amax(), amin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_max.html
 |  
 |  mean(self, *args)
 |      Returns the mean value in a matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mean(a)                      | The mean value of the matrix a is    |
 |      |                                      | returned.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      max(), min(), abs(), sum()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mean.html
 |  
 |  median(self, *args)
 |  
 |  meshgrid3dx(self, *args)
 |      Create a 3D meshgrid in the x direction
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgrid3dx(x,y,z)           | The 3D version of meshgridx and      |
 |      |                                      | meshgridy.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      meshgridx(), meshgridy(), meshgrid3dy(), meshgrid3dz()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgrid3dx.html
 |  
 |  meshgrid3dy(self, *args)
 |      Create a 3D meshgrid in the y direction
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgrid3dy(x,y,z)           | The 3D version of meshgridx and      |
 |      |                                      | meshgridy.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      meshgridx(), meshgridy(), meshgrid3dx(), meshgrid3dz()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgrid3dy.html
 |  
 |  meshgrid3dz(self, *args)
 |      Create a 3D meshgrid in the z direction
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgrid3dz(x,y,z)           | The 3D version of meshgridx and      |
 |      |                                      | meshgridy.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      meshgridx(), meshgridy(), meshgrid3dx(), meshgrid3dy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgrid3dz.html
 |  
 |  meshgrid4d(self, *args)
 |      Create a 4D meshgrid in any direction.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgrid4d(dim, x1, x2, x3,  | The 4D meshgrid function.            |
 |      | x4)                                  |                                      |
 |      |                                      | dim specifies the dimension along    |
 |      |                                      | which to create the grid             |
 |      |                                      |                                      |
 |      |                                      | x1,x2,x3,x4 are the position vectors |
 |      |                                      | in each direction                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      meshgridx(), meshgridy(), meshgrid3dy(), meshgrid3dz()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgrid4d.html
 |  
 |  meshgridx(self, *args)
 |      Create a 2D meshgrid in the x direction
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgridx(x,y)               | If x and y are single column (or     |
 |      |                                      | single row vectors), of dimension    |
 |      |                                      | nX1 and mX1 respectively, the        |
 |      |                                      | command                              |
 |      |                                      |                                      |
 |      |                                      | •X = meshgridx(x,y);                 |
 |      |                                      |                                      |
 |      |                                      | Will create a 2D matrix of dimension |
 |      |                                      | nXm where X(i,j)=x(i).               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      image(), meshgridy(), meshgrid3dx()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgridx.html
 |  
 |  meshgridy(self, *args)
 |      Create a 2D meshgrid in the y direction
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.meshgridy(x,y)               | If x and y are single column (or     |
 |      |                                      | single row vectors), of dimension    |
 |      |                                      | nX1 and mX1 respectively, the        |
 |      |                                      | command                              |
 |      |                                      |                                      |
 |      |                                      | •Y = meshgridy(x,y);                 |
 |      |                                      |                                      |
 |      |                                      | Will create a 2D matrix of dimension |
 |      |                                      | nXm where Y(i,j)=y(j).               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      image(), meshgridx(), meshgrid3dx()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_meshgridy.html
 |  
 |  message(self, *args)
 |      Creates a message window that displays some text. The user must hit
 |      Enter, or click the OK button to continue.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.message("text")                    | Creates a window that displays text. |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_message.html
 |  
 |  mie3d(self, *args)
 |      The function mie3d can be used to calculate the scattering, absorption,
 |      and extinction efficiencies of a spherical particle made of any
 |      (non-magnetic) material embedded in any ambient dielectric material. The
 |      efficiencies are simply the cross sections normalized to the geometric
 |      cross section of the particle (pi\*r^2).
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note:                                                                    |
 |      |                                                                          |
 |      | This script command was introduced in the 2017a R5 release.              |
 |      +--------------------------------------------------------------------------+
 |      
 |      References:
 |      ~~~~~~~~~~~
 |      
 |      [1] Bohren C.F. and D.R. Huffman, “Absorption and Scattering of Light by
 |      Small Particles”, John Wiley, New York, NY, 1983.
 |      
 |      [2] Documentation of Mätzler C. “MATLAB Functions for Mie Scattering and
 |      Absorption, Version 2”, IAP Res. Rep. No. 2002-11, August, 2002.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | Q = o.mie3d(m,x)                     | The result Q is a struct which       |
 |      |                                      | contains quantities Qext, Qabs and   |
 |      |                                      | Qscat (Qext = Qabs+Qscat). These     |
 |      |                                      | will have the same length as x.      |
 |      |                                      |                                      |
 |      |                                      | The arguments are:                   |
 |      |                                      |                                      |
 |      |                                      | m: the ratio of the refractive index |
 |      |                                      | of the sphere to the refractive      |
 |      |                                      | index of the ambient dielectric      |
 |      |                                      | medium. This quantity may be         |
 |      |                                      | complex-valued because the           |
 |      |                                      | refractive index of the sphere may   |
 |      |                                      | be complex. This quantity should     |
 |      |                                      | either have a singleton value, or be |
 |      |                                      | the same length of x for dispersive  |
 |      |                                      | media.                               |
 |      |                                      |                                      |
 |      |                                      | x: the size parameter which is       |
 |      |                                      | defined as 2\*pi\*r/lambda0\*n1      |
 |      |                                      | where lambda0 is the free space      |
 |      |                                      | wavelength, r is the sphere radius,  |
 |      |                                      | and n1 is the real-valued refractive |
 |      |                                      | index of the ambient medium.         |
 |      +--------------------------------------+--------------------------------------+
 |      | Q = o.mie3d(m,x,nmax)                | nmax : the maximum number of orders  |
 |      |                                      | to calculate for the mie             |
 |      |                                      | coefficients. The default value is   |
 |      |                                      | 0, and in this case the nmax =       |
 |      |                                      | ceil(x+4\*x^(1/3))+2. There is       |
 |      |                                      | typically no need to modify the      |
 |      |                                      | default value.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      mie3ds12()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mie3d.html
 |  
 |  mie3ds12(self, *args)
 |      The function mie3ds12 can be used to calculate the scattered far field
 |      of any (non-magnetic) material embedded in any ambient dielectric
 |      material. The function returns the scattering functions S1 and S2. The
 |      scattered far field can be calculated by
 |      
 |      Where E\|\| is the field in the scattering plane and E⊥ is the field
 |      orthogonal to the scattering plane. The scattering plane is defined by
 |      the incident and scattered directions. The angle θ is the angle within
 |      the scattering plane (with respect to the incident angle) and the angle
 |      φ is the angle between the incident electric field and the scattering
 |      plane.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note:                                                                    |
 |      |                                                                          |
 |      | This script command was introduced in the 2017a R5 release.              |
 |      +--------------------------------------------------------------------------+
 |      
 |      References:
 |      ~~~~~~~~~~~
 |      
 |      [1] Bohren C.F. and D.R. Huffman, “Absorption and Scattering of Light by
 |      Small Particles”, John Wiley, New York, NY, 1983.
 |      
 |      [2] Documentation of Mätzler C. “MATLAB Functions for Mie Scattering and
 |      Absorption, Version 2”, IAP Res. Rep. No. 2002-11, August, 2002.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | S = o.mie3ds12(u,m,x)                | The result Q is a struct which       |
 |      |                                      | contains quantities S1, S2 which has |
 |      |                                      | dimensions NxM where N is the length |
 |      |                                      | of u and M is the length of x.       |
 |      |                                      |                                      |
 |      |                                      | The arguments are:                   |
 |      |                                      |                                      |
 |      |                                      | u: this is cos(q)                    |
 |      |                                      |                                      |
 |      |                                      | m: the ratio of the refractive index |
 |      |                                      | of the sphere to the refractive      |
 |      |                                      | index of the ambient dielectric      |
 |      |                                      | medium. This quantity may be         |
 |      |                                      | complex-valued because the           |
 |      |                                      | refractive index of the sphere may   |
 |      |                                      | be complex. This quantity should     |
 |      |                                      | either have a singleton value, or be |
 |      |                                      | the same length of x for dispersive  |
 |      |                                      | media.                               |
 |      |                                      |                                      |
 |      |                                      | x: the size parameter which is       |
 |      |                                      | defined as 2\*pi\*r/lambda0\*n1      |
 |      |                                      | where lambda0 is the free space      |
 |      |                                      | wavelength, r is the sphere radius   |
 |      |                                      | and n1 is the real-valued refractive |
 |      |                                      | index of the ambient medium.         |
 |      +--------------------------------------+--------------------------------------+
 |      | S = o.mie3ds12(u,m,x,nmax)           | nmax : the maximum number of orders  |
 |      |                                      | to calculate for the mie             |
 |      |                                      | coefficients. The default value is   |
 |      |                                      | 0, and in this case the nmax =       |
 |      |                                      | ceil(x+4\*x^(1/3))+2. There is       |
 |      |                                      | typically no need to modify the      |
 |      |                                      | default value.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      mie3d()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mie3ds12.html
 |  
 |  min(self, *args)
 |      Returns the minimum value in a matrix. For complex numbers, only the
 |      real part is considered.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.min(x)                       | The minimum value in matrix x.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      max(), abs(), mean(), amax(), amin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_min.html
 |  
 |  mod(self, *args)
 |      Finds the modulus after division.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mod(x,y)                     | Returns x - n\*y where n =           |
 |      |                                      | floor(x/y) if y is not equal to 0.   |
 |      |                                      | The input x can be a real array or a |
 |      |                                      | real scalar, while y must be a real  |
 |      |                                      | scalar.                              |
 |      |                                      |                                      |
 |      |                                      | The following are true by            |
 |      |                                      | convention:                          |
 |      |                                      |                                      |
 |      |                                      | mod(x,0) = x                         |
 |      |                                      |                                      |
 |      |                                      | mod(x,x) = 0                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      floor(), ceil()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mod.html
 |  
 |  move(self, *args)
 |      Moves selected objects.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.move(dx)                           | In 2D or 3D, move by dx              |
 |      +--------------------------------------+--------------------------------------+
 |      | o.move(dx,dy)                        | In 2D or 3D, move by dx and dy.      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.move(dx,dy,dz)                     | In 3D, move by dx, dy, and dz.       |
 |      |                                      |                                      |
 |      |                                      | In 2D, dz will be ignored.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copy(), select()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_move.html
 |  
 |  mqwgain(self, *args)
 |  
 |  mqwindex(self, *args)
 |  
 |  mu0(self, *args)
 |      The permeability of free space in SI units.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  mult(self, *args)
 |      Performs matrix multiplication of two or more matrices. The dimensions
 |      of the matrices have to match.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.mult(A,B,...)                | Returns the matrix multiplication of |
 |      |                                      | matrices A, B, C ... Dimension of    |
 |      |                                      | matrices must match; for example, if |
 |      |                                      | A is an MxN matrix and B is a NXP    |
 |      |                                      | matrix, mult(A,B) has dimensions     |
 |      |                                      | MxP.                                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or(), eig(), permute(), reshape(), inv()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mult.html
 |  
 |  mv(self, *args)
 |      Moves a file to a new location. Path can be specified.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.mv("file1","file2")                | Moves file1 to file2.                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.mv("path1\\file1","path2\\file2")  | Moves file1 in path1 to file2 in     |
 |      |                                      | path2.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cp(), pwd()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_mv.html
 |  
 |  newproject(self, *args)
 |      Creates a new simulation project file. If there is an existing project
 |      file in the GUI, the old project file will not be saved.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.newproject()                       | Creates a new layout environment.    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+----+
 |      +----+----+
 |      +----+----+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      +--------------------------------------+--------------------------------------+
 |      |                                      | +----+----+----+                     |
 |      |                                      | +----+----+----+                     |
 |      |                                      | +----+----+----+                     |
 |      |                                      | +----+----+----+                     |
 |      |                                      | +----+----+----+                     |
 |      |                                      | +----+----+----+                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      new(), exit()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_newproject.html
 |  
 |  newwizard(self, *args)
 |      Used to create a new user defined wizard. Opens a new wizard window.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.newwizard( w, h, "title")          | •w and h (width and height) are      |
 |      |                                      | specified in pixels. The minimum     |
 |      |                                      | values for w and h are 200.          |
 |      |                                      |                                      |
 |      |                                      | •title is the wizard window title.   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      message()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_newwizard.html
 |  
 |  newwizardpage(self, *args)
 |      This creates a page for the wizard and should be done before adding any
 |      widgets.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.newwizardpage( "label1")           | Creates a button with the label      |
 |      |                                      | "label1". Typically, this will be    |
 |      |                                      | "Done" or "OK".                      |
 |      +--------------------------------------+--------------------------------------+
 |      | o.newwizardpage( "label1", "label2") | Creates two buttons with labels      |
 |      |                                      | "label1" and "label2". These will    |
 |      |                                      | typically be "Next" and "Back" or    |
 |      |                                      | "Done" and "Back".                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizardpage()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_newwizardpage.html
 |  
 |  nonorm(self, *args)
 |      Does not normalize the data to the source power. The actual field
 |      intensities will be used in all calculations. This function controls the
 |      checkbox located in Settings - Normalization state. Note, this command
 |      works in both the Layout and Analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.nonorm()                           | Use no normalization.                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cwnorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_nonorm.html
 |  
 |  norm(self, *args)
 |      Returns the natural norm of a matrix induced by the L2-norm (spectral
 |      norm). For a matrix A this is the square root of the maximum eigenvalue
 |      of the matrix product AHA, where AH is the conjugate transpose of A.
 |      
 |      Note that for a N-dimensional complex vector x = [x1,x2,...,xN] this
 |      reduces to the usual norm:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.norm(y)                      | Returns the spectral norm of the     |
 |      |                                      | matrix y.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sqrt(), sum(), conj(), max(), eig(), mult(), ctranspose()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_norm.html
 |  
 |  normpdf(self, *args)
 |  
 |  now(self, *args)
 |      Display the Unix time
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.now()                        | Displays the current UNIX time       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      https://kb.lumerical.com/en/ref_scripts_now.html
 |  
 |  num2str(self, *args)
 |      Converts an integer, floating point number, or matrix into a string.
 |      Matrices can only be 1D or 2D. Use the format script command to change
 |      the precision of the output.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.num2str(x)                   | Converts the number x into a string. |
 |      |                                      | x can also be a 1D or 2D matrix. The |
 |      |                                      | tab character (rather than space)    |
 |      |                                      | will be used as delimiter between    |
 |      |                                      | columns.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      endl(), write(), format(), str2num(), findstring(), replace(),
 |      replacestring(), substring(), eval(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_num2str.html
 |  
 |  ones(self, *args)
 |      Initialize a matrix. All elements are set to one.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.ones(i,j,k,....)               | Initializes an i x j x k x ....      |
 |      |                                      | matrix.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      linspace(), matrix(), zeros()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_ones.html
 |  
 |  opensession(self, *args)
 |      An interoperability command that opens a server session of selected
 |      Lumerical product via automation API. Once the session is opened, client
 |      product can call the server to execute arbitrary Lumerical script
 |      command(s) and execute them. Opened Lumerical session also allows to
 |      send and get variables from/to workspace.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | s2=o.opensession('device')           | When executed, this command will     |
 |      |                                      | open a session of Device via the     |
 |      |                                      | automation API.                      |
 |      |                                      |                                      |
 |      |                                      | Accepted parameters:                 |
 |      |                                      |                                      |
 |      |                                      | 'fdtd'                               |
 |      |                                      |                                      |
 |      |                                      | 'mode'                               |
 |      |                                      |                                      |
 |      |                                      | 'device'                             |
 |      |                                      |                                      |
 |      |                                      | 'interconnect'                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      closesession(), putremotedata(), getremotedata(), evalremote()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_opensession.html
 |  
 |  operatingsystem(self, *args)
 |      Returns the current operating system.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.operatingsystem()                  | Returns the current operating        |
 |      |                                      | system. Valid return values are      |
 |      |                                      | “windows”, “apple” or “linux”.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |       
 |      =
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_operatingsystem.html
 |  
 |  or(self, *args)
 |      Is the logical OR function. Imaginary components of x and y are ignored.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = y \| x()                       | If the real part of either or both   |
 |      |                                      | of x,y is non-zero, then return 1.   |
 |      |                                      | Otherwise return 0.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | y o.or x()                           | Same as \|.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_or2.html
 |  
 |  orbit(self, *args)
 |      This command performs an elliptical viewing orbit of the structure in
 |      the perspective view. Note that the commands setview, getview and redraw
 |      make it possible to create any type of orbit you would like in your own
 |      script file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.orbit()                            | Performs an orbit of the current     |
 |      |                                      | perspective view.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.orbit(zoom\_factor)                | Performs an orbit with the specified |
 |      |                                      | minimum zoom factor. By default the  |
 |      |                                      | zoom factor is 1.5.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.orbit(zoom\_factor, frame\_rate)   | Performs an orbit with the specified |
 |      |                                      | frame rate specified in frames per   |
 |      |                                      | second. The default frame rate is    |
 |      |                                      | 15.                                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.orbit(zoom\_factor, frame\_rate,   | The orbit will be streamed to the    |
 |      | "filename")                          | mpeg file filename for later         |
 |      |                                      | viewing.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      setview(), getview(), framerate()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_orbit.html
 |  
 |  overlap(self, *args)
 |      Returns the overlap and power coupling between two modes calculated by
 |      the FDE solver or recorded by frequency monitors from a varFDTD
 |      simulation. In FDTD, it calculates the overlap and power coupling
 |      between the field profiles (modes) recorded by two frequency monitors.
 |      
 |      Overlap
 |      ~~~~~~~
 |      
 |      Overlap measures the fraction of electromagnetic fields that overlap
 |      between the two field profiles (modes). This is also the fraction of
 |      power from mode2 that can propagate in mode1 (for both forward and
 |      backward propagating fields). The absolute value of the entire formula
 |      is to ensure it is positive.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Comparison with Mode expansion monitor                             |
 |      |                                                                          |
 |      | This overlap calculation is similar to the calculations provided by the  |
 |      | Expansion monitor, but it is designed for use in a slightly different    |
 |      | situation.                                                               |
 |      |                                                                          |
 |      | - The expansion monitor is intended for situations where the input file  |
 |      | profile (mode2) is known within the same waveguide structure where mode1 |
 |      | exists.                                                                  |
 |      |                                                                          |
 |      | - The overlap calculation is intended for situations where the input     |
 |      | field profile (mode2) is known in a different waveguide structure than   |
 |      | the one where mode1 exists. For example, mode1 and mode2 are the         |
 |      | fundamental modes of two different waveguide structures, and the overlap |
 |      | function is being used to estimate the efficiency of an end-fire         |
 |      | coupling arrangement between the two waveguides.                         |
 |      |                                                                          |
 |      | The overlap calculation can provide accurate results in many situations, |
 |      | but it is worth noting that it is an approximate technique. One key      |
 |      | assumption is that both mode1 and mode2 only contain fields that are     |
 |      | propagating in a single direction.                                       |
 |      |                                                                          |
 |      | The overlap calculation defined above can be written in terms of the     |
 |      | quantities provided by the expansion monitor, as shown below. This       |
 |      | represents the total power carried by the ith mode, including both the   |
 |      | forward and backward propagating fields, normalized to the input power.  |
 |      | See the online help for more information on Using Mode Expansion         |
 |      | Monitors.                                                                |
 |      |                                                                          |
 |      | In the event that real(N) or real(P) is 0, the "real" can be replaced    |
 |      | with "abs".                                                              |
 |      +--------------------------------------------------------------------------+
 |      
 |      Power Coupling
 |      ~~~~~~~~~~~~~~
 |      
 |      Power Coupling measures the amount of power that can couple from mode2
 |      into a forward propagating wave with the mode profile of mode1. The
 |      remaining power that can propagate in this mode will couple into the
 |      backwards propagating mode. Therefore, the power coupling is always less
 |      than or equal to the overlap. If the two modes have the same effective
 |      index, then the power coupling will be equal to the overlap.
 |      
 |      A dielectric interface is a simple example. The modes (i.e. a plane
 |      wave) on each side of the interface have an overlap of 1, but the power
 |      coupling will be less than one. This is due to reflections caused by the
 |      index change at the interface.
 |      
 |      These calculations are based on the methods described in Snyder and Love
 |      "Optical Waveguide Theory", Chapman & Hall, London, England, 1983.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note:                                                                    |
 |      |                                                                          |
 |      | For an exact power coupling result at an interface, it is necessary to   |
 |      | know the complete set of waveguide modes on both the input and output    |
 |      | sides, and the MODE Solutions' EME solver can be used. See Overlap       |
 |      | analysis for more information.                                           |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.overlap(mode2, mode1)        | •mode2, mode1: the mode names (in    |
 |      |                                      | FDTD, use the names of the frequency |
 |      |                                      | monitors, "m1" and "m2" instead)     |
 |      |                                      |                                      |
 |      |                                      | •out(1): the mode overlap            |
 |      |                                      |                                      |
 |      |                                      | •out(2): the mode power coupling     |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.overlap(mode2, mode1, x,     | Mode alignment can be adjusted       |
 |      | y,z)                                 | before overlap is calculated.        |
 |      |                                      |                                      |
 |      |                                      | •x offset                            |
 |      |                                      |                                      |
 |      |                                      | •y offset                            |
 |      |                                      |                                      |
 |      |                                      | •z offset                            |
 |      |                                      |                                      |
 |      |                                      | The offset is applied to the second  |
 |      |                                      | mode listed.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copydcard(), findmodes(), coupling(), bestoverlap(), propagate(),
 |      expand(), expand2(), optimizeposition()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_overlap.html
 |  
 |  pastefromclipboard(self, *args)
 |      Pastes the contents of the system clipboard into the layout environment.
 |      Equivalent to 'Ctrl-V'.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.pastefromclipboard()               | Paste contents of system clipboard   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copytoclipboard(), copy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pastefromclipboard.html
 |  
 |  pastesweep(self, *args)
 |      Pastes a sweep/optimization/Monte Carlo analysis item from clipboard to
 |      the "Optimizations and Sweeps" tab.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.pastesweep("name")                 | Pastes a sweep/optimization/Monte    |
 |      |                                      | Carlo analysis item from clipboard.  |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of the   |
 |      |                                      | parent item where the new analysis   |
 |      |                                      | item will be pasted as a child. If   |
 |      |                                      | the name is empty, paste the new     |
 |      |                                      | analysis item as a top-most item.    |
 |      |                                      |                                      |
 |      |                                      | Returns the absolute name of the new |
 |      |                                      | item. Returns empty string if paste  |
 |      |                                      | got failed.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addsweep(), deletesweep(), copysweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pastesweep.html
 |  
 |  pause(self, *args)
 |      Pauses program for a time.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.pause(time)                        | Pauses script for time, measured in  |
 |      |                                      | seconds. Hit the space bar to force  |
 |      |                                      | the script to continue. Hit the      |
 |      |                                      | ESCAPE key to break the script at    |
 |      |                                      | this point.                          |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      break()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pause.html
 |  
 |  pearson4pdf(self, *args)
 |  
 |  permute(self, *args)
 |      This function is a more general version of the transpose function. It
 |      allows matrix dimensions to be rearranged as needed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.permute(A, [i,j,k, ...])     | Returns a matrix with the same       |
 |      |                                      | elements as A but with rearranged    |
 |      |                                      | dimensions i,j,k, etc.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or(), eig(), reshape(), mult(), inv(), flip(), transpose(),
 |      size()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_permute.html
 |  
 |  pi(self, *args)
 |      The number pi.
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pre-defined_constants.html
 |  
 |  pinch(self, *args)
 |      Removes singleton dimensions from a matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.pinch(x)                     | Removes all singleton dimensions.    |
 |      |                                      | For example, if x is a matrix of     |
 |      |                                      | dimension 1x1x1xM, then              |
 |      |                                      |                                      |
 |      |                                      | •y=pinch(x);                         |
 |      |                                      |                                      |
 |      |                                      | will return a Mx1 matrix where       |
 |      |                                      |                                      |
 |      |                                      | •y(i) = x(1,1,1,i);                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.pinch(x,i)                         | Removes a specified dimension. If x  |
 |      |                                      | is an NxMxKxP matrix then            |
 |      |                                      |                                      |
 |      |                                      | •y=pinch(x,2);                       |
 |      |                                      |                                      |
 |      |                                      | will return an NxKxP matrix where    |
 |      |                                      |                                      |
 |      |                                      | •y(i,j,k) = x(i,1,j,k)               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.pinch(x,i,j)                       | Removes a specified dimension but    |
 |      |                                      | keeps a specific index for the       |
 |      |                                      | dimension being removed. If x is an  |
 |      |                                      | NxMxKxP matrix then                  |
 |      |                                      |                                      |
 |      |                                      | •y=pinch(x,2,4);                     |
 |      |                                      |                                      |
 |      |                                      | will return an NxKxP matrix where    |
 |      |                                      |                                      |
 |      |                                      | •y(i,j,k) = x(i,4,j,k)               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      find(), size(), flip()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pinch.html
 |  
 |  plot(self, *args)
 |      Creates line plots. All data sets must be sampled on the same position
 |      vector.
 |      
 |      See plotxy for data sets that are sampled on different position vectors.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.plot(x,y)                    | Creates a plot of y vs x, y and x    |
 |      |                                      | are both 1D vectors with the same    |
 |      |                                      | length.                              |
 |      |                                      |                                      |
 |      |                                      | The figure number is returned.       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plot(x,y)                          | x is a nx1 matrix.                   |
 |      |                                      |                                      |
 |      |                                      | y is a nxm matrix.                   |
 |      |                                      |                                      |
 |      |                                      | This will generate a graph with m    |
 |      |                                      | lines. (y(1:n,1) vs x, y(1:n,2) vs   |
 |      |                                      | x, etc)                              |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plot(x,y1,y2,y3)                   | Creates a plot with 3 curves, x,y1,  |
 |      |                                      | y2, y3 must be the same length,      |
 |      |                                      | returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plot(x,y, "x label", "y label",    | Creates a plot of y vs x with axis   |
 |      | "title")                             | labels and a title, returns the      |
 |      |                                      | figure number.                       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plot(x,y, "x label", "y label",    | Creates a plot with desired options. |
 |      | "title", "options")                  | Options are listed in the table      |
 |      |                                      | below.                               |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | Parameter          |                    | Description        | Acceptable values  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    | Output             |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      | options            | optional           | plot setting       | +----+----------+  |
 |      |                    |                    | options            | |    | Expand   |  |
 |      |                    |                    |                    | +----+----------+  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    | +----------------- |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ---+               |
 |      |                    |                    |                    | | •plot type       |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | line             |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | point            |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | bar              |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •marker style    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | x                |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | o                |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | +                |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | s (square)       |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | d (diamond)      |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •pen             |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | --               |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | :                |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | -.               |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | -..              |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •x axis location |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | top              |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | bottom           |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •y axis location |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | left             |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | right            |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •color           |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | blue, red, etc   |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •greyscale       |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •plot lines      |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •plot bar        |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •plot points     |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •marker size (de |
 |      |                    |                    |                    | fault=4)           |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •linewidth (defa |
 |      |                    |                    |                    | ult=1)             |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | |                  |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |                    |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | | •any comma separ |
 |      |                    |                    |                    | ated list of the a |
 |      |                    |                    |                    | bove, for example  |
 |      |                    |                    |                    | "log10x,greyscale" |
 |      |                    |                    |                    |    |               |
 |      |                    |                    |                    | +----------------- |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ------------------ |
 |      |                    |                    |                    | ---+               |
 |      +--------------------+--------------------+--------------------+--------------------+
 |      
 |      See Also
 |      
 |      plotxy(), image(), closeall(), setplot(), exportfigure(), visualize(),
 |      vectorplot(), polar()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_plot.html
 |  
 |  plotxy(self, *args)
 |      Creates line plots. In particular, this function is used when the data
 |      sets are sampled on different position vectors.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.plotxy(x,y)                  | Creates a plot of y vs x, y and x    |
 |      |                                      | are both 1D vectors with the same    |
 |      |                                      | length. The figure number is         |
 |      |                                      | returned.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plotxy(x1,y1,x2,y2,xn,yn)          | Creates a plot with multiple curves. |
 |      |                                      | The xn-yn pairs must have the same   |
 |      |                                      | length, but x1, x2, and xn can have  |
 |      |                                      | different start-end values and       |
 |      |                                      | resolutions. The figure number is    |
 |      |                                      | returned.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.plotxy(x1,y1,x2,y2, "x label", "y  | Creates line plots with axis labels  |
 |      | label", "title")                     | and a title, returns the figure      |
 |      |                                      | number.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), legend(), image(), closeall(), setplot(), exportfigure(),
 |      visualize(), vectorplot(), holdon()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_plotxy.html
 |  
 |  polar(self, *args)
 |      Creates polar plots. All data sets must be sampled on the same array of
 |      angle values.
 |      
 |      See polar2 for data sets that are sampled on different arrays of theta
 |      values.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polar(theta,rho)             | Creates a polar coordinate plot of   |
 |      |                                      | the angle theta versus the radius    |
 |      |                                      | rho. theta is the angle from the     |
 |      |                                      | x-axis to the radius vector          |
 |      |                                      | specified in radians; rho is the     |
 |      |                                      | length of the radius vector.         |
 |      |                                      |                                      |
 |      |                                      | Theta and rho can be vectors of the  |
 |      |                                      | same length, or if the length of     |
 |      |                                      | theta is n, then rho can be a nxm    |
 |      |                                      | matrix, which corresponds to m sets  |
 |      |                                      | of rho values.                       |
 |      |                                      |                                      |
 |      |                                      | The figure number is returned.       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar(theta,rho1,rho2,rho3)        | Creates a polar plot with three      |
 |      |                                      | curves. theta, rho1, rho2, rho3 must |
 |      |                                      | be of the same length. The figure    |
 |      |                                      | number is returned.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar(theta,rho,"x label", "y      | Creates a polar plot with axis       |
 |      | label", "title")                     | labels and a title. The figure       |
 |      |                                      | number is returned.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar(theta,rho,"x label", "y      | Creates a polar plot with desired    |
 |      | label", "title", "options")          | options. Options can be be           |
 |      |                                      |                                      |
 |      |                                      | •greyscale                           |
 |      |                                      |                                      |
 |      |                                      | •polar (use with plot command to     |
 |      |                                      | generate the same plot as the polar  |
 |      |                                      | script command)                      |
 |      |                                      |                                      |
 |      |                                      | •any comma separated list of the     |
 |      |                                      | above                                |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polar2(), legend(), image(), closeall(), setplot(), exportfigure(),
 |      polarimage(), plot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polar.html
 |  
 |  polar2(self, *args)
 |      Creates polar plots. In particular, this function is used when the data
 |      sets are sampled on different arrays of angle values.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polar2(theta,rho)            | Creates a polar coordinate plot of   |
 |      |                                      | the angle theta versus the radius    |
 |      |                                      | rho. theta is the angle from the     |
 |      |                                      | x-axis to the radius vector          |
 |      |                                      | specified in radians; rho is the     |
 |      |                                      | length of the radius vector.         |
 |      |                                      |                                      |
 |      |                                      | Theta and rho can be vectors of the  |
 |      |                                      | same length, or if the length of     |
 |      |                                      | theta is n, then rho can be a nxm    |
 |      |                                      | matrix, which corresponds to m sets  |
 |      |                                      | of rho values.                       |
 |      |                                      |                                      |
 |      |                                      | The figure number is returned.       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar2(theta1,rho1,theta2,rho2)    | Creates a plot with two curves. The  |
 |      |                                      | two data sets can be sampled on      |
 |      |                                      | different theta vectors.             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar2(theta,rho,"x label", "y     | Creates a plot of y vs x with axis   |
 |      | label", "title")                     | labels and a title, returns the      |
 |      |                                      | figure number.                       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polar2(theta,rho,"x label", "y     | Creates a plot with desired options. |
 |      | label", "title", "options")          | Options can be be                    |
 |      |                                      |                                      |
 |      |                                      | •greyscale                           |
 |      |                                      |                                      |
 |      |                                      | •polar (same as the polar script     |
 |      |                                      | command)                             |
 |      |                                      |                                      |
 |      |                                      | •any comma separated list of the     |
 |      |                                      | above                                |
 |      |                                      |                                      |
 |      |                                      | Returns the figure number.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polar(), legend(), image(), closeall(), setplot(), exportfigure(),
 |      polarimage(), plot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polar2.html
 |  
 |  polarimage(self, *args)
 |      Creates 2D polar image plots. This is typically used to plot far field
 |      data.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polarimage(ux,uy,data)             | Creates a 2D image plot. data must   |
 |      |                                      | be of dimension N x M and            |
 |      |                                      |                                      |
 |      |                                      | •ux is of dimension N x 1, where ux  |
 |      |                                      | goes from -1 to 1                    |
 |      |                                      |                                      |
 |      |                                      | •uy is of dimension M x 1, where uy  |
 |      |                                      | goes from -1 to 1                    |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polarimage(ux,uy,data, "x    | Creates a 2D image plot with axis    |
 |      | label", "y label", "title")          | labels                               |
 |      |                                      |                                      |
 |      |                                      | Optionally returns the figure        |
 |      |                                      | number.                              |
 |      +--------------------------------------+--------------------------------------+
 |      | o.polarimage(ux,uy,data, "x label",  | Creates a 2D image plot with axis    |
 |      | "y label", "title", "options")       | labels and options, options can be   |
 |      |                                      |                                      |
 |      |                                      | •logplot                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), polar(), image(), closeall(), setplot(), exportfigure(),
 |      visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polarimage.html
 |  
 |  polyand(self, *args)
 |      Combines two polygons into one using the Boolean 'and' operation.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | V3 = o.polyand(V1,V2)                | Returns a new polygon, V3, that is   |
 |      |                                      | the 'and' of V1 and V2.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+----+
 |      +----+----+
 |      +----+----+
 |      +----+----+
 |      +----+----+
 |      
 |      +----+
 |      +----+
 |      
 |      See Also
 |      
 |      polyor(), polydiff(), polyxor(), polyarea(), centroid(),
 |      polyintersect(), inpoly(), polygrow()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyand.html
 |  
 |  polyarea(self, *args)
 |      Returns the area of a polygon. The area is positive if the vertices are
 |      defined in a counter-clockwise direction, and negative if the vertices
 |      are defined in a clockwise direction.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polyarea(V)                  | Returns the area of V. The sign of   |
 |      |                                      | the area indicates if V is defined   |
 |      |                                      | in a counter-clockwise (positive) or |
 |      |                                      | clockwise (negative) direction.      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      centroid(), polyintersect(), inpoly(), polygrow(), polyand(), polyor(),
 |      polydiff(), polyxor()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyarea.html
 |  
 |  polyclean(self, *args)
 |  
 |  polydft(self, *args)
 |      Returns the chirped z-transform of a set of data. The polydft function
 |      is very similar to a two-dimensional czt function with the difference
 |      being that the E function does not need to be finely sampled and only
 |      providing the vertices of a polygon as input range of the function would
 |      be enough to perform the transform. The only limit however is that E is
 |      considered constant within the limits of the polygon. The polygon mesh
 |      can be created using the inpoly function.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polydft(E,kx,ky)             | Returns the two dimensional chirped  |
 |      |                                      | z-transform of E. kx and ky must be  |
 |      |                                      | linearly spaced sets of wavenumbers  |
 |      |                                      | but can cover any range.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      czt(), inpoly(), fft(), fftw()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polydft.html
 |  
 |  polydiff(self, *args)
 |      Combines two polygons into one by taking the difference.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | V3 = o.polydiff(V1,V2)               | Returns a new polygon, V3, that is   |
 |      |                                      | V1-V2.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyand(), polyor(), polyxor(), polyarea(), centroid(), polyintersect(),
 |      inpoly(), polygrow()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polydiff.html
 |  
 |  polyfit(self, *args)
 |      Calculates a polynomial fit based on linear regression. The data can be
 |      complex.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | p = o.polyfit(x, y, N)               | Returns the coefficients for a       |
 |      |                                      | polynomial p(x) of degree N that is  |
 |      |                                      | the best fit for the data in y.      |
 |      |                                      |                                      |
 |      |                                      | The length of the coefficients is    |
 |      |                                      | N+1.                                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      interp(), spline()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyfit.html
 |  
 |  polygrow(self, *args)
 |      Returns a polygon that has grown or shrunk by a specified amount. The
 |      polygon is stretched or compressed in a direction normal to every line
 |      segment.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polygrow(V,dx)               | Returns the vertices of a new        |
 |      |                                      | polygon that has grown by dx. To     |
 |      |                                      | shrink a polygon, use dx < 0.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyarea(), centroid(), polyintersect(), inpoly(), polyand(), polyor(),
 |      polydiff(), polyxor()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polygrow.html
 |  
 |  polyintersect(self, *args)
 |      Determines if two polygons intersect.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.polyintersect(V1,V2)         | Returns                              |
 |      |                                      |                                      |
 |      |                                      | •0 if the polygons do not overlap    |
 |      |                                      |                                      |
 |      |                                      | •0.5 if the polygons touch           |
 |      |                                      |                                      |
 |      |                                      | •1 if they overlap                   |
 |      |                                      |                                      |
 |      |                                      | •2 if one polygon completely         |
 |      |                                      | encloses the other                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyarea(), centroid(), inpoly(), polygrow(), polyand(), polyor(),
 |      polydiff(), polyxor()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyintersect.html
 |  
 |  polyor(self, *args)
 |      Combines two polygons into one using the Boolean 'or' operation.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | V3 = o.polyor(V1,V2)                 | Returns a new polygon, V3, that is   |
 |      |                                      | the 'or' of V1 and V2.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyand(), polydiff(), polyxor(), polyarea(), centroid(),
 |      polyintersect(), inpoly(), polygrow()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyor.html
 |  
 |  polypieces(self, *args)
 |  
 |  polystencil(self, *args)
 |  
 |  polyxor(self, *args)
 |      Combines two polygons into one using the Boolean 'xor' operation.
 |      
 |      The polygon vertices are contained in a single matrix of dimension Nx2
 |      (or 2xN), where N >= 3 is the number of vertices. The dimension 2
 |      corresponds to the x,y positions. For example, a square of side length 1
 |      can be described by V = [ 0,0; 1,0; 1,1; 0,1] or V = [ 0,1,1,0;0,0,1,1].
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | V3 = o.polyxor(V1,V2)                | Returns a new polygon, V3, that is   |
 |      |                                      | the 'xor' of V1 and V2.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polyand(), polyor(), polydiff(), polyarea(), centroid(),
 |      polyintersect(), inpoly(), polygrow()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_polyxor.html
 |  
 |  pop(self, *args)
 |  
 |  print(self, *args)
 |  
 |  prod(self, *args)
 |      Returns the product of elements in a matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.prod(x)                      | Product of all the elements in       |
 |      |                                      | matrix x, over all dimensions.       |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.prod(x,n)                    | Product elements of x over the       |
 |      |                                      | specified dimension n.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      integrate(), mean(), sum()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_prod.html
 |  
 |  putremotedata(self, *args)
 |      An interoperability command that will send a variable from the client
 |      workspace into the server workspace via an active session
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.putremotedata(s,'y',x)             | Creates variable y in the server     |
 |      |                                      | workspace that has value of x in the |
 |      |                                      | client workspace via an active       |
 |      |                                      | session s                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      opensession(), closesession(), getremotedata(), evalremote()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_putremotedata.html
 |  
 |  putv(self, varname, value)
 |      putv is a wrapper around the various put calls for the session
 |  
 |  pwd(self, *args)
 |      Returns the current working directory.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.pwd()                        | Returns the current working          |
 |      |                                      | directory as a string.               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      currentfilename(), cd()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_pwd.html
 |  
 |  quadtet(self, *args)
 |      Calculates the numerical integral of data on a 3D finite element mesh.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.quadtet(tet,vtx,u)           | outputs a scalar, the integral of u  |
 |      |                                      | on the finite element mesh, where    |
 |      |                                      |                                      |
 |      |                                      | •tet: the connectivity array, Mx4,   |
 |      |                                      | containing row entries that index    |
 |      |                                      | the four vertices of M tetrahedra    |
 |      |                                      |                                      |
 |      |                                      | •vtx: the vertex array, Nx3,         |
 |      |                                      | containing row entries of (x,y,z)    |
 |      |                                      | pairs that locate the N vertex       |
 |      |                                      | points                               |
 |      |                                      |                                      |
 |      |                                      | •u: the data on the finite element   |
 |      |                                      | mesh (Nx1)                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      interptri(), quadtri()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_quadtet.html
 |  
 |  quadtri(self, *args)
 |      Calculates the numerical integral of data collected on a 2D triangle
 |      mesh using first order trapezoidal quadrature.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.quadtri(tri,vtx,u,n)         | Calculates the integral of data      |
 |      |                                      | collected on triangle mesh. A scalar |
 |      |                                      | is returned if the input data        |
 |      |                                      | corresponds to a scalar quantity and |
 |      |                                      | a vector with three components is    |
 |      |                                      | returned if the input data           |
 |      |                                      | corresponds to a vector quantity.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | tri            | required       |                | matrix         | [Mx3]          |
 |      |                |                |                |                | connectivity   |
 |      |                |                |                |                | matrix for the |
 |      |                |                |                |                | M triangle     |
 |      |                |                |                |                | elements on    |
 |      |                |                |                |                | the mesh.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | vtx            | required       |                | matrix         | [Nx2] or [Nx3] |
 |      |                |                |                |                | matrix         |
 |      |                |                |                |                | containing the |
 |      |                |                |                |                | (x,y,z)        |
 |      |                |                |                |                | coordinates of |
 |      |                |                |                |                | the N vertices |
 |      |                |                |                |                | of the mesh.   |
 |      |                |                |                |                | If the matrix  |
 |      |                |                |                |                | has only two   |
 |      |                |                |                |                | columns, the z |
 |      |                |                |                |                | coordinate is  |
 |      |                |                |                |                | assumed to be  |
 |      |                |                |                |                | zero.          |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | u              | required       |                | matrix         | [Nx1] or [Nx3] |
 |      |                |                |                |                | matrix         |
 |      |                |                |                |                | containing the |
 |      |                |                |                |                | data to be     |
 |      |                |                |                |                | integrated at  |
 |      |                |                |                |                | the location   |
 |      |                |                |                |                | of each        |
 |      |                |                |                |                | vertex. If the |
 |      |                |                |                |                | matrix is of   |
 |      |                |                |                |                | size [Nx1],    |
 |      |                |                |                |                | the data is    |
 |      |                |                |                |                | assumed to be  |
 |      |                |                |                |                | a scalar       |
 |      |                |                |                |                | quantity. If   |
 |      |                |                |                |                | the matrix is  |
 |      |                |                |                |                | of size [Nx3], |
 |      |                |                |                |                | the data is    |
 |      |                |                |                |                | assumed to be  |
 |      |                |                |                |                | a vector       |
 |      |                |                |                |                | quantity.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | n              | optional       | empty          | matrix         | [Mx3] matrix   |
 |      |                |                |                |                | with the       |
 |      |                |                |                |                | surface normal |
 |      |                |                |                |                | vectors for    |
 |      |                |                |                |                | each of the M  |
 |      |                |                |                |                | triangles on   |
 |      |                |                |                |                | the mesh. The  |
 |      |                |                |                |                | columns        |
 |      |                |                |                |                | correspond to  |
 |      |                |                |                |                | the (x,y,z)    |
 |      |                |                |                |                | components of  |
 |      |                |                |                |                | each vector.   |
 |      |                |                |                |                | This input is  |
 |      |                |                |                |                | required only  |
 |      |                |                |                |                | if the data to |
 |      |                |                |                |                | be integrated  |
 |      |                |                |                |                | is a vector    |
 |      |                |                |                |                | quantity.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      interptri(), quadtet(), interptet()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_quadtri2.html
 |  
 |  queryanalysisprop(self, *args)
 |  
 |  queryanalysisresult(self, *args)
 |  
 |  querynamed(self, *args)
 |  
 |  queryuserprop(self, *args)
 |  
 |  rand(self, *args)
 |      Generates a uniform random number between 0 and 1. In order to reset the
 |      generator seed use the command randreset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.rand()                       | Generates a uniform random number    |
 |      |                                      | between 0 and 1.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.rand(min,max)                | Generates a random number between    |
 |      |                                      | min and max. By default, min and max |
 |      |                                      | are 0 and 1 respectively.            |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.rand(min,max,option)         | option = 1: output is a double       |
 |      |                                      | precision number between min and max |
 |      |                                      | (default)                            |
 |      |                                      |                                      |
 |      |                                      | option = 2: output is an integer     |
 |      |                                      | between min and max.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      randreset(), randmatrix(), randn()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_rand.html
 |  
 |  randmatrix(self, *args)
 |      Initialize a matrix. All elements are random numbers between 0 and 1.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.randmatrix(i,j,k,....)         | Initializes an i x j x k x ....      |
 |      |                                      | matrix. The elements are all random  |
 |      |                                      | numbers between 0 and 1.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrix(), rand(), randreset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_randmatrix.html
 |  
 |  randn(self, *args)
 |      Generates a normally distributed random number. In order to reset the
 |      generator seed use the command randreset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.randn()                      | Generates a normally distributed     |
 |      |                                      | random number with mean 0 and        |
 |      |                                      | standard deviation 1.                |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.randn(mean,stddev)           | Generates a normally distributed     |
 |      |                                      | random number with user defined mean |
 |      |                                      | value and standard deviation.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      randreset(), lognrnd(), randnmatrix()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_randn.html
 |  
 |  randnmatrix(self, *args)
 |      Initialize a matrix. All elements are normally distributed random
 |      numbers with mean 0 and standard distribution 1.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.randnmatrix(i,j,k,....)        | Initializes an i x j x k x ....      |
 |      |                                      | matrix. The elements are all random  |
 |      |                                      | normally distributed numbers with    |
 |      |                                      | mean 0 and standard deviation 1.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrix(), randn(), randreset()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_randnmatrix.html
 |  
 |  randpearson4(self, *args)
 |  
 |  randreset(self, *args)
 |      Resets the random number generator seed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.randreset()                  | Resets the random number seed based  |
 |      |                                      | on the clock time.                   |
 |      |                                      |                                      |
 |      |                                      | This function returns the random     |
 |      |                                      | number seed that was used.           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.randreset(seed)              | Set the seed to a specific value     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rand(), randmatrix()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_randreset.html
 |  
 |  rcwa(self, *args)
 |  
 |  rcwasweeppropagation(self, *args)
 |  
 |  read(self, *args)
 |      Reads data from a text file as a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.read(filename, size)               | Read a text file as a string for the |
 |      |                                      | user defined size 'size'. The        |
 |      |                                      | default value for size is 1e+6, if   |
 |      |                                      | not specified.                       |
 |      |                                      |                                      |
 |      |                                      | Note: This function will check for   |
 |      |                                      | the file in the current working      |
 |      |                                      | directory. If the file to read from  |
 |      |                                      | is in a different directory, either  |
 |      |                                      | specify the full path or change the  |
 |      |                                      | current working directory.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      readdata(), struct(), cell()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_read.html
 |  
 |  readdata(self, *args)
 |      Reads a file with data in a row/column format. User can import numerical
 |      values stored in text files with the readdata command. The data must be
 |      correctly formatted so each row has the same number of columns. Readdata
 |      will ignore any line that begins with a letter.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | M=o.readdata("filename.txt")         | Will load the text file filename     |
 |      |                                      | into matrix variable M. Any lines    |
 |      |                                      | starting with a letter are ignored.  |
 |      |                                      |                                      |
 |      |                                      | Note: This function will check for   |
 |      |                                      | the file in the current working      |
 |      |                                      | directory. If the file to read from  |
 |      |                                      | is in a different directory, either  |
 |      |                                      | specify the full path or change the  |
 |      |                                      | current working directory.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rm(), write(), read(), str2num(), findstring(), replace(),
 |      replacestring(), substring(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_readdata.html
 |  
 |  readstltriangles(self, *args)
 |      Imports a matrix of vertex positions from an STL file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.readstltriangles("filename.stl | Returns an Mx3 matrix with vertices  |
 |      | ",scaling\_factor)                   | from all STL triangles from the      |
 |      |                                      | specified STL file.                  |
 |      |                                      |                                      |
 |      |                                      | scaling\_factor: An STL file does    |
 |      |                                      | not contain unit data. To import     |
 |      |                                      | data in units of microns, set this   |
 |      |                                      | value to 1e-6. For nanometers, set   |
 |      |                                      | this value to 1e-9.                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      stlimport()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_readstltriangles.html
 |  
 |  real(self, *args)
 |      Returns the real part of a number or matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.real(x)                      | Returns the real part of x.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      imag()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_real.html
 |  
 |  rectilineardataset(self, *args)
 |      Creates an empty rectilinear dataset that is associate with the x/y/z
 |      coordinates (ex. E and H fields). Like matrix datasets, rectilinear
 |      datasets can be parameterized, and can contain an arbitrary number of
 |      attributes (see addattribute) and parameters (see addparameter).
 |      
 |      See Dataset introduction for more information.
 |      
 |      For datasets that are not associated with the x/y/z coordinates (ex.
 |      transmission as a function of frequency), see matrixdataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.rectilineardataset(x,y,z)          | Creates a empty rectilinear dataset  |
 |      |                                      | associated with the coordinates      |
 |      |                                      | x/y/z.                               |
 |      |                                      |                                      |
 |      |                                      | Arguments 'x', 'y' and 'z' may be    |
 |      |                                      | different lengths and the total      |
 |      |                                      | number of points is the product of   |
 |      |                                      | their lengths.                       |
 |      +--------------------------------------+--------------------------------------+
 |      | o.rectilineardataset("dataset\_name" | Creates a empty rectilinear dataset  |
 |      | ,x,y,z)                              | named "dataset\_name" associated     |
 |      |                                      | with the coordinates x/y/z.          |
 |      |                                      |                                      |
 |      |                                      | Arguments 'x', 'y' and 'z' may be    |
 |      |                                      | different lengths and the total      |
 |      |                                      | number of points is the product of   |
 |      |                                      | their lengths.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), addattribute(), addparameter(), visualize(),
 |      getparameter(), getattribute(), matrixdataset(), struct()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_rectilineardataset.html
 |  
 |  redo(self, *args)
 |      Redos a command after a previous undo.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.redo()                             | Redo command after previous undo.    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      undo(), historyon(), historyoff()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_redo.html
 |  
 |  redraw(self, *args)
 |      Forces the graphical viewports of the CAD or the schematic layout
 |      drawing to update. The viewports update automatically by default, so
 |      this command is only required after using the redrawoff command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.redraw()                           | Redraws graphics.                    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      redrawon(), redrawoff(), redrawmode()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_redraw.html
 |  
 |  redrawmode(self, *args)
 |      This command can be used to determine the current status of automatic
 |      redrawing. It can also be used to set the current status of automatic
 |      redrawing. The graphics will be redrawn after any script command that
 |      may change the properties of a graphical object.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.redrawmode()                 | The value of out indicates if        |
 |      |                                      | automatic redrawing is off or on     |
 |      |                                      |                                      |
 |      |                                      | •out=1: automatic redrawing is on    |
 |      |                                      |                                      |
 |      |                                      | •out=0: automatic redrawing is off   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.redrawmode(in)               | Set the automatic redrawing off or   |
 |      |                                      | on. To turn it on, use in=1. To turn |
 |      |                                      | it off, use in=0. The value of out   |
 |      |                                      | is set after executing the command   |
 |      |                                      | so that out=in once this command has |
 |      |                                      | been executed.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      redraw(), redrawoff()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_redrawmode.html
 |  
 |  redrawoff(self, *args)
 |      Disables automatic updating of the graphical viewports in the CAD or the
 |      schematic layout drawing. This can greatly increase the speed of scripts
 |      that add large numbers of objects.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.redrawoff()                        | Prevents redrawing of graphics.      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      |                                      |                                      |
 |      |                                      | Cannot use this command in group     |
 |      |                                      | setup scripts since redrawing is     |
 |      |                                      | automatically turned off.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      redrawon(), redraw(), redrawmode()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_redrawoff.html
 |  
 |  redrawon(self, *args)
 |      Enables automatic updating of the graphical viewports in the CAD or the
 |      schematic layout drawing. Automatic updating is the default behavior, so
 |      this command is only required after using the redrawoff command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.redrawon()                         | Turns redrawing back on.             |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      redraw(), redrawoff(), redrawmode()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_redrawon.html
 |  
 |  remove(self, *args)
 |  
 |  removeexpansion(self, *args)
 |      Removes a DFT monitor from a mode expansion monitor.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.removeexpansion("name")            | Removes the DFT monitor with the     |
 |      |                                      | specified name from the "Monitors    |
 |      |                                      | for expansion" list of the selected  |
 |      |                                      | mode expansion monitor.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmodeexpansion(), setexpansion()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_removeexpansion.html
 |  
 |  removesweepparameter(self, *args)
 |      Removes a parameter from a parameter sweep/optimization/Monte
 |      Carlo/S-parameter sweep item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.removesweepparameter("name",       | Removes a parameter from a parameter |
 |      | "parameter\_name")                   | sweep/optimization/Monte             |
 |      |                                      | Carlo/S-parameter sweep item.        |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "parameter\_name" is the parameter   |
 |      |                                      | name.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_removesweepparameter.html
 |  
 |  removesweepresult(self, *args)
 |      Removes a result from a sweep/optimization/Monte Carlo item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.removesweepresult("name",          | Removes a result from a              |
 |      | "result\_name")                      | sweep/optimization/Monte Carlo item. |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copysweep(), pastesweep(), addsweep(), insertsweep(), getsweep(),
 |      setsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_removesweepresult.html
 |  
 |  replace(self, *args)
 |      Replaces a substring of a string with a new string. The start position
 |      of the substring must be specified. This function can also be used to
 |      add a substring to a string at a given position.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | snew = o.replace(s,pos,len,s1)       | Replaces len characters of s,        |
 |      |                                      | starting at position pos, with the   |
 |      |                                      | string in s1. If len is 0, it will   |
 |      |                                      | insert the string s1 between pos-1   |
 |      |                                      | and pos. If len is -1 (or any values |
 |      |                                      | less than 0) it will replace all     |
 |      |                                      | remaining characters in s with s1,   |
 |      |                                      | starting at pos. The position pos    |
 |      |                                      | can be 1 to length(s).               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replacestring(), str2num(),
 |      num2str(), splitstring(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_replace.html
 |  
 |  replacestring(self, *args)
 |      Replaces all the instances of a substring in a string with a new string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | snew = o.replacestring(s,s1,s2)      | Replaces all instances of s1 in s    |
 |      |                                      | with s2. If s1 is not found, the     |
 |      |                                      | original string s is returned.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      splitstring(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_replacestring.html
 |  
 |  reshape(self, *args)
 |      Reshapes the matrix A to have a given size i,j,k.The product of the
 |      specified dimensions, i\*j\*k\*..., must be the same as that of the
 |      original matrix A.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.reshape(A, [i,j,k, ...])     | Returns an array with the same       |
 |      |                                      | elements as A but reshaped to have   |
 |      |                                      | the size i by j by k by ...          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      and(), or(), eig(), permute(), mult(), inv(), flip(), transpose(),
 |      size()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_reshape.html
 |  
 |  resume(self, *args)
 |  
 |  resumejobs(self, *args)
 |  
 |  rm(self, *args)
 |      Deletes a file. A path can be specified.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | del("filename") o.rm("filename")     | Deletes the file "filename".         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      delete(), rm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_rm.html
 |  
 |  round(self, *args)
 |      Rounds a number to the nearest integer.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.round(x)                     | Rounds x to the nearest integer.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      floor(), ceil(), mod()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_round.html
 |  
 |  run(self, *args)
 |      Run the current simulation. When the simulation finishes, all simulation
 |      data will be saved to the current simulation file. The updated
 |      simulation file will then be re-loaded by the GUI.
 |      
 |      For FDTD,
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.run()                              | Launch the simulation in parallel    |
 |      |                                      | mode as defined in the resource      |
 |      |                                      | manager. This function does not      |
 |      |                                      | return any data.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | o.run(option1)                       | Option1 (default: 3) can be:         |
 |      |                                      |                                      |
 |      |                                      | •1: run FDTD in single processor     |
 |      |                                      | mode (legacy) avoiding any use of    |
 |      |                                      | MPI.                                 |
 |      |                                      |                                      |
 |      |                                      | •2: run FDTD in single processor     |
 |      |                                      | mode (legacy). Pop-up dialogs no     |
 |      |                                      | longer take focus.                   |
 |      |                                      |                                      |
 |      |                                      | •3: run FDTD in parallel mode as     |
 |      |                                      | defined in the resource manager.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For MODE, DEVICE, and INTERCONNECT,
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.run()                              | Launch the simulation. The           |
 |      |                                      | simulation will be run using the     |
 |      |                                      | settings from the first active       |
 |      |                                      | resource in the resource manager.    |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      runanalysis(), addjob(), runjobs(), save(), load()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_run.html
 |  
 |  runanalysis(self, *args)
 |      Runs the analysis script in analysis objects.
 |      
 |      Note: Scripts that already have data are not re-run; to re-run a script,
 |      first clear data using clearanalysis.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runanalysis()                      | Runs the analysis scripts in all     |
 |      |                                      | analysis objects in the simulation   |
 |      |                                      | file.                                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runanalysis("group name")          | Runs the analysis script in the      |
 |      |                                      | analysis object named "group name".  |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      run(), getdata(), getresult(), havedata(), clearanalysis(), runsetup()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_runanalysis.html
 |  
 |  runjobs(self, *args)
 |      Run all simulations in the job manager queue. The script execution will
 |      be paused while the jobs run, then resume when all of the simulations
 |      have complete successfully. If errors occur, the script will not
 |      proceed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runjobs()                          | Run jobs in the Job queue for        |
 |      |                                      | existing (active) solver. Use the    |
 |      |                                      | computer resources and parallel      |
 |      |                                      | settings that are specified in the   |
 |      |                                      | Resource Manager.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runjobs("solver", option)          | Run jobs in the Job queue for        |
 |      |                                      | specified solver. option=0: run jobs |
 |      |                                      | in single process mode using only    |
 |      |                                      | the local computer.                  |
 |      |                                      |                                      |
 |      |                                      | option=1: run jobs using the         |
 |      |                                      | computer resources and parallel      |
 |      |                                      | settings that are specified in the   |
 |      |                                      | Resource Manager. (default)          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      run(), runsweep(), addjob(), clearjobs(), listjobs(), save(), load()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_runjobs.html
 |  
 |  runsetup(self, *args)
 |      Runsetup forces the setup scripts of structure and analysis groups to
 |      run.
 |      
 |      In most cases, it is not necessary to use this function, as group setup
 |      scripts automatically re-run at the end of script, if the object has
 |      been modified.  It is only necessary to use this function when you need
 |      to force the setup script to run before the end of your script file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runsetup()                         | Forces setup scripts of groups to    |
 |      |                                      | run.                                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), set(), runanalysis()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_runsetup.html
 |  
 |  runstartupscripts(self, *args)
 |  
 |  runsweep(self, *args)
 |      Runs a parameter sweep or optimization task.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runsweep()                         | Runs all sweeps and optimization     |
 |      |                                      | tasks.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.runsweep("taskname")               | Runs only the sweep or optimization  |
 |      |                                      | named taskname.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      run(), getsweepdata(), addjob(), runjobs()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_runsweep.html
 |  
 |  runsystemcheck(self, *args)
 |  
 |  runwizard(self, *args)
 |      Runs the wizard and returns a value indicating which button was pressed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.runwizard()                  | Returns either 0, +1 or -1.          |
 |      |                                      |                                      |
 |      |                                      | 0 means the user pressed Cancel, 1   |
 |      |                                      | means the user pressed the first     |
 |      |                                      | button (created by calling           |
 |      |                                      | newwizardpage) and -1 means the user |
 |      |                                      | pressed the second button (created   |
 |      |                                      | by calling newwizardpage).           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizardpage()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_runwizard.html
 |  
 |  save(self, *args)
 |      Saves an simulation project file. If the simulation has been run, the
 |      file will also contain the simulation results, such as sweep and
 |      optimization data.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.save()                             | Open a file browser to save the      |
 |      |                                      | file.                                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.save(filename)                     | Save with the specified name to the  |
 |      |                                      | current working directory. A path    |
 |      |                                      | can be specified.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      load(), loaddata(), savedata(), savedcard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_save.html
 |  
 |  savedata(self, *args)
 |      Saves workspace variables to a Lumerical data file (ldf) file. To save
 |      monitor (D-card) data to an ldf file, see the savedcard function.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savedata("filename")               | Saves all current variables to the   |
 |      |                                      | specified file.                      |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savedata("filename", var1,         | Saves only variables with the        |
 |      | var2,...)                            | specified names to file.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      savedcard(), loaddata(), workspace(), matlabsave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_savedata.html
 |  
 |  savedcard(self, *args)
 |      Saves d-card data to a Lumerical data file (ldf) file. D-cards are
 |      generally used to store monitor data.
 |      
 |      Data is saved in the nonorm state. See the units and normalization
 |      section of the reference guide for more information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savedcard("filename")              | Saves all current d-cards (local and |
 |      |                                      | global) to the specified ldf file.   |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savedcard("filename", "name1",     | Saves only the d-cards with the      |
 |      | "name2",...)                         | specified names, "name1", "name2",   |
 |      |                                      | etc.                                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      copydcard(), savedata(), loaddata(), matlabsave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_savedcard.html
 |  
 |  savegdsfile(self, *args)
 |  
 |  saveprocessfile(self, *args)
 |  
 |  savesweep(self, *args)
 |      Creates and saves the simulations files to a folder in the working
 |      directory, this script command is equivalent to the GUI "Save to files"
 |      operation.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savesweep()                        | Saves the simulation files of all    |
 |      |                                      | sweep objects in simulation.         |
 |      +--------------------------------------+--------------------------------------+
 |      | o.savesweep("name")                  | Saves the simulation files of the    |
 |      |                                      | specified sweep object.              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getdata(), runsweep(), havesweepdata(), savedata(), getsweepresult(),
 |      loadsweep()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_savesweep.html
 |  
 |  scorrcoef(self, *args)
 |      Generates a spatial correlation matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.scorrcoef(x\_pos, y\_pos, x\_corr, | Generates a spatial correlation      |
 |      | y\_corr)                             | matrix. x\_pos and y\_pos are        |
 |      |                                      | vectors containing the x and y       |
 |      |                                      | layout coordinate respectively, and  |
 |      |                                      | x\_corr and y\_corr are the          |
 |      |                                      | correlation values for the x and y   |
 |      |                                      | coordinates respectively.            |
 |      |                                      |                                      |
 |      |                                      | Correlation is defined as a Gaussian |
 |      |                                      | function:                            |
 |      |                                      |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      cov(), corrtransf()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_scorrcoef.html
 |  
 |  scriptautorun(self, *args)
 |      Disable or enable running script files automatically by typing the
 |      script name.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.scriptautorun(option)              | The options are                      |
 |      |                                      |                                      |
 |      |                                      | •0: disables automatic running of    |
 |      |                                      | script files                         |
 |      |                                      |                                      |
 |      |                                      | •1: enables automatic running of     |
 |      |                                      | script files                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      feval()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_scriptautorun.html
 |  
 |  select(self, *args)
 |      Selects objects with a given name in the current group scope. A failed
 |      select command will have the same result as the unselectall command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.select("name")                     | Selects objects with the name "name" |
 |      |                                      | in the current group scope.          |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.select("group name::name")         | Selects all objects with the name    |
 |      |                                      | "name" located in the group named    |
 |      |                                      | "group name". The group named "group |
 |      |                                      | name" must be in the current group   |
 |      |                                      | scope.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope(), unselectall()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_select.html
 |  
 |  selectall(self, *args)
 |      Selects all objects in the current group scope.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.selectall()                        | Selects all objects in the current   |
 |      |                                      | group scope.                         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope(), unselectall()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_selectall.html
 |  
 |  selectfigure(self, *args)
 |      Selects a figure, which will be shown on screen (gives it focus). A
 |      warning will be generated if the figure does not exist.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.selectfigure()                     | Selects the last figure that was     |
 |      |                                      | created.                             |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.selectfigure(1)                    | Selects figure 1.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      exportfigure(), image(), plot(), setplot(), closeall()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_selectfigure.html
 |  
 |  selectpartial(self, *args)
 |      Selects any objects with a given partial name.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.selectpartial("partialname")       | Selects any objects where            |
 |      |                                      | "partialname" can be found in the    |
 |      |                                      | object name provided the object is   |
 |      |                                      | not in a group. To select objects    |
 |      |                                      | located in groups see the command    |
 |      |                                      | below.                               |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.selectpartial("partialgroupname::p | Selects any objects where            |
 |      | artialname")                         | "partialgroupname" can be found in   |
 |      |                                      | the group name and "partialname" can |
 |      |                                      | be found in the object name.         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_selectpartial.html
 |  
 |  set(self, *args)
 |      Sets a property of currently selected objects. This command will return
 |      an error in analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.set()                        | Returns a list of the properties of  |
 |      |                                      | the selected object(s).              |
 |      +--------------------------------------+--------------------------------------+
 |      | o.set("property",value)              | This will set the properties of a    |
 |      |                                      | currently selected object, including |
 |      |                                      | pull-downs and check boxes. It       |
 |      |                                      | cannot be used to set the value of a |
 |      |                                      | selected object in a group.          |
 |      |                                      |                                      |
 |      |                                      | Value can be a number or string.     |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.set("property",value,i)            | This form can be used to set the     |
 |      |                                      | property of the ith selected object  |
 |      |                                      | when multiple objects are selected.  |
 |      |                                      | It cannot be used to set the value   |
 |      |                                      | of a selected object in a group.     |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      get(), setnamed(), setmaterial(), addmaterial(), haveproperty(),
 |      runsetup(), runanalysis()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_set.html
 |  
 |  seteigensolver(self, *args)
 |      Mode sources and mode expansion monitors in FDTD and MODE have embedded
 |      eigensolvers. This script command makes it possible to set the
 |      properties of that eigensolver without using the GUI.
 |      
 |      Changing any values of the embedded eigensolver with this command will
 |      automatically invalidate any existing mode data. This means that new
 |      updates based on overlap calculations with previous modes will fail
 |      after using this command. Therefore please call this command before
 |      making any calls to updatesourcemode or updatemodes.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.seteigensolver()             | Returns a list of the properties of  |
 |      |                                      | the embedded eigensolver             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.seteigensolver("property",value)   | This will set the eigensolver        |
 |      |                                      | properties of the currently selected |
 |      |                                      | objects.                             |
 |      |                                      |                                      |
 |      |                                      | Value can be a number or string.     |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmode(), addmodeexpansion(), addport(), clearsourcedata(),
 |      clearmodedata(), clearportmodedata(), expand(), geteigensolver(),
 |      updatemodes(), updatesourcemode(), updateportmodes()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_seteigensolver.html
 |  
 |  setexpansion(self, *args)
 |      Associates a DFT monitor with a mode expansion monitor.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setexpansion()               | List all monitors under the          |
 |      |                                      | "Monitors for expansion" list for    |
 |      |                                      | the selected mode expansion monitor. |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setexpansion("name",               | Adds the "dft\_monitor" to the       |
 |      | "dft\_monitor")                      | "Monitors for expansion" list of the |
 |      |                                      | selected mode expansion monitor,     |
 |      |                                      | with the specified name.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addmodeexpansion(), removeexpansion()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setexpansion.html
 |  
 |  setfield(self, *args)
 |      The script command assigns a value to a structure input field.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | output= o.setfield(input,            | Assigns a ‘value’ to a structure     |
 |      | field,value)                         | ‘input’ ‘field’.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      ~~~~~~~~
 |      
 |      isfield(), getfield()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setfield.html
 |  
 |  setglobalmonitor(self, *args)
 |      Sets global monitor properties. This command will return an error in
 |      analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setglobalmonitor()           | Returns a list of the global monitor |
 |      |                                      | properties                           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setglobalmonitor("property",value) | Set the global monitor property      |
 |      |                                      | named "property" to a value.         |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), getglobalmonitor(), setglobalsource(), getglobalsource()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setglobalmonitor.html
 |  
 |  setglobalsource(self, *args)
 |      Sets global source properties. This command will return an error in
 |      analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setglobalsource()            | Returns a list of the global source  |
 |      |                                      | properties                           |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setglobalsource("property",value)  | Set the global source property named |
 |      |                                      | "property" to a value.               |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), setglobalmonitor(), getglobalmonitor(), getglobalsource()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setglobalsource.html
 |  
 |  setlayer(self, *args)
 |      Sets the properties of the specified layer of the selected layer builder
 |      object. There needs to be a layer builder object selected.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setlayer("layer name", "property   | Sets the properties of a specified   |
 |      | name", "property value")             | layer of the selected layer builder  |
 |      |                                      | object.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addlayerbuilder(), getlayerlist(), setlayer(), loadgdsfile(),
 |      addlayer(), getcelllist(), getlayerlist()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setlayer.html
 |  
 |  setmaterial(self, *args)
 |      Sets properties of a material in the material database.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setmaterial("materialname")  | Displays the property names of the   |
 |      |                                      | specified material that can be       |
 |      |                                      | modified.                            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setmaterial( "materialname",       | Sets the property named              |
 |      | "propertyname", newvalue)            | "propertyname" of the material with  |
 |      |                                      | the name "materialname" to newvalue. |
 |      |                                      | The argument newvalue can be a       |
 |      |                                      | number or a string. The arguments    |
 |      |                                      | "propertyname" and "materialname"    |
 |      |                                      | have to match correct string         |
 |      |                                      | exactly. For example,                |
 |      |                                      |                                      |
 |      |                                      |  setmaterial("Si","Mesh order",4);   |
 |      |                                      |                                      |
 |      |                                      | will set the property "mesh order"   |
 |      |                                      | of the materials "Si" to 4.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+
 |      +----+
 |      
 |      See Also
 |      
 |      addmaterial(), deletematerial(), getmaterial(), getindex(),
 |      getfdtdindex()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setmaterial.html
 |  
 |  setmemorycheck(self, *args)
 |  
 |  setname(self, *args)
 |      The script command setname is used to set the name of a datset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setname("test")                    | Returns the name of the dataset of   |
 |      |                                      | the variable a.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getname()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setname.html
 |  
 |  setnamed(self, *args)
 |      Likes the set command, except that the object name must be specified.
 |      This command will return an error in analysis mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setnamed("name")             | Returns a list of the properties of  |
 |      |                                      | the objects called name.             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setnamed("name", "property",       | The same as set, but acts on objects |
 |      | value)                               | with a specific name, instead of     |
 |      |                                      | selected objects.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setnamed("name", "property",       | This form can be used to set the     |
 |      | value,i)                             | property of the ith named object     |
 |      |                                      | when multiple objects have the same  |
 |      |                                      | name.                                |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setnamed("groupname::name",        | The same as set, but acts on objects |
 |      | "property", value)                   | within the group named "groupname"   |
 |      |                                      | that are named "name", instead of    |
 |      |                                      | selected objects.                    |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setnamed("groupname::name",        | This form can be used to set the     |
 |      | "property", value,i)                 | property of the ith object with the  |
 |      |                                      | name "name" in the group "groupname" |
 |      |                                      | when multiple objects have the same  |
 |      |                                      | name.                                |
 |      |                                      |                                      |
 |      |                                      | The objects are ordered by their     |
 |      |                                      | location in the object tree. The     |
 |      |                                      | uppermost selected object is given   |
 |      |                                      | the index 1, and the index numbers   |
 |      |                                      | increase as you go down the tree.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      set(), get(), getnamed(), getnamednumber()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setnamed.html
 |  
 |  setplot(self, *args)
 |      Sets the plot properties of a figure.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.setplot()                    | Creates a string which lists all     |
 |      |                                      | figure properties for the figure     |
 |      |                                      | that is currently selected. Unless   |
 |      |                                      | the selectfigure() command was       |
 |      |                                      | called, the most recently created    |
 |      |                                      | plot will be selected.               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setplot("property", "property      | Set the desired property of the      |
 |      | value")                              | currently selected figure to         |
 |      |                                      | property value.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      image(), plot(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setplot.html
 |  
 |  setresource(self, *args)
 |  
 |  setsourcesignal(self, *args)
 |      Loads a custom source time signal into a source. This advanced source
 |      property allows users to create a custom source source time signal and
 |      spectrum. Custom source time signals are required for some types of
 |      nonlinear simulations. This feature is not recommended for most types of
 |      linear simulations.
 |      
 |      The custom time signal must be defined in terms of the signal Amplitude
 |      and Phase. This is a convenient definition because the Amplitude and
 |      Phase are generally slowly varying as a function of time (compared with
 |      the actual time signal), meaning a lower sampling rate can be used to
 |      define the custom signal. The actual time domain signal injected by the
 |      source is given by:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Real valued time domain fields (ie.  | Complex valued time domain fields    |
 |      | most simulations):                   | (eg. Bloch boundary conditions)      |
 |      |                                      |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setsourcesignal("name", t,         | Sets the time domain signal of       |
 |      | amplitude, phase)                    | source named "name".                 |
 |      |                                      |                                      |
 |      |                                      | t, amplitude, and phase are 1D       |
 |      |                                      | vectors with the same length.        |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setsourcesignal("name", t,         | Allows you to specify the precise    |
 |      | amplitude, phase, fcentre,           | center frequency and bandwidth that  |
 |      | bandwidth)                           | will be used for all simulations.    |
 |      |                                      | These values are used for materials  |
 |      |                                      | fits, calculating the mesh, and      |
 |      |                                      | source limits.                       |
 |      |                                      |                                      |
 |      |                                      | If fcentre and bandwidth are not     |
 |      |                                      | specified, they will be              |
 |      |                                      | automatically estimated from the     |
 |      |                                      | time signal.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcepower()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setsourcesignal.html
 |  
 |  setsweep(self, *args)
 |      Sets a property in a parameter sweep/optimization/Monte
 |      Carlo/S-parameter sweep item.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setsweep("name", "property\_name", | Sets a property in a                 |
 |      | property\_value)                     | sweep/optimization/Monte             |
 |      |                                      | Carlo/S-parameter item.              |
 |      |                                      |                                      |
 |      |                                      | "name" is the absolute name of an    |
 |      |                                      | analysis item.                       |
 |      |                                      |                                      |
 |      |                                      | "property\_name" is the property     |
 |      |                                      | showed in the edit window.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For a sweep analysis:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Argument                             | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "name"              | Sets the name of the sweep.          |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "type"              | Sets the type of the sweep. The      |
 |      |                                      | value of "type" could be "Ranges" or |
 |      |                                      | "Values"                             |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "number of points"  | Sets the number of points of the     |
 |      |                                      | sweep. The default number of points  |
 |      |                                      | is 10.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "resave files after | Defines whether or not to re-save    |
 |      | analysis"                            | the file after analysis.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For an optimization analysis:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Argument                             | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "name"              | Sets the name of the optimization.   |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "Type"              | "Type" = "Maximum", "Minimum"        |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "algorithm"         | "algorithm" = "Particle Swarm",      |
 |      |                                      | "User Defined"                       |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "maximum            | Sets the maximum generation number.  |
 |      | generations"                         |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "reset random       | Checks the box of "Reset random      |
 |      | generator"                           | generation".                         |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "tolerance"         | Sets the tolerance value.            |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "first generation   | Sets the "first generation script"   |
 |      | script"                              | in the "Advanced" tab.               |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "next generation    | Sets the "next generation script" in |
 |      | script"                              | the "Advanced" tab.                  |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "use figure of      | Checks the box of "use figure of     |
 |      | merit script"                        | merit" in the "Figure of merit       |
 |      |                                      | script" tab.                         |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "figure of merit    | Sets the "figure of merit script" in |
 |      | script"                              | the "Figure of merit script" tab.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For a Monte Carlo analysis:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Argument                             | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "name"              | Sets the name of the Monte Carlo.    |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "number of trials"  | Sets the number of trials for the    |
 |      |                                      | Monte Carlo. The default number of   |
 |      |                                      | trials is 10.                        |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "variation"         | Sets the variation for "Process" or  |
 |      |                                      | "Mismatch" or "Both". The default    |
 |      |                                      | variation is "Both".                 |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "seed"              | Sets the seed.                       |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "enable seed"       | Sets whether or not to enable the    |
 |      |                                      | seed.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "individual trial"  | Sets the individual trial number.    |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "enable individual  | Sets whether or not to enable        |
 |      | trail"                               | individual trials.                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      For an S-parameter sweep analysis:
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Argument                             | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | property\_name = "name"              | Sets the name of the s-parameter     |
 |      |                                      | sweep.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | Additional Notes:                                                        |
 |      |                                                                          |
 |      | Except for the listed default properties of the sweep/optimization/Monte |
 |      | Carlo/S-parameter, any added sweep parameters can be edited by the       |
 |      | setsweep command by setting the "property\_name" to the parameter name.  |
 |      +--------------------------------------------------------------------------+
 |      
 |      See Also
 |      
 |      deletesweep(), copysweep(), pastesweep(), addsweep(), insertsweep(),
 |      getsweep(), addsweepparameter(), addsweepresult(),
 |      removesweepparameter(), removesweepresult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setsweep.html
 |  
 |  setview(self, *args)
 |      This command allows the viewing properties of the Layout Editor to be
 |      modified.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | outstring = o.setview()              | Returns a list of the view           |
 |      |                                      | properties that can be set. The      |
 |      |                                      | command                              |
 |      |                                      |                                      |
 |      |                                      | ?setview;                            |
 |      |                                      |                                      |
 |      |                                      | will return                          |
 |      |                                      |                                      |
 |      |                                      | extent, zoom, theta, phi             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setview("property")                | Sets the default value for any of    |
 |      |                                      | the view properties. For example,    |
 |      |                                      |                                      |
 |      |                                      | setview("extent");                   |
 |      |                                      |                                      |
 |      |                                      | is the same as pressing the          |
 |      |                                      | graphical extent button.             |
 |      +--------------------------------------+--------------------------------------+
 |      | o.setview("property",value)          | Sets the values to of any property   |
 |      |                                      | for viewing.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      The following table describes the properties that can be set
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Property                             | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | extent                               | Control the view extent. In this     |
 |      |                                      | case, value should be a 2x1, 4x1 or  |
 |      |                                      | 6x1 matrix representing the view     |
 |      |                                      | range min x, max x, min y, max y,    |
 |      |                                      | min z and max z respectively.        |
 |      +--------------------------------------+--------------------------------------+
 |      | zoom                                 | Controls the relative zoom of the    |
 |      |                                      | perspective view compared to the     |
 |      |                                      | default level. To zoom in by a       |
 |      |                                      | factor of 2 in the perspective view, |
 |      |                                      | use                                  |
 |      |                                      |                                      |
 |      |                                      | setview("zoom",2);                   |
 |      +--------------------------------------+--------------------------------------+
 |      | theta                                | Controls the polar angle of the      |
 |      |                                      | perspective view, in degrees.        |
 |      +--------------------------------------+--------------------------------------+
 |      | phi                                  | Controls the azimuthal angle of the  |
 |      |                                      | perspective view, in degrees.        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getview(), orbit(), redraw()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_setview.html
 |  
 |  shiftselect(self, *args)
 |      Same as select, but does not unselect other currently selected objects.
 |      Note that only objects from the same "group" can be selected
 |      simultaneously.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.shiftselect("name")                | The same as select("name"), but does |
 |      |                                      | not unselect currently selected      |
 |      |                                      | objects. Can be used to select       |
 |      |                                      | multiple objects.                    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.shiftselect("group name::name")    | The same as                          |
 |      |                                      | select("groupname::name"), but does  |
 |      |                                      | not unselect currently selected      |
 |      |                                      | objects.                             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_shiftselect.html
 |  
 |  shiftselectpartial(self, *args)
 |      Same as selectpartial, but does not unselect other currently selected
 |      objects.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.shiftselectpartial("partialname")  | The same as                          |
 |      |                                      | selectpartial("partialname"), but    |
 |      |                                      | does not unselect currently selected |
 |      |                                      | objects. Can be used to select       |
 |      |                                      | multiple objects.                    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      | o.shiftselectpartial("partialgroupna | The same as                          |
 |      | me::partialname")                    | selectpartial("partialgroupname::par |
 |      |                                      | tialname"),                          |
 |      |                                      | but does not unselect currently      |
 |      |                                      | selected objects. Can be used to     |
 |      |                                      | select multiple objects.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      groupscope()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_shiftselectpartial.html
 |  
 |  sign(self, *args)
 |      Returns the sign of a number.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sign(data)                   | If data is real:                     |
 |      |                                      |                                      |
 |      |                                      | sign = 0 for data=0                  |
 |      |                                      |                                      |
 |      |                                      | sign = 1 for data>0                  |
 |      |                                      |                                      |
 |      |                                      | sign =-1 for data<0                  |
 |      |                                      |                                      |
 |      |                                      | If data is complex:                  |
 |      |                                      |                                      |
 |      |                                      | sign = 0 for data=0+0i               |
 |      |                                      |                                      |
 |      |                                      | sign = data/abs(data) for data       |
 |      |                                      | different from zero                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      floor(), ceil()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sign.html
 |  
 |  simulation(self, *args)
 |      The script command simulation returns bandwidth related simulation
 |      properties. The time domain simulator will try to accommodate the
 |      current channels into non-overlapping simulation bandwidths. Simulation
 |      properties include the center frequency, sample rate, number of samples,
 |      frequency grid spacing, lower and upper frequency limits. If a single
 |      bandwidth is listed, this means all channels fit in the same bandwidth,
 |      otherwise multiple bandwidths are required to accommodate all channels
 |      with the current sample rate.
 |      
 |      The command also returns the list of source channels in the current
 |      simulation before the simulation estimate the simulation bandwidths.
 |      This list includes the overlapped bandwidths. Simulation properties
 |      include the center frequency, sample rate, number of samples, frequency
 |      grid spacing, lower and upper frequency limits. If a single bandwidth is
 |      listed, this means all channels fit in the same bandwidth, otherwise
 |      multiple bandwidths are required to accommodate all channels with the
 |      current sample rate.
 |      
 |      This function is valid during analysis or run-time mode only.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.simulation(“bandwidth”)      | Returns bandwidth related simulation |
 |      |                                      | properties.                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.simulation(“channels”)       | Returns the list of source channels  |
 |      |                                      | in the current simulation before the |
 |      |                                      | simulation estimate the simulation   |
 |      |                                      | bandwidths.                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.simulation(“single”)         | Returns the recommended setting for  |
 |      |                                      | simulation using a single band       |
 |      |                                      | (total field) that will make sure    |
 |      |                                      | all channels are merged into one     |
 |      |                                      | simulation bandwidth.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_simulation2.html
 |  
 |  simulationdiverged(self, *args)
 |      In layout mode, check whether the simulation reached the divergence
 |      checking auto shutoff threshold.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.simulationdiverged()           | Returns 1 if the simulation reached  |
 |      |                                      | the auto shutoff max threshold, 0    |
 |      |                                      | otherwise.                           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_simulationdiverged.html
 |  
 |  sin(self, *args)
 |      Calculates the trigonometric sine function. Angle units are in radians.
 |      The function is defined for complex angles. Phase of a complex number is
 |      evaluated between -pi and pi.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sin(x)                       | Returns the complex sine of x.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      asin()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sin.html
 |  
 |  size(self, *args)
 |      Returns the size of a matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | y = o.size(x)                        | y is a matrix which shows the        |
 |      |                                      | dimensions of x.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | y = o.size(x,n)                      | n is an optional parameter to get    |
 |      |                                      | the size of the matrix in a specific |
 |      |                                      | dimension                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), flip(), transpose()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_size.html
 |  
 |  smithchart(self, *args)
 |      Plots impedance values in a Smith chart. The default impedance used for
 |      normalization is 50 Ohms; this can be modified in the plot settings once
 |      the plot has been created (see Visualizer for rectilinear data).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.smithchart(Z)                | Creates a curve in a Smith chart     |
 |      |                                      | with the impedance values in the     |
 |      |                                      | array Z. The array Z must be of the  |
 |      |                                      | form NX1 or 1XN.                     |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.smithchart(Z1,Z2,Z3)         | Creates three curves in a Smith      |
 |      |                                      | chart with the impedance values in   |
 |      |                                      | the arrays Z1, Z2 and Z3. Each array |
 |      |                                      | must be of the form NX1 or 1XN, but  |
 |      |                                      | they do not have to be of the same   |
 |      |                                      | dimension.                           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.smithchart(Z, "title",       | Creates a Smith chart with a title,  |
 |      | "aspect ratio", norm\_Z)             | a given aspect ratio and a           |
 |      |                                      | normalized impedance norm\_Z. The    |
 |      |                                      | aspect ratio must be string that is  |
 |      |                                      | either "1:1" or "fill scene".        |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      polar(), setplot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_smithchart.html
 |  
 |  solar(self, *args)
 |      Returns the solar power spectrum, in Watts/meter^2/meter.
 |      
 |      The values are based on the global tilt values from the following link:
 |      Reference Solar Spectrum Irradiance: ASTM G-173.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.solar(1)                     | Returns the power of the solar       |
 |      |                                      | spectrum as a function of            |
 |      |                                      | wavelength, in W/m^2/m               |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.solar(0)                     | Returns the corresponding wavelength |
 |      |                                      | vector, in m                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plot(), integrate()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_solar.html
 |  
 |  solve(self, *args)
 |  
 |  sort(self, *args)
 |  
 |  sortmap(self, *args)
 |  
 |  sourceintensity(self, *args)
 |      Returns the source power divided by the area of the source. In 3D
 |      simulations, the units will be in Watts/m2 if CW norm is used, and
 |      Watts/m2/Hertz2 if No norm is used. This function is often used when
 |      normalizing power measurements from simulations with a TFSF source.
 |      
 |      In the case of multiple sources, the sourceintensity(f) command will
 |      return the sum of all sourceintensity from all sources.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity(f)           | Returns the source intensity at the  |
 |      |                                      | vector of frequency points f (f is   |
 |      |                                      | the frequency in Hz).                |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity(f, option)   | The additional argument, option, can |
 |      |                                      | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity(f, option,   | This function makes it possible to   |
 |      | name)                                | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm(), sourcepower(), sourceintensity\_avg(),
 |      sourceintensity\_pavg(), dipolepower(), transmission(), cwnorm(),
 |      nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourceintensity.html
 |  
 |  sourceintensity_avg(self, *args)
 |      Returns the total spectral average intensity injected into the
 |      simulation by the source. The average intensity is equal to the average
 |      power divided by the source area. See the sourcepower\_pavg command and
 |      the Units and normalization - Spectral averaging section for more
 |      information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_avg()       | Returns the spectrally averaged      |
 |      |                                      | source intensity as defined above.   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_avg(option) | The additional argument, option, can |
 |      |                                      | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_avg(option, | This function makes it possible to   |
 |      | "sourcename")                        | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm2\_avg(), sourceintensity(), sourcepower(),
 |      transmission\_avg(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourceintensity_avg.html
 |  
 |  sourceintensity_pavg(self, *args)
 |      Returns the partial spectral average intensity injected into the
 |      simulation by the source. The partial average intensity is equal to the
 |      partial average power divided by the source area. See the
 |      sourcepower\_pavg command and the Units and normalization - Spectral
 |      averaging section for more information.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_pavg (f,df) | Returns the spectrally averaged      |
 |      |                                      | source power as defined above. The   |
 |      |                                      | quantity f is the frequency and the  |
 |      |                                      | quantity df is the frequency range   |
 |      |                                      | around which the averaging is        |
 |      |                                      | performed, both in Hz.               |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_pavg(f,df,  | The additional argument, option, can |
 |      | option)                              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourceintensity\_pavg(f,df,  | This function makes it possible to   |
 |      | option, "sourcename")                | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm2\_pavg(), sourcepower(), sourcepower\_avg(),
 |      transmission\_pavg(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourceintensity_pavg.html
 |  
 |  sourcenorm(self, *args)
 |      Returns the source normalization spectrum used to normalize data in the
 |      cwnorm state for standard fourier transform quantities. See the Units
 |      and normalization chapter for more information. If the source time
 |      signal of the jth source in the simulation is sj(t), and N is the number
 |      of active sources then
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm(f)                | Returns the source normalization     |
 |      |                                      | used to normalize data in the cwnorm |
 |      |                                      | state at the vector of frequency     |
 |      |                                      | points f. (f is the frequency in Hz) |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm(f, name)          | This function makes it possible to   |
 |      |                                      | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm2\_avg(), sourcenorm2\_pavg(), sourcepower(), cwnorm(),
 |      nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcenorm.html
 |  
 |  sourcenorm2_avg(self, *args)
 |      Returns the source normalization spectrum used to normalize data in the
 |      cwnorm state for the total spectral averaged quantities. See the Units
 |      and normalization - Spectral averaging section for more information.
 |      
 |      The script function sourcenorm is defined as
 |      
 |      If sourcenorm2\_avg is called without any arguments, it returns
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm2\_avg()           | This function returns the source     |
 |      |                                      | normalization for total spectral     |
 |      |                                      | averaged quantities.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm2\_avg(            | This function makes it possible to   |
 |      | "sourcename")                        | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm(), sourcenorm2\_pavg(), sourcepower\_avg(), cwnorm(),
 |      nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcenorm2_avg.html
 |  
 |  sourcenorm2_pavg(self, *args)
 |      Returns the source normalization spectrum used to normalize data in the
 |      cwnorm state for the partial spectral averaged quantities. See the Units
 |      and normalization - Spectral averaging section for more information.
 |      
 |      If the source time signal of the jth source in the simulation is sj(t),
 |      and N is the number of active sources then
 |      
 |      Partial spectral averaging uses a Lorentzian weighting of the following
 |      form. Delta is the FWHM of \|h\|2.
 |      
 |      If this function is called without any arguments, it returns
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm2\_pavg( f, delta) | This function returns the source     |
 |      |                                      | normalization for partial spectral   |
 |      |                                      | averaged quantities.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcenorm2\_pavg( f, delta, | This function makes it possible to   |
 |      | "sourcename")                        | perform the normalization using the  |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all the sources.          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm(), sourcenorm2\_avg(), sourcepower\_pavg(), cwnorm(),
 |      nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcenorm2_partial_avg.html
 |  
 |  sourcepower(self, *args)
 |      Returns the power injected into the simulation by the source.
 |      
 |      Dipole sources
 |      
 |      The sourcepower script function returns the power the dipole source
 |      would radiate in a homogeneous medium. This quantity can be calculated
 |      analytically (see Dipoles - Radiated Power). The actual radiated power
 |      is not given by the sourcepower function. The actual radiated power is
 |      highly dependant on the surrounding materials, since the reflections
 |      from the structures will interfere with the fields from the dipole,
 |      changing the actual radiated power. To get the actual radiated power,
 |      see the dipolepower script function.
 |      
 |      Other sources (Gaussian, plane wave, mode, etc)
 |      
 |      The sourcepower is determined from the equation below. Note that is the
 |      Poynting vector determined from the E, H fields injected by the source.
 |      The integral is evaluated over the injection plane of the source.
 |      
 |      As stated above, sourcepower gives the amount of power injected into the
 |      simulation. The only exception is if the simulation is setup such that
 |      there is radiation which travels through the injection plane of the
 |      source in the source injection direction (pink arrow). In such cases,
 |      the actual amount of power injected by the source will not be given by
 |      sourcepower. In this situation, the incident radiation interferes with
 |      the source, changing the amount of injected power (similar to what
 |      happens for the dipole source). In most cases, this means your
 |      simulation is not setup properly.
 |      
 |      Additional notes
 |      
 |      •In the case of multiple sources, the sourcepower(f) command will return
 |      the sum of all sourcepowers from all sources.
 |      
 |      •In 3D simulations, the units will be in Watts if CW norm is used, and
 |      Watts/Hertz2 if no norm is used.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower(f)               | Returns the source power used to     |
 |      |                                      | normalize transmission calculations  |
 |      |                                      | at the vector of frequency points f. |
 |      |                                      | (f is the frequency in Hz)           |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower(f, option)       | The additional argument, option, can |
 |      |                                      | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower(f, option, name) | This option allows you to obtain the |
 |      |                                      | spectrum of one source, rather than  |
 |      |                                      | the sum of all sources. This option  |
 |      |                                      | is only needed for simulations with  |
 |      |                                      | multiple sources.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm(), sourcepower\_avg(), sourcepower\_pavg(), dipolepower(),
 |      transmission(), sourceintensity(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcepower.html
 |  
 |  sourcepower_avg(self, *args)
 |      Returns the total spectral average power injected into the simulation by
 |      the source. See the Units and normalization - Spectral averaging section
 |      for more information.
 |      
 |      This script function calculates the following quantities, depending on
 |      whether the normalization state is cwnorm or nonorm:
 |      
 |      where sourcepower is the quantity returned by the sourcepower script
 |      function, s(w) is returned by sourcenorm, and ω=2pif. Typically, this
 |      function should be used in the cwnorm state. Also see the
 |      sourcenorm2\_pavg script function.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_avg()           | Returns the spectrally averaged      |
 |      |                                      | source power as defined above.       |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_avg(option)     | The additional argument, option, can |
 |      |                                      | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_avg(option,     | This option allows you to obtain the |
 |      | "sourcename")                        | spectrum of one source, rather than  |
 |      |                                      | the sum of all sources. This option  |
 |      |                                      | is only needed for simulations with  |
 |      |                                      | multiple sources.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm2\_avg(), sourcepower(), sourcepower\_pavg(),
 |      transmission\_avg(), sourceintensity\_avg(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcepower_avg.html
 |  
 |  sourcepower_pavg(self, *args)
 |      Returns the partial spectral average power injected into the simulation
 |      by the source. See the Units and normalization - Spectral averaging
 |      section for more information.
 |      
 |      Partial spectral averaging uses a Lorentzian weighting of the form
 |      
 |      This script function calculates the following quantities, depending on
 |      whether the normalization state is cwnorm or nonorm:
 |      
 |      where sourcepower is the quantity returned by the sourcepower script
 |      function, s(w) is returned by sourcenorm, and ω=2pif. Typically, this
 |      function should be used in the cwnorm state. Also see the
 |      sourcenorm2\_pavg script function.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_pavg(f,df)      | Returns the spectrally averaged      |
 |      |                                      | source power as defined above. The   |
 |      |                                      | quantity f is the frequency and the  |
 |      |                                      | quantity df is the frequency range   |
 |      |                                      | around which the averaging is        |
 |      |                                      | performed, both in Hz.               |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_pavg(f,         | The additional argument, option, can |
 |      | df,option)                           | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sourcepower\_pavg(f,df,      | This option allows you to obtain the |
 |      | option, "sourcename")                | spectrum of one source, rather than  |
 |      |                                      | the sum of all sources. This option  |
 |      |                                      | is only needed for simulations with  |
 |      |                                      | multiple sources.                    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcenorm2\_pavg(), sourcepower(), sourcepower\_avg(),
 |      transmission\_pavg(), sourceintensity\_pavg(), cwnorm(), nonorm()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sourcepower_partial_avg.html
 |  
 |  spline(self, *args)
 |      Does a cubic spline interpolation of a data set.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.spline(Ex,xold,xnew)         | Cubic spline interpolation of a 1D   |
 |      |                                      | function.                            |
 |      |                                      |                                      |
 |      |                                      | •Ex is an existing data set          |
 |      |                                      |                                      |
 |      |                                      | •xold specifies the points where Ex  |
 |      |                                      | is sampled                           |
 |      |                                      |                                      |
 |      |                                      | •xnew specifies new points to        |
 |      |                                      | interpolate the data.                |
 |      |                                      |                                      |
 |      |                                      | The points in xnew do not have to be |
 |      |                                      | within the bounds of xold.           |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      interp(), plotxy()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_spline.html
 |  
 |  splitstring(self, *args)
 |      Splits a long string into a series of substrings, where the substrings
 |      are stored in a cell (i.e., string) array.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | s2 = o.splitstring(s1,endl)          | Split the string S1 into a series of |
 |      |                                      | strings, using the end of line       |
 |      |                                      | character as the delimiter between   |
 |      |                                      | strings. S2 is a cell array.         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      cell(), dir(), getresult(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_splitstring.html
 |  
 |  sqrt(self, *args)
 |      Calculates the square root of a number. Input can be complex or
 |      negative.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sqrt(x)                      | The square root of x. The square     |
 |      |                                      | root is chosen so that               |
 |      |                                      | real(sqrt(x))≥0 for any complex      |
 |      |                                      | number x. The imaginary part,        |
 |      |                                      | imag(sqrt(x)), can be positive or    |
 |      |                                      | negative but if real(sqrt(x))=0 then |
 |      |                                      | imag(sqrt(x))≥0.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+----+
 |      +----+----+
 |      
 |      See Also
 |      
 |      
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sqrt.html
 |  
 |  sroughness(self, *args)
 |      Returns a matrix containing a rough surface characterized by an RMS
 |      amplitude.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out= o.sroughness(x\_span, y\_span,  | Returns a matrix containing a rough  |
 |      | sigma\_rms, corr\_x, corr\_y, seed)  | surface characterized by an RMS      |
 |      |                                      | amplitude ‘sigma\_rms’ and           |
 |      |                                      | correlation lengths ‘corr\_x’ and    |
 |      |                                      | ‘corr\_y’. The roughness is          |
 |      |                                      | generated by creating a random       |
 |      |                                      | matrix of values in K space defined  |
 |      |                                      | by ‘x\_span’ and ‘y\_span’. A        |
 |      |                                      | Gaussian filter is applied to this   |
 |      |                                      | matrix, then a Fourier transform is  |
 |      |                                      | used to transform the matrix back to |
 |      |                                      | real space. Due to the way the       |
 |      |                                      | Fourier transform is setup, the      |
 |      |                                      | roughness will be periodic with      |
 |      |                                      | period x, y span. This is convenient |
 |      |                                      | for some application, particularly   |
 |      |                                      | when using periodic boundary         |
 |      |                                      | conditions. The parameter ‘seed’     |
 |      |                                      | defined the random seed value used   |
 |      |                                      | to generate the surface.             |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      splitstring(), lower(), upper()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sroughness.html
 |  
 |  stackdipole(self, *args)
 |      Analytically calculates the dipole emission properties for a multilayer
 |      stack. For unpatterned planar stacks, this is often much more efficient
 |      than running fully vectorial simulations with FDTD Solutions.
 |      
 |      This function returns the luminance (cd/m^2) and radiance
 |      (W/steradian/m^2) as a function of emission angle, as well as the
 |      corresponding X, Y, Z tristimulus values, assuming current density of
 |      1A/m^2. The CIE 1931 color functions [1] are used for calculating X, Y,
 |      Z.
 |      
 |      References:
 |      ~~~~~~~~~~~
 |      
 |      [1] CIE Proceedings (1932), 1931. Cambridge: Cambridge University Press.
 |      
 |       
 |      ~
 |      
 |      Related topics:
 |      ~~~~~~~~~~~~~~~
 |      
 |      To calculate the Purcell factor and far-field emission power density for
 |      a multilayer stack, see stackpurcell.
 |      
 |      For simulating the plane wave transmission of a multi-layer stack, see
 |      stackrt, stackfield
 |      
 |      For mode analysis of an OLED layer structure, see OLED slab mode
 |      analysis. For simulating the dipole emission for arbitrary geometries
 |      using the finite-difference time-domain method, see OLED application
 |      examples.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Thickness of first and last layer                                  |
 |      |                                                                          |
 |      | It is necessary to specify the thickness of each layer, including the    |
 |      | first and last layers. Often, a thickness of zero can be used for these  |
 |      | layers.                                                                  |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | dipole\_emission =                   | Analytically calculates the dipole   |
 |      | o.stackdipole(n,d,f,z,dipole\_spec,o | emission properties of a multi-layer |
 |      | rientation,res,direction,            | stack                                |
 |      | ef,st,rd)                            |                                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | n              | required       |                | vector         | Refractive     |
 |      |                |                |                |                | index of each  |
 |      |                |                |                |                | layer.         |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is either |
 |      |                |                |                |                | Nlayers, or    |
 |      |                |                |                |                | Nlayers x      |
 |      |                |                |                |                | length(f) if   |
 |      |                |                |                |                | dispersive     |
 |      |                |                |                |                | materials are  |
 |      |                |                |                |                | involved.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | d              | required       |                | vector         | Thickness of   |
 |      |                |                |                |                | each layer.    |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Nlayers.       |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | required       |                | vector         | Frequency      |
 |      |                |                |                |                | vector.        |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | z              | required       |                | vector         | Position of    |
 |      |                |                |                |                | the dipoles (0 |
 |      |                |                |                |                | is the bottom  |
 |      |                |                |                |                | of the stack). |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | dipole\_spec   | required       |                | vector         | Dipole         |
 |      |                |                |                |                | spectrum. This |
 |      |                |                |                |                | is treated as  |
 |      |                |                |                |                | a power        |
 |      |                |                |                |                | intensity      |
 |      |                |                |                |                | distribution,  |
 |      |                |                |                |                | integrated by  |
 |      |                |                |                |                | midpoint rule  |
 |      |                |                |                |                | in wavelength. |
 |      |                |                |                |                | The photon     |
 |      |                |                |                |                | probability    |
 |      |                |                |                |                | distribution   |
 |      |                |                |                |                | is calculated  |
 |      |                |                |                |                | by normalizing |
 |      |                |                |                |                | dipole\_spec/f |
 |      |                |                |                |                | .              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles x     |
 |      |                |                |                |                | length(f).     |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | orientation    | optional       | 0              | vector         | Orientation of |
 |      |                |                |                |                | the dipoles.   |
 |      |                |                |                |                | The options    |
 |      |                |                |                |                | are            |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Unpolarized: 0 |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Vertical       |
 |      |                |                |                |                | p-polarized :  |
 |      |                |                |                |                | 1              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Horizontal     |
 |      |                |                |                |                | s-polarized: 2 |
 |      |                |                |                |                |                |
 |      |                |                |                |                | horizontal     |
 |      |                |                |                |                | p-polarized :  |
 |      |                |                |                |                | 3              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | res            | optional       | 1000           | number         | The resolution |
 |      |                |                |                |                | for far field  |
 |      |                |                |                |                | emission       |
 |      |                |                |                |                | angle.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | direction      | optional       | 1              | number         | Choice of far  |
 |      |                |                |                |                | field half     |
 |      |                |                |                |                | space, this    |
 |      |                |                |                |                | can be +1      |
 |      |                |                |                |                | (top) or -1    |
 |      |                |                |                |                | (bottom).      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | ef             | optional       | 1              | vector         | The exciton    |
 |      |                |                |                |                | fraction. The  |
 |      |                |                |                |                | default value  |
 |      |                |                |                |                | is 1, which    |
 |      |                |                |                |                | means that     |
 |      |                |                |                |                | every carrier  |
 |      |                |                |                |                | results in an  |
 |      |                |                |                |                | exciton.       |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | st             | optional       | 0.25           | vector         | The singlet    |
 |      |                |                |                |                | exciton        |
 |      |                |                |                |                | fraction. The  |
 |      |                |                |                |                | default value  |
 |      |                |                |                |                | is 0.25, which |
 |      |                |                |                |                | means that     |
 |      |                |                |                |                | there are 3    |
 |      |                |                |                |                | spin triplets  |
 |      |                |                |                |                | per spin       |
 |      |                |                |                |                | singlet.       |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | rd             | optional       | 1              | vector         | The relative   |
 |      |                |                |                |                | decay rate.    |
 |      |                |                |                |                | The default    |
 |      |                |                |                |                | value is 1,    |
 |      |                |                |                |                | which means    |
 |      |                |                |                |                | that every     |
 |      |                |                |                |                | singlet        |
 |      |                |                |                |                | exciton        |
 |      |                |                |                |                | results in a   |
 |      |                |                |                |                | photon and     |
 |      |                |                |                |                | there is no    |
 |      |                |                |                |                | contribution   |
 |      |                |                |                |                | from           |
 |      |                |                |                |                | non-radiative  |
 |      |                |                |                |                | decay          |
 |      |                |                |                |                | processes.     |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      stackrt(), stackfield(), stackpurcell()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stackdipole.html
 |  
 |  stackfield(self, *args)
 |      Calculates the fields within a multilayer stack illuminated from below
 |      by a plane wave using the analytic transfer matrix method. This function
 |      returns the E and H fields (Es, Ep, Hs, Hp). All results are returned in
 |      a single dataset as a function of frequency, incidence angle and
 |      location in the stack (z).
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Thickness of first and last layer                                  |
 |      |                                                                          |
 |      | It is necessary to specify the thickness of each layer, including the    |
 |      | first and last layers. Often, a thickness of zero can be used for these  |
 |      | layers, meaning the results will be calculated just beyond the first and |
 |      | last interface. If a larger value is used, the results will be           |
 |      | calculated further from the interface. For non-lossy materials, this     |
 |      | will not affect the reflected and transmitted power, but it will change  |
 |      | phase of the complex coefficients.                                       |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note:                                                                    |
 |      |                                                                          |
 |      | This script command was introduced in the 2016b release.                 |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | field = o.stackfield(n,d,f)          | Arguments for a stack with Nlayers:  |
 |      |                                      |                                      |
 |      |                                      | n: Refractive index of each layer.   |
 |      |                                      | Size is either Nlayers, or Nlayers x |
 |      |                                      | length(f) if dispersive materials    |
 |      |                                      | are involved.                        |
 |      |                                      |                                      |
 |      |                                      | d: Thickness of each layer. Size is  |
 |      |                                      | Nlayers.                             |
 |      |                                      |                                      |
 |      |                                      | f: Frequency vector.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | field =                              | theta: Angle vector, in degrees.     |
 |      | o.stackfield(n,d,f,theta,res)        | Optional, default is 0.              |
 |      |                                      |                                      |
 |      |                                      | res: resolution in the field result  |
 |      |                                      | returned. Optional, default is 1000. |
 |      +--------------------------------------+--------------------------------------+
 |      | field =                              | min/max: the min/max position where  |
 |      | o.stackfield(n,d,f,theta,res,min,max | the user wishes to compute the       |
 |      | )                                    | field. 0 corresponds to the bottom   |
 |      |                                      | of the stack. Optional, default is   |
 |      |                                      | the span of the multilayer stack.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      stackrt(), getfdtdindex(), visualize(), stackdipole()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stackfield.html
 |  
 |  stackpurcell(self, *args)
 |      Analytically calculates the Purcell factor and far-field emission power
 |      density for a multilayer stack. The usage for this command is very
 |      similar to stackdipole, but the result returned in this case is a struct
 |      that contains the following datasets:
 |      
 |      1. power
 |      
 |      Attribute: purcell\_factor. This is the total power of a monochromatic
 |      dipole at the specified position and emission frequency divided by the
 |      power that it would radiate in a homogeneous medium.
 |      
 |      Parameters: dipole/z, f/lambda
 |      
 |      2. density
 |      
 |      Attributes: upward, downward, upward\_into\_air, downward\_into\_air.
 |      This is the power density per steradian by far field emission angle,
 |      also in units of the power that would radiate in a homogeneous medium.
 |      
 |      Parameters: theta, dipole/z, frequency/wavelength
 |      
 |      Related topics:
 |      ~~~~~~~~~~~~~~~
 |      
 |      To calculate the luminance and radiance of a multi-layer stack, see
 |      stackdipole
 |      
 |      For simulating the plane wave transmission of a multi-layer stack, see
 |      stackrt, stackfield For mode analysis of an OLED layer structure, see
 |      OLED slab mode analysis. For simulating the dipole emission for
 |      arbitrary geometries using the finite-difference time-domain method, see
 |      OLED application examples.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Thickness of first and last layer                                  |
 |      |                                                                          |
 |      | It is necessary to specify the thickness of each layer, including the    |
 |      | first and last layers. Often, a thickness of zero can be used for these  |
 |      | layers.                                                                  |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | result =                             | Analytically calculates the Purcell  |
 |      | o.stackpurcell(n,d,f,z,orientation,r | factor and far-field emission power  |
 |      | es)                                  | density of a multi-layer stack       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | n              | required       |                | vector         | Refractive     |
 |      |                |                |                |                | index of each  |
 |      |                |                |                |                | layer.         |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is either |
 |      |                |                |                |                | Nlayers, or    |
 |      |                |                |                |                | Nlayers x      |
 |      |                |                |                |                | length(f) if   |
 |      |                |                |                |                | dispersive     |
 |      |                |                |                |                | materials are  |
 |      |                |                |                |                | involved.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | d              | required       |                | vector         | Thickness of   |
 |      |                |                |                |                | each layer.    |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Nlayers.       |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | f              | required       |                | vector         | Frequency      |
 |      |                |                |                |                | vector.        |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | z              | required       |                | vector         | Position of    |
 |      |                |                |                |                | the dipoles (0 |
 |      |                |                |                |                | is the bottom  |
 |      |                |                |                |                | of the stack). |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | orientation    | optional       | 0              | vector         | Orientation of |
 |      |                |                |                |                | the dipoles.   |
 |      |                |                |                |                | The options    |
 |      |                |                |                |                | are            |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Unpolarized: 0 |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Vertical       |
 |      |                |                |                |                | p-polarized :  |
 |      |                |                |                |                | 1              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Horizontal     |
 |      |                |                |                |                | s-polarized: 2 |
 |      |                |                |                |                |                |
 |      |                |                |                |                | horizontal     |
 |      |                |                |                |                | p-polarized :  |
 |      |                |                |                |                | 3              |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Size is        |
 |      |                |                |                |                | Ndipoles.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | res            | optional       | 1000           | number         | The resolution |
 |      |                |                |                |                | for far field  |
 |      |                |                |                |                | emission       |
 |      |                |                |                |                | angle.         |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      stackrt(), stackfield(), stackdipole()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stackpurcell.html
 |  
 |  stackrt(self, *args)
 |      Calculates the reflection and transmission of a plane wave through a
 |      multi-layer stack using the analytic transfer matrix method. This
 |      function returns the fraction of transmitted and reflected power (Ts,
 |      Tp, Rs, Rp), and the complex reflection and transmission coefficients
 |      (ts, tp, rs, rp), for both S and P polarizations. All results are
 |      returned in a single dataset as a function of frequency and incidence
 |      angle (optional).
 |      
 |      To calculate the fields within the stack, please see stackfield.
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Thickness of first and last layer                                  |
 |      |                                                                          |
 |      | It is necessary to specify the thickness of each layer, including the    |
 |      | first and last layers. Often, a thickness of zero can be used for these  |
 |      | layers, meaning the results will be calculated just beyond the first and |
 |      | last interface. If a larger value is used, the results will be           |
 |      | calculated further from the interface. For non-lossy materials, this     |
 |      | will not affect the reflected and transmitted power, but it will change  |
 |      | phase of the complex coefficients.                                       |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | Note: Sign convention for rp                                             |
 |      |                                                                          |
 |      | stackrt uses the convention that rp is positive when the incident and    |
 |      | reflected magnetic fields are parallel.                                  |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | RT = o.stackrt(n,d,f)                | Arguments for a stack with Nlayers:  |
 |      |                                      |                                      |
 |      |                                      | n: Refractive index of each layer.   |
 |      |                                      | Size is either Nlayers, or Nlayers x |
 |      |                                      | length(f) if dispersive materials    |
 |      |                                      | are involved.                        |
 |      |                                      |                                      |
 |      |                                      | d: Thickness of each layer. Size is  |
 |      |                                      | Nlayers.                             |
 |      |                                      |                                      |
 |      |                                      | f: Frequency vector.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | RT = o.stackrt(n,d,f,theta)          | theta: Angle vector, in degrees.     |
 |      |                                      | Optional.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      stackfield(), getfdtdindex(), visualize()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stackrt.html
 |  
 |  std(self, *args)
 |      Returns the standard deviation of the all entries of the specified
 |      matrix. The standard deviation of a set of N numbers X = [x1,...,xN] is
 |      defined as
 |      
 |      where μ is the mean of X.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.std(A)                       | Will return the standard deviation   |
 |      |                                      | of matrix A, over all dimensions.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      var(), mean(), sum(), length()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_std.html
 |  
 |  stepimport(self, *args)
 |      Adds a structure to the simulation environment with structure geometry
 |      loaded from specified STEP file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.stepimport("filename")             | Add new structures from specified    |
 |      |                                      | STEP (AP203/214) type CAD file.      |
 |      |                                      | Supports multibody parts. Only       |
 |      |                                      | manifold solid bodies are imported - |
 |      |                                      | wires, surfaces and faceted solids   |
 |      |                                      | will not be imported.                |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stepimport.html
 |  
 |  stlimport(self, *args)
 |      Adds a structure to the simulation environment with structure geometry
 |      loaded from specified STL file.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.stlimport(filename,scalingFactor,  | Add a new structure from specified   |
 |      | vertexRadius,debugFlag)              | STL type CAD file.                   |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | Parameter      |                | Default value  | Type           | Description    |
 |      +================+================+================+================+================+
 |      | filename       | required       |                | string         | Name of the    |
 |      |                |                |                |                | STL CAD file.  |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | scalingFactor  | optional       | 1e-6           | number         | An STL file    |
 |      |                |                |                |                | does not       |
 |      |                |                |                |                | contain a      |
 |      |                |                |                |                | unit. When     |
 |      |                |                |                |                | imported to    |
 |      |                |                |                |                | Lumerical's    |
 |      |                |                |                |                | software, the  |
 |      |                |                |                |                | unit is micron |
 |      |                |                |                |                | by default. To |
 |      |                |                |                |                | have the unit  |
 |      |                |                |                |                | in nanometer,  |
 |      |                |                |                |                | set            |
 |      |                |                |                |                | scaling\_facto |
 |      |                |                |                |                | r              |
 |      |                |                |                |                | 1e-9.          |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | vertexRadius   | optional       | 1e-12          | length (in m)  | Vertices may   |
 |      |                |                |                |                | be shared by   |
 |      |                |                |                |                | multiple       |
 |      |                |                |                |                | triangles so   |
 |      |                |                |                |                | the same       |
 |      |                |                |                |                | vertex may be  |
 |      |                |                |                |                | loaded         |
 |      |                |                |                |                | multiple times |
 |      |                |                |                |                | for different  |
 |      |                |                |                |                | triangles. The |
 |      |                |                |                |                | vertexRadius   |
 |      |                |                |                |                | is the minimum |
 |      |                |                |                |                | distance       |
 |      |                |                |                |                | between two    |
 |      |                |                |                |                | vertices so    |
 |      |                |                |                |                | that they are  |
 |      |                |                |                |                | considered to  |
 |      |                |                |                |                | be distinct    |
 |      |                |                |                |                | vertices.      |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      | debugFlag      | optional       | false          | boolean        | If true, the   |
 |      |                |                |                |                | following data |
 |      |                |                |                |                | will be        |
 |      |                |                |                |                | printed to the |
 |      |                |                |                |                | script prompt: |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Input Vertex  |
 |      |                |                |                |                | Count (total   |
 |      |                |                |                |                | number of      |
 |      |                |                |                |                | vertices in    |
 |      |                |                |                |                | the file)      |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Triangles     |
 |      |                |                |                |                | (total number  |
 |      |                |                |                |                | of triangles)  |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Filtered      |
 |      |                |                |                |                | Vertices       |
 |      |                |                |                |                | (number of     |
 |      |                |                |                |                | unique         |
 |      |                |                |                |                | vertices)      |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Vertex        |
 |      |                |                |                |                | Collisions     |
 |      |                |                |                |                | (Input Vertex  |
 |      |                |                |                |                | Count minus    |
 |      |                |                |                |                | Filtered       |
 |      |                |                |                |                | Vertices)      |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Invalid       |
 |      |                |                |                |                | Triangles      |
 |      |                |                |                |                |                |
 |      |                |                |                |                | -Expected      |
 |      |                |                |                |                | Vertex         |
 |      |                |                |                |                | Collisions     |
 |      |                |                |                |                |                |
 |      |                |                |                |                | If the number  |
 |      |                |                |                |                | of invalid     |
 |      |                |                |                |                | triangles is   |
 |      |                |                |                |                | larger than 0, |
 |      |                |                |                |                | try adjusting  |
 |      |                |                |                |                | the            |
 |      |                |                |                |                | vertexRadius   |
 |      |                |                |                |                | parameter and  |
 |      |                |                |                |                | importing the  |
 |      |                |                |                |                | object again.  |
 |      |                |                |                |                |                |
 |      |                |                |                |                | Note: If there |
 |      |                |                |                |                | are a large    |
 |      |                |                |                |                | number of      |
 |      |                |                |                |                | triangles in   |
 |      |                |                |                |                | the STL file,  |
 |      |                |                |                |                | the script     |
 |      |                |                |                |                | function can   |
 |      |                |                |                |                | take longer to |
 |      |                |                |                |                | run when       |
 |      |                |                |                |                | debugFlag is   |
 |      |                |                |                |                | set to true.   |
 |      +----------------+----------------+----------------+----------------+----------------+
 |      
 |      See Also
 |      
 |      set(), readstltriangles()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_stlimport.html
 |  
 |  str2num(self, *args)
 |      Converts a string into a floating point number. Use the format script
 |      command to change the precision of the output.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.str2num(string)              | Converts string into a number.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      endl(), write(), format(), findstring(), replace(), replacestring(),
 |      substring(), lower(), upper(), toscript(), almostequal()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_str2num.html
 |  
 |  struct(self, *args)
 |      Adds a structure array. Any data type (such as matrix, string, dataset)
 |      can be added to structure arrays.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | a = o.struct()                       | Creates an structure array.          |
 |      +--------------------------------------+--------------------------------------+
 |      | a.a = "string"()                     | Adds a string field to the structure |
 |      |                                      | array.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | a.b = matrix(5,5)                    | Adds a field of matrix of 5x5 to the |
 |      |                                      | structure array.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      matrixdataset(), rectilineardataset(), cell()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_struct.html
 |  
 |  substring(self, *args)
 |      Extracts a substring from a string.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | s1 = o.substring(s,pos)              | Returns a substring of s, starting   |
 |      |                                      | at position pos to the end of s. The |
 |      |                                      | position pos can be 1 to length(s).  |
 |      +--------------------------------------+--------------------------------------+
 |      | s1 = o.substring(s,pos,len)          | Returns a substring of s, starting   |
 |      |                                      | at position pos, with len            |
 |      |                                      | characters. If len is -1 (or any     |
 |      |                                      | value less than 0) it returns the    |
 |      |                                      | substring at position pos to the end |
 |      |                                      | of s. The default value of len is    |
 |      |                                      | -1.                                  |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), findstring(), replace(), replacestring(), str2num(),
 |      num2str(), splitstring(), lower(), upper(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_substring.html
 |  
 |  sum(self, *args)
 |      Returns the sum of elements in a matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sum(x)                       | Sum of all the elements in matrix x, |
 |      |                                      | over all dimensions.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.sum(x,n)                     | Sum elements of x over the specified |
 |      |                                      | dimension n.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      integrate(), mean(), prod()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_sum.html
 |  
 |  svd(self, *args)
 |      Returns a 3-cell array with the singular value decomposition of a matrix
 |      A. The command supports real and complex A.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | [U,S,V\*] = o.svd(A)                 | Returns a 3-cell array with the      |
 |      |                                      | singular value decomposition of      |
 |      |                                      | matrix A. S is a diagonal matrix of  |
 |      |                                      | the same dimension as A, with        |
 |      |                                      | non-negative diagonal elements in    |
 |      |                                      | decreasing order. U and V\* are      |
 |      |                                      | unitary matrices (V\* is the         |
 |      |                                      | conjugate transpose of V). If M =    |
 |      |                                      | svd(A), then A = mult( M{1}, M{2},   |
 |      |                                      | M{3} ).                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      eig(), ctranspose(), mult()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_svd.html
 |  
 |  switchtolayout(self, *args)
 |      Switches the solver to LAYOUT mode.  The LAYOUT mode allows you to add
 |      and modify simulation objects for a new simulation.  Once a simulation
 |      is run, the solver goes into ANALYSIS mode and no simulation objects can
 |      be added or modified (Except for the "Analysis" tab of analysis groups).
 |       While in ANALYSIS mode, any commands to modify objects will return
 |      errors. You must switch to LAYOUT mode before modifying any objects.
 |       Note that any available results will be lost once the solver is
 |      switched back to LAYOUT mode.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.switchtolayout()                   | Switches to LAYOUT mode from         |
 |      |                                      | ANALYSIS mode.                       |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      layoutmode(), run(), setnamed()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_switchtolayout.html
 |  
 |  system(self, *args)
 |      The system command allows you to have the operating system (OS) execute
 |      a command, rather than the Lumerical Script Prompt.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.system("command")                  | Run "command" at the OS command      |
 |      |                                      | prompt.                              |
 |      |                                      |                                      |
 |      |                                      | The system command does not return   |
 |      |                                      | any data.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      readdata(), exit(), currentfilename()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_system.html
 |  
 |  tan(self, *args)
 |      Calculates the trigonometric tangent function. Angle units are in
 |      radians. The function is defined for complex angles. Phase of a complex
 |      number is evaluated between -pi and pi.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.tan(x)                       | Returns the complex tangent of x.    |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      atan(), atan2()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_tan.html
 |  
 |  topoparamstogradient(self, *args)
 |  
 |  topoparamstoindex(self, *args)
 |  
 |  topoparamstominfeaturesizegradient(self, *args)
 |  
 |  topoparamstominfeaturesizeindicator(self, *args)
 |  
 |  toscript(self, *args)
 |      Returns a string containing the equivalent script to generate a
 |      variable. This script function is particularly useful when debugging
 |      cells and structure variables.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.toscript(variable, expand)     | Returns a string containing the      |
 |      |                                      | equivalent script to generate        |
 |      |                                      | ‘variable’. If ‘expand’ is true,     |
 |      |                                      | matrix values will also be converted |
 |      |                                      | to script, regardless of their size  |
 |      |                                      | – this can lead to large strings. To |
 |      |                                      | prevent the matrix values conversion |
 |      |                                      | set expand to ‘false’. The default   |
 |      |                                      | for 'expand' is true.                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      splitstring(), lower(), upper()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_toscript.html
 |  
 |  transmission(self, *args)
 |      Returns the amount of power transmitted through power monitors and
 |      profile monitors, normalized to the source power.  A value of 0.3 means
 |      that 30% the optical power injected by the source passed through the
 |      monitor. Negative values mean the power is flowing in the negative
 |      direction.
 |      
 |      In the steady state, the transmission is calculated with the following
 |      formula.
 |      
 |      where
 |      
 |      T(f) is the normalized transmission as a function of frequency
 |      
 |      P(f) is the Poynting vector normal to the surface
 |      
 |      dS is the surface normal
 |      
 |      The normalization state (cwnorm or nonorm) does not affect the result
 |      because of the source power normalization.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission("mname")        | Transmission through monitor mname.  |
 |      |                                      | It must be obvious from the shape of |
 |      |                                      | the monitor which axis is normal to  |
 |      |                                      | the monitor surface.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission("mname",        | The additional argument, option, can |
 |      | option)                              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcepower(), dipolepower(), transmission\_avg(), transmission\_pavg()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_transmission.html
 |  
 |  transmission_avg(self, *args)
 |      Returns the total spectral average power through a monitor surface,
 |      normalized to the total spectral average of the source. See the Units
 |      and normalization - Spectral averaging section for more information.
 |      
 |      where        
 |      
 |      Tavg is the normalized total spectral average transmission
 |      
 |      <P> is the total spectral average Poynting vector
 |      
 |      dS is the surface normal
 |      
 |      The normalization state (cwnorm or nonorm) does not affect the result
 |      because of the source power normalization.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission\_avg            | Returns the total spectral average   |
 |      | ("monitorname")                      | transmission through monitorname. It |
 |      |                                      | must be obvious from the shape of    |
 |      |                                      | the monitor which axis is normal to  |
 |      |                                      | the monitor surface.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission\_avg            | The additional argument, option, can |
 |      | ("monitorname", option)              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcepower\_avg(), transmission(), transmission\_pavg()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_transmission_avg.html
 |  
 |  transmission_pavg(self, *args)
 |      Returns the partial spectral average power through a monitor surface,
 |      normalized to the partial spectral average of the source. See the Units
 |      and normalization - Spectral averaging section for more information.
 |      
 |      where        
 |      
 |      Tpavg is the normalized partial spectral average transmission
 |      
 |      <P> is the partial spectral average Poynting vector
 |      
 |      dS is the surface normal
 |      
 |      The normalization state (cwnorm or nonorm) does not affect the result
 |      because of the source power normalization.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission\_pavg           | Returns the partial spectral average |
 |      | ("monitorname")                      | transmission through monitorname. It |
 |      |                                      | must be obvious from the shape of    |
 |      |                                      | the monitor which axis is normal to  |
 |      |                                      | the monitor surface.                 |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.transmission\_pavg           | The additional argument, option, can |
 |      | ("monitorname", option)              | have a value of 1 or 2. If it is 2,  |
 |      |                                      | the data is unfolded where possible  |
 |      |                                      | according to the symmetry or         |
 |      |                                      | anti-symmetric boundaries if it      |
 |      |                                      | comes from a monitor that intersect  |
 |      |                                      | such a boundary at x min, y min or z |
 |      |                                      | min. The default value of option is  |
 |      |                                      | 2.                                   |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      sourcepower\_pavg(), transmission(), transmission\_avg()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_transmission_partial_avg.html
 |  
 |  transpose(self, *args)
 |      Transposes a 1D or 2D matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | y = o.transpose(x)                   | If x is an N x M matrix, then y will |
 |      |                                      | be M x N, where the entries are      |
 |      |                                      | y(j,i)=x(i,j).                       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      ctranspose(), reshape(), flip(), permute(), size()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_transpose.html
 |  
 |  undo(self, *args)
 |      Undos the last command that modified any objects, you can undo the last
 |      5 commands.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.undo()                             | Undo last modify object command.     |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      redo(), historyon(), historyoff()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_undo.html
 |  
 |  unique(self, *args)
 |      Returns an array containing all the unique values in a matrix. In other
 |      words, this command returns all the elements in a matrix without
 |      repeating them if they appear more than once in the matrix.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.unique(a)                      | Returns an array containing          |
 |      |                                      | containing all unique values in the  |
 |      |                                      | matrix a.                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      uniquevertices()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_unique.html
 |  
 |  uniquevertices(self, *args)
 |      Given a matrix of vertices, returns a matrix of unique vertices with
 |      differences in values larger than a specified tolerance.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out=o.uniquevertices(vertexTable,    | Returns unique elements of a matrix  |
 |      | absTolerance)                        | with differences in values larger    |
 |      |                                      | than a specified tolerance.          |
 |      |                                      |                                      |
 |      |                                      | vertexTable is a Mx2 or Mx3 matrix   |
 |      |                                      |                                      |
 |      |                                      | absTolerance is the magnitude of the |
 |      |                                      | tolerance                            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      unique()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_uniquevertices.html
 |  
 |  unselectall(self, *args)
 |      Unselects all objects and groups. This is the counter operation of
 |      selectall.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.unselectall()                      | Unselects all objects and groups.    |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      selectall()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_unselectall.html
 |  
 |  unstructureddataset(self, *args)
 |      Creates an empty dataset that is associated with arbitrary x/y/z
 |      coordinate in space, and with additional matrix, a connectivity matrix
 |      to connect them. The connectivity matrix comes after x, y, and z. Like
 |      rectilinear datasets, unstructured datasets can be parameterized, and
 |      can contain an arbitrary number of attributes (see addattribute) and
 |      parameters (see addparameter).
 |      
 |      See Dataset introduction for more information. For datasets that are not
 |      associated with the x/y/z coordinates (ex. transmission as a function of
 |      frequency), see matrixdataset.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.unstructureddataset(x,y,z,C)       | Creates an empty unstructured        |
 |      |                                      | dataset associated with the          |
 |      |                                      | coordinates x/y/z and a connectivity |
 |      |                                      | matrix to connect them.              |
 |      |                                      |                                      |
 |      |                                      | Arguments 'x', 'y' and 'z' must be   |
 |      |                                      | the same length; equivalent to the   |
 |      |                                      | total number of points.              |
 |      |                                      |                                      |
 |      |                                      | The argument 'C' should be a matrix  |
 |      |                                      | of integers where the number of rows |
 |      |                                      | equal to number of shapes in the     |
 |      |                                      | mesh, the number of columns should   |
 |      |                                      | be 2 (line segments), 3 (triangles)  |
 |      |                                      | or 4 (tetrahedra), and values should |
 |      |                                      | be integers.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), addattribute(), addparameter(), visualize(),
 |      getparameter(), getattribute(), matrixdataset(), struct()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_unstructureddataset.html
 |  
 |  unwrap(self, *args)
 |      Removes changes of more than 2pi from a 1D array. It can be useful after
 |      angle(x) to see phase without discontinuities.
 |      
 |      The unwrap function is primarily intended for 1D arrays. Care must be
 |      taken when applying it to matrices with more than one dimension.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.unwrap(x)                    | Return the values of x without       |
 |      |                                      | discontinuities.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +----+----+
 |      +----+----+
 |      
 |      See Also
 |      
 |      real(), imag(), angle()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_unwrap.html
 |  
 |  updatemodes(self, *args)
 |      Updates the mode profile(s) of selected mode expansion monitor If there
 |      are no mode profiles stored in the mode expansion monitor, then the mode
 |      with the highest effective index will be selected. If mode profiles are
 |      already stored in the mode expansion monitor, then the modes with the
 |      best overlap with the old modes will be selected. Note that the mode
 |      expansion monitor must be selected before running this command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.updatemodes()                      | Updates mode profile of the selected |
 |      |                                      | mode expansion monitor.              |
 |      |                                      |                                      |
 |      |                                      | Returns 1 if the update was          |
 |      |                                      | successful and -1 if not.            |
 |      +--------------------------------------+--------------------------------------+
 |      | o.updatemodes(mode\_number)          | Updates the mode expansion monitor   |
 |      |                                      | and selects the desired mode         |
 |      |                                      | numbers. For example,                |
 |      |                                      | updatemodes(1:10); will calculate    |
 |      |                                      | the 10 modes with the highest        |
 |      |                                      | refractive index. Please note that   |
 |      |                                      | making this call will force a        |
 |      |                                      | recalculation of a modes, even if    |
 |      |                                      | the same modes have previously been  |
 |      |                                      | calculated. In addition, making this |
 |      |                                      | call will force the mode selection   |
 |      |                                      | method to become "user select". This |
 |      |                                      | optional argument was introduced in  |
 |      |                                      | FDTD Solutions 8.6.3 and MODE        |
 |      |                                      | Solutions 6.5.3.                     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | NOTE: Saving simulation files before using updatesourcemode              |
 |      |                                                                          |
 |      | If you have a script file which updates the simulation mesh, then you    |
 |      | should use the save script command before updating the source mode. This |
 |      | will ensure that the mesh has been updated before the new mode is        |
 |      | calculated.                                                              |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | NOTE: overlap                                                            |
 |      |                                                                          |
 |      | The fraction of electromagnetic fields that overlap between the two      |
 |      | modes is given by the expression below. It is also the fraction of power |
 |      | from mode2 that can propagate in mode1. For more information, please see |
 |      | overlap script command.                                                  |
 |                                                                                
 |      +--------------------------------------------------------------------------+
 |      
 |      See Also
 |      
 |      addmode(), addmodeexpansion(), clearsourcedata(), clearmodedata(),
 |      getresult(), overlap(), expand(), seteigensolver(), geteigensolver(),
 |      updatesourcemode()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_updatemodes.html
 |  
 |  updateportmodes(self, *args)
 |      Selects the specified modes in the selected port object in FDTD
 |      Solutions or MODE Solutions' EME solver, or updates already selected
 |      port modes. Modes are specified by the mode number in the eigensolver's
 |      mode list. For more information about the port object in FDTD Solutions
 |      see Ports.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.updateportmodes(modes\_to\_select) | Selects the specified modes in the   |
 |      |                                      | the selected port object.            |
 |      |                                      |                                      |
 |      |                                      | This function returns 1 if modes     |
 |      |                                      | were updated successfully and -1 if  |
 |      |                                      | there was an error updating the      |
 |      |                                      | modes.                               |
 |      +--------------------------------------+--------------------------------------+
 |      | o.updateportmodes()                  | Updates the mode profiles of the     |
 |      |                                      | selected mode ports.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      addport(), set(), geteigensolver(), seteigensolver(),
 |      clearportmodedata()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_updateportmodes.html
 |  
 |  updatesourcemode(self, *args)
 |      Updates the mode profile of selected mode source. If there is no mode
 |      profile stored in the source, then the mode with the highest effective
 |      index will be selected. If a mode is already stored in the source, then
 |      the mode with the best overlap with the old mode will be selected. Note
 |      that the mode source must be selected before running this command.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | print o.updatesourcemode()           | Updates mode profile of the selected |
 |      |                                      | Mode source.                         |
 |      |                                      |                                      |
 |      |                                      | Returns the fraction of              |
 |      |                                      | electromagnetic fields that overlap  |
 |      |                                      | between the old and the new mode     |
 |      +--------------------------------------+--------------------------------------+
 |      | print                                | Updates the mode source and selects  |
 |      | o.updatesourcemode(mode\_number)     | the desired mode number. For         |
 |      |                                      | example, updatesourcemode(1); will   |
 |      |                                      | calculate the fundamental mode.      |
 |      |                                      | Please note that making this call    |
 |      |                                      | will force a recalculation of a      |
 |      |                                      | mode, even if the same mode has      |
 |      |                                      | previously been calculated. In       |
 |      |                                      | addition, making this call will      |
 |      |                                      | force the mode selection method to   |
 |      |                                      | become "user select". This optional  |
 |      |                                      | argument was introduced in FDTD      |
 |      |                                      | Solutions 8.6.3 and MODE Solutions   |
 |      |                                      | 6.5.3.                               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | NOTE: Saving simulation files before using updatesourcemode              |
 |      |                                                                          |
 |      | If you have a script file which updates the simulation mesh, then you    |
 |      | should use the save script command before updating the source mode. This |
 |      | will ensure that the mesh has been updated before the new mode is        |
 |      | calculated.                                                              |
 |      +--------------------------------------------------------------------------+
 |      
 |      +--------------------------------------------------------------------------+
 |      | NOTE: overlap                                                            |
 |      |                                                                          |
 |      | The fraction of electromagnetic fields that overlap between the two      |
 |      | modes is given by the expression below. It is also the fraction of power |
 |      | from mode2 that can propagate in mode1. For more information, please see |
 |      | overlap script command.                                                  |
 |                                                                                
 |      +--------------------------------------------------------------------------+
 |      
 |      See Also
 |      
 |      addmode(), clearsourcedata(), clearmodedata(), getresult(), overlap(),
 |      expand(), seteigensolver(), geteigensolver(), updateportmodes()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_updatesourcemode.html
 |  
 |  upper(self, *args)
 |      Converts all the characters in a string to upper case.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.upper(string)                      | Converts a string to upper case.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      length(), substring(), findstring(), replace(), str2num(), num2str(),
 |      splitstring(), lower(), toscript()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_upper.html
 |  
 |  var(self, *args)
 |      Returns the variance of all entries of the matrix specified. The
 |      variance of a set of N numbers X = [x1,...,xN] is defined as
 |      
 |      where μ is the mean of X.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.var(A)                       | Will return variance of all of       |
 |      |                                      | matrix A, over all dimensions.       |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      std(), mean(), sum(), length()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_var.html
 |  
 |  vectorplot(self, *args)
 |      Creates a vector plot from a rectilinear dataset. The rectilinear
 |      dataset must be a vector, like the E field, and it must have no
 |      additional parameters (i.e., if you have E vs. x,y,z,f and f has two or
 |      more values, then the command fails). Generally, it is easier to use
 |      visualize(E) and then select the vector plot option (see Visualizer and
 |      figure settings).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.vectorplot(E)                      | Creates a vector plot of the dataset |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      plotxy(), legend(), image(), closeall(), setplot(), exportfigure(),
 |      plot()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_vectorplot.html
 |  
 |  version(self, *args)
 |      Returns the current version of the application.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.version()                    | Returns the version of the           |
 |      |                                      | application.                         |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      versionfile()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_version.html
 |  
 |  viewundo(self, *args)
 |  
 |  visualize(self, *args)
 |      Sends data to the visualizer (see Visualizer and figure settings).
 |      
 |      For FDTD, MODE, DEVICE, and INTERCONNECT
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.visualize(R)                       | Plots the dataset R in the           |
 |      |                                      | Visualizer.                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.visualize(R,T)                     | Sends two datasets to the            |
 |      |                                      | Visualizer.                          |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      exportfigure(), image(), plot(), setplot(), closeall(), add2visualizer()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_visualize.html
 |  
 |  vtksave(self, *args)
 |      Saves a Lumerical dataset into the VTK format. The command only saves
 |      rectilinear and unstructured datasets. The “filename” will have .vtr
 |      appended for rectilinear dataset, .vtu appended for unstructured
 |      dataset. The freely available data visualization program Paraview can
 |      then be used to create sophisticated plots of your data.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.vtksave(“filename”, dataset)       | Save the dataset in vtk file of the  |
 |      |                                      | name specified.                      |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      rectilineardataset(), matlabsave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_vtksave.html
 |  
 |  which(self, *args)
 |      Returns the full file pathname for the specified file.
 |      
 |      This function can be helpful when you have added several directories to
 |      the Lumerical path variable and you want to check which files are being
 |      accessed.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.which("filename")            | Returns the pathname of the file     |
 |      |                                      | "filename" as a string.              |
 |      |                                      |                                      |
 |      |                                      | Use ?which("filename"); to display   |
 |      |                                      | the result to the screen.            |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      getpath(), addpath(), pwd(), currentfilename(), fileexists()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_which.html
 |  
 |  wizarddata(self, *args)
 |      This command will cause the wizard window to wait until the user selects
 |      OK or Cancel. It then returns value data from the matrix in a N+1 length
 |      matrix, where N is the number of widgets (excluding labels) in the
 |      current wizard page.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.wizarddata()                 | The values of out are                |
 |      |                                      |                                      |
 |      |                                      | •out(1) = 0, 1 or -1. 0 means the    |
 |      |                                      | user pressed Cancel, 1 means the     |
 |      |                                      | user pressed the first button        |
 |      |                                      | (typically "OK" or "Next") and -1    |
 |      |                                      | means the user pressed the second    |
 |      |                                      | button (typically "Back")            |
 |      |                                      |                                      |
 |      |                                      | •out(2:N+1) gives the numeric values |
 |      |                                      | that the user entered for each input |
 |      |                                      | field when out(1) is 1. Note that    |
 |      |                                      | check boxes return 1 if checked and  |
 |      |                                      | 0 if unchecked. Menu items return a  |
 |      |                                      | number between 1 and M where M is    |
 |      |                                      | the number of choices in the menu.   |
 |      |                                      | If out(1) is 0 or -1, all the values |
 |      |                                      | out(2:N+1) are zero.                 |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_wizarddata.html
 |  
 |  wizardgetdata(self, *args)
 |      Returns data entered into a specific widget.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.wizardgetdata(N)             | Returns the value that the user      |
 |      |                                      | entered into the Nth widget. Out     |
 |      |                                      | will be a number or a string,        |
 |      |                                      | depending on the type of widget.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizardpage()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_wizardgetdata.html
 |  
 |  wizardoption(self, *args)
 |      Sets some options for wizard widgets and labels.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.wizardoption                       | The options are                      |
 |      | ("optionname",setting)               |                                      |
 |      |                                      | •"fontsize" sets the font size to    |
 |      |                                      | any value between 8 and 40           |
 |      |                                      |                                      |
 |      |                                      | •"fieldwidth" sets the width of each |
 |      |                                      | widget field to any value between 20 |
 |      |                                      | and the full width of the wizard     |
 |      |                                      | window.                              |
 |      |                                      |                                      |
 |      |                                      | •"fieldheight" sets the height of    |
 |      |                                      | each field to any value between 8    |
 |      |                                      | and the full height of the wizard    |
 |      |                                      | window.                              |
 |      |                                      |                                      |
 |      |                                      | •"margin", sets size of the left     |
 |      |                                      | margin to any value between 0 and    |
 |      |                                      | full width of the wizard window.     |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizard()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_wizardoption.html
 |  
 |  wizardwidget(self, *args)
 |      Adds a new widget to the current wizard window. This command should only
 |      be done after creating a new wizard page with the command newwizard.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.wizardwidget( "type", "name")      | type can be                          |
 |      |                                      |                                      |
 |      |                                      | •"number" for a numeric input field  |
 |      |                                      |                                      |
 |      |                                      | •"string" for a alphanumeric field   |
 |      |                                      |                                      |
 |      |                                      | •"checkbox" for a checkbox           |
 |      |                                      |                                      |
 |      |                                      | •"menu" for a pulldown menu field    |
 |      |                                      |                                      |
 |      |                                      | •"label" to add a string label       |
 |      |                                      | (wizardgetdata does not return       |
 |      |                                      | information for labels)              |
 |      |                                      |                                      |
 |      |                                      | name is a string used to give the    |
 |      |                                      | input field, checkbox, menu item or  |
 |      |                                      | label a name.                        |
 |      +--------------------------------------+--------------------------------------+
 |      | o.wizardwidget( "type", "label",     | defaultValue provides a default      |
 |      | defaultValue)                        | value for numeric inputs,            |
 |      |                                      | checkboxes, menu items or strings.   |
 |      +--------------------------------------+--------------------------------------+
 |      | o.wizardwidget( "type", "label",     | If the "type" of widget is a "menu", |
 |      | "choices", defaultValue)             | then the menu choices must be        |
 |      |                                      | provided. These choices should be    |
 |      |                                      | separated by the character "\|". For |
 |      |                                      | example, to create a pulldown widget |
 |      |                                      | with the name "simulation type" and  |
 |      |                                      | 3 choices "TE","TM","3D", with the   |
 |      |                                      | default choice "3D", the command is  |
 |      |                                      |                                      |
 |      |                                      | wizardwidget("menu","simulation      |
 |      |                                      | type","TE\|TM\|3D",3);               |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      newwizardpage()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_wizardwidget.html
 |  
 |  workspace(self, *args)
 |      Returns a list of all the currently defined variables in the scripting
 |      workspace.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | out = o.workspace()                  | Returns a string that lists all      |
 |      |                                      | currently defined variables in the   |
 |      |                                      | workspace.                           |
 |      |                                      |                                      |
 |      |                                      | Use ?workspace; to print this to the |
 |      |                                      | screen.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      clear()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_workspace.html
 |  
 |  write(self, *args)
 |      Writes string variables to text files or to standard output.
 |      
 |      Typically the write command is used to output data to a text file. If
 |      the specified file does not exist, it will be created. If it does exist,
 |      then the output string will be appended to the end of the file. The
 |      write command will automatically add a new line character at the end of
 |      the string.
 |      
 |      On Linux systems only, the write command will output to the standard
 |      output (stdout) if a filename is not specified.
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | o.write(my\_string)                  | Write my\_string to the standard     |
 |      |                                      | output (linux only).                 |
 |      +--------------------------------------+--------------------------------------+
 |      | o.write("testfile.txt", my\_string)  | Will write the contents of the       |
 |      |                                      | string variable my\_string to        |
 |      |                                      | testfile.txt.                        |
 |      |                                      |                                      |
 |      |                                      | This function does not return any    |
 |      |                                      | data.                                |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      savedata(), readdata(), read(), rm(), num2str(), endl(), format(),
 |      fileexists(), matlabsave()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_write.html
 |  
 |  zbfexport(self, *args)
 |  
 |  zbfload(self, *args)
 |  
 |  zbfread(self, *args)
 |  
 |  zbfwrite(self, *args)
 |  
 |  zeros(self, *args)
 |      Initialize a matrix. All elements are set to zero (same as matrix).
 |      
 |      +--------------------------------------+--------------------------------------+
 |      | Syntax                               | Description                          |
 |      +--------------------------------------+--------------------------------------+
 |      | x = o.zeros(i,j,k,....)              | Initializes an i x j x k x ....      |
 |      |                                      | matrix.                              |
 |      +--------------------------------------+--------------------------------------+
 |      
 |      See Also
 |      
 |      linspace(), matrix(), ones()
 |      
 |      https://kb.lumerical.com/en/ref_scripts_zeros.html
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
